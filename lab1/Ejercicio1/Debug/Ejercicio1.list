
Ejercicio1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b68  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001ca4  08001ca4  00011ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cc8  08001cc8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001cc8  08001cc8  00011cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001cd0  08001cd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cd0  08001cd0  00011cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cd4  08001cd4  00011cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08001ce4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001ce4  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000541a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001220  00000000  00000000  0002544f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  00026670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000538  00000000  00000000  00026c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000144f2  00000000  00000000  00027178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000636c  00000000  00000000  0003b66a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fcaf  00000000  00000000  000419d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c1685  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016a0  00000000  00000000  000c16d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001c8c 	.word	0x08001c8c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08001c8c 	.word	0x08001c8c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047a:	f000 f9ea 	bl	8000852 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047e:	f000 f835 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000482:	f000 f8ab 	bl	80005dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000486:	f000 f87f 	bl	8000588 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  /* a) */
	  for (k=0; k<15; k++) {
 800048a:	2300      	movs	r3, #0
 800048c:	73fb      	strb	r3, [r7, #15]
 800048e:	e011      	b.n	80004b4 <main+0x40>
		  Array[k] += k;
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	f107 0210 	add.w	r2, r7, #16
 8000496:	4413      	add	r3, r2
 8000498:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	7bfa      	ldrb	r2, [r7, #15]
 80004a0:	440a      	add	r2, r1
 80004a2:	b2d2      	uxtb	r2, r2
 80004a4:	f107 0110 	add.w	r1, r7, #16
 80004a8:	440b      	add	r3, r1
 80004aa:	f803 2c10 	strb.w	r2, [r3, #-16]
	  for (k=0; k<15; k++) {
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	3301      	adds	r3, #1
 80004b2:	73fb      	strb	r3, [r7, #15]
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	2b0e      	cmp	r3, #14
 80004b8:	d9ea      	bls.n	8000490 <main+0x1c>
	  }

	  /* b) */
	  for (k=15; k>0; k--) {
 80004ba:	230f      	movs	r3, #15
 80004bc:	73fb      	strb	r3, [r7, #15]
 80004be:	e011      	b.n	80004e4 <main+0x70>
		  Array[k] += k;
 80004c0:	7bfb      	ldrb	r3, [r7, #15]
 80004c2:	f107 0210 	add.w	r2, r7, #16
 80004c6:	4413      	add	r3, r2
 80004c8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	7bfa      	ldrb	r2, [r7, #15]
 80004d0:	440a      	add	r2, r1
 80004d2:	b2d2      	uxtb	r2, r2
 80004d4:	f107 0110 	add.w	r1, r7, #16
 80004d8:	440b      	add	r3, r1
 80004da:	f803 2c10 	strb.w	r2, [r3, #-16]
	  for (k=15; k>0; k--) {
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	3b01      	subs	r3, #1
 80004e2:	73fb      	strb	r3, [r7, #15]
 80004e4:	7bfb      	ldrb	r3, [r7, #15]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d1ea      	bne.n	80004c0 <main+0x4c>
	  for (k=0; k<15; k++) {
 80004ea:	e7ce      	b.n	800048a <main+0x16>

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b092      	sub	sp, #72	; 0x48
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	2234      	movs	r2, #52	; 0x34
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f001 fbbe 	bl	8001c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	463b      	mov	r3, r7
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800050e:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <SystemClock_Config+0x98>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000516:	4a1b      	ldr	r2, [pc, #108]	; (8000584 <SystemClock_Config+0x98>)
 8000518:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800051c:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051e:	2302      	movs	r3, #2
 8000520:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000522:	2301      	movs	r3, #1
 8000524:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000526:	2310      	movs	r3, #16
 8000528:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052a:	2302      	movs	r3, #2
 800052c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052e:	2300      	movs	r3, #0
 8000530:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000532:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000536:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000538:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800053c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fc80 	bl	8000e48 <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800054e:	f000 f8ad 	bl	80006ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	230f      	movs	r3, #15
 8000554:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000556:	2303      	movs	r3, #3
 8000558:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000566:	463b      	mov	r3, r7
 8000568:	2101      	movs	r1, #1
 800056a:	4618      	mov	r0, r3
 800056c:	f000 ff9c 	bl	80014a8 <HAL_RCC_ClockConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000576:	f000 f899 	bl	80006ac <Error_Handler>
  }
}
 800057a:	bf00      	nop
 800057c:	3748      	adds	r7, #72	; 0x48
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40007000 	.word	0x40007000

08000588 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 800058e:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <MX_USART2_UART_Init+0x50>)
 8000590:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 8000594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000598:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005ae:	220c      	movs	r2, #12
 80005b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005c0:	f001 fa06 	bl	80019d0 <HAL_UART_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ca:	f000 f86f 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000028 	.word	0x20000028
 80005d8:	40004400 	.word	0x40004400

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b2a      	ldr	r3, [pc, #168]	; (800069c <MX_GPIO_Init+0xc0>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	4a29      	ldr	r2, [pc, #164]	; (800069c <MX_GPIO_Init+0xc0>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	61d3      	str	r3, [r2, #28]
 80005fe:	4b27      	ldr	r3, [pc, #156]	; (800069c <MX_GPIO_Init+0xc0>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b24      	ldr	r3, [pc, #144]	; (800069c <MX_GPIO_Init+0xc0>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a23      	ldr	r2, [pc, #140]	; (800069c <MX_GPIO_Init+0xc0>)
 8000610:	f043 0320 	orr.w	r3, r3, #32
 8000614:	61d3      	str	r3, [r2, #28]
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <MX_GPIO_Init+0xc0>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 0320 	and.w	r3, r3, #32
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_GPIO_Init+0xc0>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	4a1d      	ldr	r2, [pc, #116]	; (800069c <MX_GPIO_Init+0xc0>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	61d3      	str	r3, [r2, #28]
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_GPIO_Init+0xc0>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_GPIO_Init+0xc0>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a17      	ldr	r2, [pc, #92]	; (800069c <MX_GPIO_Init+0xc0>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_GPIO_Init+0xc0>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2120      	movs	r1, #32
 8000656:	4812      	ldr	r0, [pc, #72]	; (80006a0 <MX_GPIO_Init+0xc4>)
 8000658:	f000 fbde 	bl	8000e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_GPIO_Init+0xc8>)
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <MX_GPIO_Init+0xcc>)
 8000672:	f000 fa41 	bl	8000af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000676:	2320      	movs	r3, #32
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_GPIO_Init+0xc4>)
 800068e:	f000 fa33 	bl	8000af8 <HAL_GPIO_Init>

}
 8000692:	bf00      	nop
 8000694:	3728      	adds	r7, #40	; 0x28
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40020000 	.word	0x40020000
 80006a4:	10110000 	.word	0x10110000
 80006a8:	40020800 	.word	0x40020800

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <Error_Handler+0x8>
	...

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_MspInit+0x5c>)
 80006c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c2:	4a14      	ldr	r2, [pc, #80]	; (8000714 <HAL_MspInit+0x5c>)
 80006c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006c8:	6253      	str	r3, [r2, #36]	; 0x24
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_MspInit+0x5c>)
 80006cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_MspInit+0x5c>)
 80006d8:	6a1b      	ldr	r3, [r3, #32]
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <HAL_MspInit+0x5c>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6213      	str	r3, [r2, #32]
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_MspInit+0x5c>)
 80006e4:	6a1b      	ldr	r3, [r3, #32]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_MspInit+0x5c>)
 80006f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_MspInit+0x5c>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	6253      	str	r3, [r2, #36]	; 0x24
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x5c>)
 80006fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000706:	2007      	movs	r0, #7
 8000708:	f000 f9c2 	bl	8000a90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800

08000718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <HAL_UART_MspInit+0x7c>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d127      	bne.n	800078a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <HAL_UART_MspInit+0x80>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <HAL_UART_MspInit+0x80>)
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	6253      	str	r3, [r2, #36]	; 0x24
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_UART_MspInit+0x80>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <HAL_UART_MspInit+0x80>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	4a10      	ldr	r2, [pc, #64]	; (8000798 <HAL_UART_MspInit+0x80>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	61d3      	str	r3, [r2, #28]
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_UART_MspInit+0x80>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800076a:	230c      	movs	r3, #12
 800076c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800077a:	2307      	movs	r3, #7
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <HAL_UART_MspInit+0x84>)
 8000786:	f000 f9b7 	bl	8000af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	; 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40004400 	.word	0x40004400
 8000798:	40023800 	.word	0x40023800
 800079c:	40020000 	.word	0x40020000

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr

080007d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e6:	f000 f887 	bl	80008f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <SystemInit+0x14>)
 80007f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007fa:	609a      	str	r2, [r3, #8]
#endif
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000808:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800080a:	e003      	b.n	8000814 <LoopCopyDataInit>

0800080c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800080c:	4b0b      	ldr	r3, [pc, #44]	; (800083c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800080e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000810:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000812:	3104      	adds	r1, #4

08000814 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000814:	480a      	ldr	r0, [pc, #40]	; (8000840 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000818:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800081a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800081c:	d3f6      	bcc.n	800080c <CopyDataInit>
  ldr r2, =_sbss
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000820:	e002      	b.n	8000828 <LoopFillZerobss>

08000822 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000824:	f842 3b04 	str.w	r3, [r2], #4

08000828 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800082a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800082c:	d3f9      	bcc.n	8000822 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800082e:	f7ff ffdf 	bl	80007f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000832:	f001 f9ff 	bl	8001c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000836:	f7ff fe1d 	bl	8000474 <main>
  bx lr
 800083a:	4770      	bx	lr
  ldr r3, =_sidata
 800083c:	08001cd8 	.word	0x08001cd8
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000844:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000848:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800084c:	2000006c 	.word	0x2000006c

08000850 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC1_IRQHandler>

08000852 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000858:	2300      	movs	r3, #0
 800085a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f917 	bl	8000a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000862:	2000      	movs	r0, #0
 8000864:	f000 f80e 	bl	8000884 <HAL_InitTick>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	e001      	b.n	8000878 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000874:	f7ff ff20 	bl	80006b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000878:	79fb      	ldrb	r3, [r7, #7]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800088c:	2300      	movs	r3, #0
 800088e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <HAL_InitTick+0x68>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d022      	beq.n	80008de <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_InitTick+0x6c>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <HAL_InitTick+0x68>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80008a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f916 	bl	8000ade <HAL_SYSTICK_Config>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d10f      	bne.n	80008d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b0f      	cmp	r3, #15
 80008bc:	d809      	bhi.n	80008d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008be:	2200      	movs	r2, #0
 80008c0:	6879      	ldr	r1, [r7, #4]
 80008c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008c6:	f000 f8ee 	bl	8000aa6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_InitTick+0x70>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	e007      	b.n	80008e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	73fb      	strb	r3, [r7, #15]
 80008d6:	e004      	b.n	80008e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008d8:	2301      	movs	r3, #1
 80008da:	73fb      	strb	r3, [r7, #15]
 80008dc:	e001      	b.n	80008e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x1c>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x20>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4413      	add	r3, r2
 8000906:	4a03      	ldr	r2, [pc, #12]	; (8000914 <HAL_IncTick+0x1c>)
 8000908:	6013      	str	r3, [r2, #0]
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20000068 	.word	0x20000068
 8000918:	20000008 	.word	0x20000008

0800091c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <HAL_GetTick+0x10>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	20000068 	.word	0x20000068

08000930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800094c:	4013      	ands	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000962:	4a04      	ldr	r2, [pc, #16]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	60d3      	str	r3, [r2, #12]
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800097c:	4b04      	ldr	r3, [pc, #16]	; (8000990 <__NVIC_GetPriorityGrouping+0x18>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	f003 0307 	and.w	r3, r3, #7
}
 8000986:	4618      	mov	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	db0a      	blt.n	80009be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	490c      	ldr	r1, [pc, #48]	; (80009e0 <__NVIC_SetPriority+0x4c>)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	440b      	add	r3, r1
 80009b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009bc:	e00a      	b.n	80009d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4908      	ldr	r1, [pc, #32]	; (80009e4 <__NVIC_SetPriority+0x50>)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	3b04      	subs	r3, #4
 80009cc:	0112      	lsls	r2, r2, #4
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	440b      	add	r3, r1
 80009d2:	761a      	strb	r2, [r3, #24]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000e100 	.word	0xe000e100
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	f1c3 0307 	rsb	r3, r3, #7
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	bf28      	it	cs
 8000a06:	2304      	movcs	r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	2b06      	cmp	r3, #6
 8000a10:	d902      	bls.n	8000a18 <NVIC_EncodePriority+0x30>
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3b03      	subs	r3, #3
 8000a16:	e000      	b.n	8000a1a <NVIC_EncodePriority+0x32>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43da      	mvns	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43d9      	mvns	r1, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	4313      	orrs	r3, r2
         );
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3724      	adds	r7, #36	; 0x24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a5c:	d301      	bcc.n	8000a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00f      	b.n	8000a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <SysTick_Config+0x40>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a70:	f7ff ff90 	bl	8000994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <SysTick_Config+0x40>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SysTick_Config+0x40>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff49 	bl	8000930 <__NVIC_SetPriorityGrouping>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab8:	f7ff ff5e 	bl	8000978 <__NVIC_GetPriorityGrouping>
 8000abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	6978      	ldr	r0, [r7, #20]
 8000ac4:	f7ff ff90 	bl	80009e8 <NVIC_EncodePriority>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff5f 	bl	8000994 <__NVIC_SetPriority>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ffb0 	bl	8000a4c <SysTick_Config>
 8000aec:	4603      	mov	r3, r0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b087      	sub	sp, #28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b0e:	e160      	b.n	8000dd2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 8152 	beq.w	8000dcc <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d00b      	beq.n	8000b48 <HAL_GPIO_Init+0x50>
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d007      	beq.n	8000b48 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b3c:	2b11      	cmp	r3, #17
 8000b3e:	d003      	beq.n	8000b48 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2b12      	cmp	r3, #18
 8000b46:	d130      	bne.n	8000baa <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	2203      	movs	r2, #3
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000b7e:	2201      	movs	r2, #1
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	091b      	lsrs	r3, r3, #4
 8000b94:	f003 0201 	and.w	r2, r3, #1
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d003      	beq.n	8000bea <HAL_GPIO_Init+0xf2>
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	2b12      	cmp	r3, #18
 8000be8:	d123      	bne.n	8000c32 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	08da      	lsrs	r2, r3, #3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3208      	adds	r2, #8
 8000bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	220f      	movs	r2, #15
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	691a      	ldr	r2, [r3, #16]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f003 0307 	and.w	r3, r3, #7
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	08da      	lsrs	r2, r3, #3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3208      	adds	r2, #8
 8000c2c:	6939      	ldr	r1, [r7, #16]
 8000c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 0203 	and.w	r2, r3, #3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 80ac 	beq.w	8000dcc <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c74:	4b5e      	ldr	r3, [pc, #376]	; (8000df0 <HAL_GPIO_Init+0x2f8>)
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	4a5d      	ldr	r2, [pc, #372]	; (8000df0 <HAL_GPIO_Init+0x2f8>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6213      	str	r3, [r2, #32]
 8000c80:	4b5b      	ldr	r3, [pc, #364]	; (8000df0 <HAL_GPIO_Init+0x2f8>)
 8000c82:	6a1b      	ldr	r3, [r3, #32]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000c8c:	4a59      	ldr	r2, [pc, #356]	; (8000df4 <HAL_GPIO_Init+0x2fc>)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	089b      	lsrs	r3, r3, #2
 8000c92:	3302      	adds	r3, #2
 8000c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	220f      	movs	r2, #15
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a51      	ldr	r2, [pc, #324]	; (8000df8 <HAL_GPIO_Init+0x300>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d025      	beq.n	8000d04 <HAL_GPIO_Init+0x20c>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a50      	ldr	r2, [pc, #320]	; (8000dfc <HAL_GPIO_Init+0x304>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d01f      	beq.n	8000d00 <HAL_GPIO_Init+0x208>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a4f      	ldr	r2, [pc, #316]	; (8000e00 <HAL_GPIO_Init+0x308>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d019      	beq.n	8000cfc <HAL_GPIO_Init+0x204>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a4e      	ldr	r2, [pc, #312]	; (8000e04 <HAL_GPIO_Init+0x30c>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d013      	beq.n	8000cf8 <HAL_GPIO_Init+0x200>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a4d      	ldr	r2, [pc, #308]	; (8000e08 <HAL_GPIO_Init+0x310>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d00d      	beq.n	8000cf4 <HAL_GPIO_Init+0x1fc>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a4c      	ldr	r2, [pc, #304]	; (8000e0c <HAL_GPIO_Init+0x314>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d007      	beq.n	8000cf0 <HAL_GPIO_Init+0x1f8>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a4b      	ldr	r2, [pc, #300]	; (8000e10 <HAL_GPIO_Init+0x318>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d101      	bne.n	8000cec <HAL_GPIO_Init+0x1f4>
 8000ce8:	2306      	movs	r3, #6
 8000cea:	e00c      	b.n	8000d06 <HAL_GPIO_Init+0x20e>
 8000cec:	2307      	movs	r3, #7
 8000cee:	e00a      	b.n	8000d06 <HAL_GPIO_Init+0x20e>
 8000cf0:	2305      	movs	r3, #5
 8000cf2:	e008      	b.n	8000d06 <HAL_GPIO_Init+0x20e>
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	e006      	b.n	8000d06 <HAL_GPIO_Init+0x20e>
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e004      	b.n	8000d06 <HAL_GPIO_Init+0x20e>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e002      	b.n	8000d06 <HAL_GPIO_Init+0x20e>
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <HAL_GPIO_Init+0x20e>
 8000d04:	2300      	movs	r3, #0
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	f002 0203 	and.w	r2, r2, #3
 8000d0c:	0092      	lsls	r2, r2, #2
 8000d0e:	4093      	lsls	r3, r2
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d16:	4937      	ldr	r1, [pc, #220]	; (8000df4 <HAL_GPIO_Init+0x2fc>)
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d24:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <HAL_GPIO_Init+0x31c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d48:	4a32      	ldr	r2, [pc, #200]	; (8000e14 <HAL_GPIO_Init+0x31c>)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d4e:	4b31      	ldr	r3, [pc, #196]	; (8000e14 <HAL_GPIO_Init+0x31c>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d72:	4a28      	ldr	r2, [pc, #160]	; (8000e14 <HAL_GPIO_Init+0x31c>)
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d78:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <HAL_GPIO_Init+0x31c>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d9c:	4a1d      	ldr	r2, [pc, #116]	; (8000e14 <HAL_GPIO_Init+0x31c>)
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <HAL_GPIO_Init+0x31c>)
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dc6:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <HAL_GPIO_Init+0x31c>)
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f47f ae97 	bne.w	8000b10 <HAL_GPIO_Init+0x18>
  }
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	371c      	adds	r7, #28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40010000 	.word	0x40010000
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	40020400 	.word	0x40020400
 8000e00:	40020800 	.word	0x40020800
 8000e04:	40020c00 	.word	0x40020c00
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40021400 	.word	0x40021400
 8000e10:	40021800 	.word	0x40021800
 8000e14:	40010400 	.word	0x40010400

08000e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	807b      	strh	r3, [r7, #2]
 8000e24:	4613      	mov	r3, r2
 8000e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e28:	787b      	ldrb	r3, [r7, #1]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e2e:	887a      	ldrh	r2, [r7, #2]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000e34:	e003      	b.n	8000e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000e36:	887b      	ldrh	r3, [r7, #2]
 8000e38:	041a      	lsls	r2, r3, #16
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	619a      	str	r2, [r3, #24]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e31d      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e5a:	4b94      	ldr	r3, [pc, #592]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e64:	4b91      	ldr	r3, [pc, #580]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d07b      	beq.n	8000f72 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	2b08      	cmp	r3, #8
 8000e7e:	d006      	beq.n	8000e8e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	2b0c      	cmp	r3, #12
 8000e84:	d10f      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x5e>
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e8c:	d10b      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e8e:	4b87      	ldr	r3, [pc, #540]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d06a      	beq.n	8000f70 <HAL_RCC_OscConfig+0x128>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d166      	bne.n	8000f70 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e2f7      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d106      	bne.n	8000ebc <HAL_RCC_OscConfig+0x74>
 8000eae:	4b7f      	ldr	r3, [pc, #508]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a7e      	ldr	r2, [pc, #504]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e02d      	b.n	8000f18 <HAL_RCC_OscConfig+0xd0>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10c      	bne.n	8000ede <HAL_RCC_OscConfig+0x96>
 8000ec4:	4b79      	ldr	r3, [pc, #484]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a78      	ldr	r2, [pc, #480]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b76      	ldr	r3, [pc, #472]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a75      	ldr	r2, [pc, #468]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	e01c      	b.n	8000f18 <HAL_RCC_OscConfig+0xd0>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b05      	cmp	r3, #5
 8000ee4:	d10c      	bne.n	8000f00 <HAL_RCC_OscConfig+0xb8>
 8000ee6:	4b71      	ldr	r3, [pc, #452]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a70      	ldr	r2, [pc, #448]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	4b6e      	ldr	r3, [pc, #440]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a6d      	ldr	r2, [pc, #436]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e00b      	b.n	8000f18 <HAL_RCC_OscConfig+0xd0>
 8000f00:	4b6a      	ldr	r3, [pc, #424]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a69      	ldr	r2, [pc, #420]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	4b67      	ldr	r3, [pc, #412]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a66      	ldr	r2, [pc, #408]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d013      	beq.n	8000f48 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f20:	f7ff fcfc 	bl	800091c <HAL_GetTick>
 8000f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f28:	f7ff fcf8 	bl	800091c <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b64      	cmp	r3, #100	; 0x64
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e2ad      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f3a:	4b5c      	ldr	r3, [pc, #368]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0f0      	beq.n	8000f28 <HAL_RCC_OscConfig+0xe0>
 8000f46:	e014      	b.n	8000f72 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f48:	f7ff fce8 	bl	800091c <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f50:	f7ff fce4 	bl	800091c <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b64      	cmp	r3, #100	; 0x64
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e299      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f62:	4b52      	ldr	r3, [pc, #328]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f0      	bne.n	8000f50 <HAL_RCC_OscConfig+0x108>
 8000f6e:	e000      	b.n	8000f72 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d05a      	beq.n	8001034 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d005      	beq.n	8000f90 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	2b0c      	cmp	r3, #12
 8000f88:	d119      	bne.n	8000fbe <HAL_RCC_OscConfig+0x176>
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d116      	bne.n	8000fbe <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f90:	4b46      	ldr	r3, [pc, #280]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d005      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x160>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d001      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e276      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa8:	4b40      	ldr	r3, [pc, #256]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	493d      	ldr	r1, [pc, #244]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fbc:	e03a      	b.n	8001034 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d020      	beq.n	8001008 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <HAL_RCC_OscConfig+0x268>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fca6 	bl	800091c <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fca2 	bl	800091c <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e257      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fe6:	4b31      	ldr	r3, [pc, #196]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d0f0      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	492a      	ldr	r1, [pc, #168]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8001002:	4313      	orrs	r3, r2
 8001004:	604b      	str	r3, [r1, #4]
 8001006:	e015      	b.n	8001034 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <HAL_RCC_OscConfig+0x268>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100e:	f7ff fc85 	bl	800091c <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001016:	f7ff fc81 	bl	800091c <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e236      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001028:	4b20      	ldr	r3, [pc, #128]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f0      	bne.n	8001016 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0310 	and.w	r3, r3, #16
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80b8 	beq.w	80011b2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d170      	bne.n	800112a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <HAL_RCC_OscConfig+0x218>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e21a      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1a      	ldr	r2, [r3, #32]
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800106c:	429a      	cmp	r2, r3
 800106e:	d921      	bls.n	80010b4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fc4b 	bl	8001910 <RCC_SetFlashLatencyFromMSIRange>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e208      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4906      	ldr	r1, [pc, #24]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8001092:	4313      	orrs	r3, r2
 8001094:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	061b      	lsls	r3, r3, #24
 80010a4:	4901      	ldr	r1, [pc, #4]	; (80010ac <HAL_RCC_OscConfig+0x264>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	604b      	str	r3, [r1, #4]
 80010aa:	e020      	b.n	80010ee <HAL_RCC_OscConfig+0x2a6>
 80010ac:	40023800 	.word	0x40023800
 80010b0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010b4:	4ba4      	ldr	r3, [pc, #656]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	49a1      	ldr	r1, [pc, #644]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010c6:	4ba0      	ldr	r3, [pc, #640]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	061b      	lsls	r3, r3, #24
 80010d4:	499c      	ldr	r1, [pc, #624]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fc16 	bl	8001910 <RCC_SetFlashLatencyFromMSIRange>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e1d3      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	0b5b      	lsrs	r3, r3, #13
 80010f4:	3301      	adds	r3, #1
 80010f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010fe:	4a92      	ldr	r2, [pc, #584]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 8001100:	6892      	ldr	r2, [r2, #8]
 8001102:	0912      	lsrs	r2, r2, #4
 8001104:	f002 020f 	and.w	r2, r2, #15
 8001108:	4990      	ldr	r1, [pc, #576]	; (800134c <HAL_RCC_OscConfig+0x504>)
 800110a:	5c8a      	ldrb	r2, [r1, r2]
 800110c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800110e:	4a90      	ldr	r2, [pc, #576]	; (8001350 <HAL_RCC_OscConfig+0x508>)
 8001110:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001112:	4b90      	ldr	r3, [pc, #576]	; (8001354 <HAL_RCC_OscConfig+0x50c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fbb4 	bl	8000884 <HAL_InitTick>
 800111c:	4603      	mov	r3, r0
 800111e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d045      	beq.n	80011b2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	e1b5      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d029      	beq.n	8001186 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001132:	4b89      	ldr	r3, [pc, #548]	; (8001358 <HAL_RCC_OscConfig+0x510>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001138:	f7ff fbf0 	bl	800091c <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001140:	f7ff fbec 	bl	800091c <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e1a1      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001152:	4b7d      	ldr	r3, [pc, #500]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800115e:	4b7a      	ldr	r3, [pc, #488]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	4977      	ldr	r1, [pc, #476]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 800116c:	4313      	orrs	r3, r2
 800116e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001170:	4b75      	ldr	r3, [pc, #468]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	061b      	lsls	r3, r3, #24
 800117e:	4972      	ldr	r1, [pc, #456]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 8001180:	4313      	orrs	r3, r2
 8001182:	604b      	str	r3, [r1, #4]
 8001184:	e015      	b.n	80011b2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001186:	4b74      	ldr	r3, [pc, #464]	; (8001358 <HAL_RCC_OscConfig+0x510>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fbc6 	bl	800091c <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001194:	f7ff fbc2 	bl	800091c <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e177      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011a6:	4b68      	ldr	r3, [pc, #416]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d030      	beq.n	8001220 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d016      	beq.n	80011f4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011c6:	4b65      	ldr	r3, [pc, #404]	; (800135c <HAL_RCC_OscConfig+0x514>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011cc:	f7ff fba6 	bl	800091c <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d4:	f7ff fba2 	bl	800091c <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e157      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011e6:	4b58      	ldr	r3, [pc, #352]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80011e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0x38c>
 80011f2:	e015      	b.n	8001220 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011f4:	4b59      	ldr	r3, [pc, #356]	; (800135c <HAL_RCC_OscConfig+0x514>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fb8f 	bl	800091c <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001202:	f7ff fb8b 	bl	800091c <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e140      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001214:	4b4c      	ldr	r3, [pc, #304]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 8001216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f0      	bne.n	8001202 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80b5 	beq.w	8001398 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001232:	4b45      	ldr	r3, [pc, #276]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10d      	bne.n	800125a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b42      	ldr	r3, [pc, #264]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	4a41      	ldr	r2, [pc, #260]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6253      	str	r3, [r2, #36]	; 0x24
 800124a:	4b3f      	ldr	r3, [pc, #252]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001256:	2301      	movs	r3, #1
 8001258:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125a:	4b41      	ldr	r3, [pc, #260]	; (8001360 <HAL_RCC_OscConfig+0x518>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001262:	2b00      	cmp	r3, #0
 8001264:	d118      	bne.n	8001298 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001266:	4b3e      	ldr	r3, [pc, #248]	; (8001360 <HAL_RCC_OscConfig+0x518>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a3d      	ldr	r2, [pc, #244]	; (8001360 <HAL_RCC_OscConfig+0x518>)
 800126c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001272:	f7ff fb53 	bl	800091c <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800127a:	f7ff fb4f 	bl	800091c <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b64      	cmp	r3, #100	; 0x64
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e104      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128c:	4b34      	ldr	r3, [pc, #208]	; (8001360 <HAL_RCC_OscConfig+0x518>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d106      	bne.n	80012ae <HAL_RCC_OscConfig+0x466>
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80012a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a4:	4a28      	ldr	r2, [pc, #160]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80012a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012aa:	6353      	str	r3, [r2, #52]	; 0x34
 80012ac:	e02d      	b.n	800130a <HAL_RCC_OscConfig+0x4c2>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x488>
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80012b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ba:	4a23      	ldr	r2, [pc, #140]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80012bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012c0:	6353      	str	r3, [r2, #52]	; 0x34
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80012c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c6:	4a20      	ldr	r2, [pc, #128]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80012c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012cc:	6353      	str	r3, [r2, #52]	; 0x34
 80012ce:	e01c      	b.n	800130a <HAL_RCC_OscConfig+0x4c2>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	d10c      	bne.n	80012f2 <HAL_RCC_OscConfig+0x4aa>
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80012da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012dc:	4a1a      	ldr	r2, [pc, #104]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80012de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e2:	6353      	str	r3, [r2, #52]	; 0x34
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80012e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e8:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80012ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ee:	6353      	str	r3, [r2, #52]	; 0x34
 80012f0:	e00b      	b.n	800130a <HAL_RCC_OscConfig+0x4c2>
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80012f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f6:	4a14      	ldr	r2, [pc, #80]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 80012f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012fc:	6353      	str	r3, [r2, #52]	; 0x34
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 8001300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001302:	4a11      	ldr	r2, [pc, #68]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 8001304:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001308:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d015      	beq.n	800133e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7ff fb03 	bl	800091c <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001318:	e00a      	b.n	8001330 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800131a:	f7ff faff 	bl	800091c <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	f241 3288 	movw	r2, #5000	; 0x1388
 8001328:	4293      	cmp	r3, r2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e0b2      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 8001332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0ee      	beq.n	800131a <HAL_RCC_OscConfig+0x4d2>
 800133c:	e023      	b.n	8001386 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff faed 	bl	800091c <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001344:	e019      	b.n	800137a <HAL_RCC_OscConfig+0x532>
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	08001cb0 	.word	0x08001cb0
 8001350:	20000000 	.word	0x20000000
 8001354:	20000004 	.word	0x20000004
 8001358:	42470020 	.word	0x42470020
 800135c:	42470680 	.word	0x42470680
 8001360:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001364:	f7ff fada 	bl	800091c <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e08d      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800137a:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <HAL_RCC_OscConfig+0x658>)
 800137c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1ee      	bne.n	8001364 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001386:	7ffb      	ldrb	r3, [r7, #31]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800138c:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <HAL_RCC_OscConfig+0x658>)
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	4a43      	ldr	r2, [pc, #268]	; (80014a0 <HAL_RCC_OscConfig+0x658>)
 8001392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001396:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	2b00      	cmp	r3, #0
 800139e:	d079      	beq.n	8001494 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	2b0c      	cmp	r3, #12
 80013a4:	d056      	beq.n	8001454 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d13b      	bne.n	8001426 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ae:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <HAL_RCC_OscConfig+0x65c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fab2 	bl	800091c <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013bc:	f7ff faae 	bl	800091c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e063      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013ce:	4b34      	ldr	r3, [pc, #208]	; (80014a0 <HAL_RCC_OscConfig+0x658>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013da:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <HAL_RCC_OscConfig+0x658>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ea:	4319      	orrs	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	430b      	orrs	r3, r1
 80013f2:	492b      	ldr	r1, [pc, #172]	; (80014a0 <HAL_RCC_OscConfig+0x658>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f8:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <HAL_RCC_OscConfig+0x65c>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fe:	f7ff fa8d 	bl	800091c <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff fa89 	bl	800091c <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e03e      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <HAL_RCC_OscConfig+0x658>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x5be>
 8001424:	e036      	b.n	8001494 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <HAL_RCC_OscConfig+0x65c>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fa76 	bl	800091c <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001434:	f7ff fa72 	bl	800091c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e027      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <HAL_RCC_OscConfig+0x658>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x5ec>
 8001452:	e01f      	b.n	8001494 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e01a      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_RCC_OscConfig+0x658>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	429a      	cmp	r2, r3
 8001472:	d10d      	bne.n	8001490 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d106      	bne.n	8001490 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	42470060 	.word	0x42470060

080014a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e11a      	b.n	80016f2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014bc:	4b8f      	ldr	r3, [pc, #572]	; (80016fc <HAL_RCC_ClockConfig+0x254>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d919      	bls.n	80014fe <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d105      	bne.n	80014dc <HAL_RCC_ClockConfig+0x34>
 80014d0:	4b8a      	ldr	r3, [pc, #552]	; (80016fc <HAL_RCC_ClockConfig+0x254>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a89      	ldr	r2, [pc, #548]	; (80016fc <HAL_RCC_ClockConfig+0x254>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b87      	ldr	r3, [pc, #540]	; (80016fc <HAL_RCC_ClockConfig+0x254>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 0201 	bic.w	r2, r3, #1
 80014e4:	4985      	ldr	r1, [pc, #532]	; (80016fc <HAL_RCC_ClockConfig+0x254>)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ec:	4b83      	ldr	r3, [pc, #524]	; (80016fc <HAL_RCC_ClockConfig+0x254>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e0f9      	b.n	80016f2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d008      	beq.n	800151c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150a:	4b7d      	ldr	r3, [pc, #500]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	497a      	ldr	r1, [pc, #488]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 8001518:	4313      	orrs	r3, r2
 800151a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 808e 	beq.w	8001646 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001532:	4b73      	ldr	r3, [pc, #460]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d121      	bne.n	8001582 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0d7      	b.n	80016f2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800154a:	4b6d      	ldr	r3, [pc, #436]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d115      	bne.n	8001582 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0cb      	b.n	80016f2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d107      	bne.n	8001572 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001562:	4b67      	ldr	r3, [pc, #412]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e0bf      	b.n	80016f2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001572:	4b63      	ldr	r3, [pc, #396]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e0b7      	b.n	80016f2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001582:	4b5f      	ldr	r3, [pc, #380]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f023 0203 	bic.w	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	495c      	ldr	r1, [pc, #368]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001594:	f7ff f9c2 	bl	800091c <HAL_GetTick>
 8001598:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d112      	bne.n	80015c8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a4:	f7ff f9ba 	bl	800091c <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e09b      	b.n	80016f2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015ba:	4b51      	ldr	r3, [pc, #324]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d1ee      	bne.n	80015a4 <HAL_RCC_ClockConfig+0xfc>
 80015c6:	e03e      	b.n	8001646 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d112      	bne.n	80015f6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d2:	f7ff f9a3 	bl	800091c <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e084      	b.n	80016f2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e8:	4b45      	ldr	r3, [pc, #276]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b0c      	cmp	r3, #12
 80015f2:	d1ee      	bne.n	80015d2 <HAL_RCC_ClockConfig+0x12a>
 80015f4:	e027      	b.n	8001646 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d11d      	bne.n	800163a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001600:	f7ff f98c 	bl	800091c <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	; 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e06d      	b.n	80016f2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001616:	4b3a      	ldr	r3, [pc, #232]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b04      	cmp	r3, #4
 8001620:	d1ee      	bne.n	8001600 <HAL_RCC_ClockConfig+0x158>
 8001622:	e010      	b.n	8001646 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001624:	f7ff f97a 	bl	800091c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e05b      	b.n	80016f2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800163a:	4b31      	ldr	r3, [pc, #196]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ee      	bne.n	8001624 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001646:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_RCC_ClockConfig+0x254>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d219      	bcs.n	8001688 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d105      	bne.n	8001666 <HAL_RCC_ClockConfig+0x1be>
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <HAL_RCC_ClockConfig+0x254>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a27      	ldr	r2, [pc, #156]	; (80016fc <HAL_RCC_ClockConfig+0x254>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <HAL_RCC_ClockConfig+0x254>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 0201 	bic.w	r2, r3, #1
 800166e:	4923      	ldr	r1, [pc, #140]	; (80016fc <HAL_RCC_ClockConfig+0x254>)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_RCC_ClockConfig+0x254>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d001      	beq.n	8001688 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e034      	b.n	80016f2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d008      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	4917      	ldr	r1, [pc, #92]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d009      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	490f      	ldr	r1, [pc, #60]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016c6:	f000 f823 	bl	8001710 <HAL_RCC_GetSysClockFreq>
 80016ca:	4602      	mov	r2, r0
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_RCC_ClockConfig+0x258>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	490b      	ldr	r1, [pc, #44]	; (8001704 <HAL_RCC_ClockConfig+0x25c>)
 80016d8:	5ccb      	ldrb	r3, [r1, r3]
 80016da:	fa22 f303 	lsr.w	r3, r2, r3
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_RCC_ClockConfig+0x260>)
 80016e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_RCC_ClockConfig+0x264>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff f8cc 	bl	8000884 <HAL_InitTick>
 80016ec:	4603      	mov	r3, r0
 80016ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80016f0:	7afb      	ldrb	r3, [r7, #11]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023c00 	.word	0x40023c00
 8001700:	40023800 	.word	0x40023800
 8001704:	08001cb0 	.word	0x08001cb0
 8001708:	20000000 	.word	0x20000000
 800170c:	20000004 	.word	0x20000004

08001710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001716:	4b61      	ldr	r3, [pc, #388]	; (800189c <HAL_RCC_GetSysClockFreq+0x18c>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b0c      	cmp	r3, #12
 8001724:	d00d      	beq.n	8001742 <HAL_RCC_GetSysClockFreq+0x32>
 8001726:	2b0c      	cmp	r3, #12
 8001728:	f200 80a4 	bhi.w	8001874 <HAL_RCC_GetSysClockFreq+0x164>
 800172c:	2b04      	cmp	r3, #4
 800172e:	d002      	beq.n	8001736 <HAL_RCC_GetSysClockFreq+0x26>
 8001730:	2b08      	cmp	r3, #8
 8001732:	d003      	beq.n	800173c <HAL_RCC_GetSysClockFreq+0x2c>
 8001734:	e09e      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001736:	4b5a      	ldr	r3, [pc, #360]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x190>)
 8001738:	613b      	str	r3, [r7, #16]
      break;
 800173a:	e0a9      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800173c:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x194>)
 800173e:	613b      	str	r3, [r7, #16]
      break;
 8001740:	e0a6      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	0c9b      	lsrs	r3, r3, #18
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	4a57      	ldr	r2, [pc, #348]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x198>)
 800174c:	5cd3      	ldrb	r3, [r2, r3]
 800174e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	0d9b      	lsrs	r3, r3, #22
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	3301      	adds	r3, #1
 800175a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800175c:	4b4f      	ldr	r3, [pc, #316]	; (800189c <HAL_RCC_GetSysClockFreq+0x18c>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d041      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	461c      	mov	r4, r3
 800176c:	f04f 0500 	mov.w	r5, #0
 8001770:	4620      	mov	r0, r4
 8001772:	4629      	mov	r1, r5
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	014b      	lsls	r3, r1, #5
 800177e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001782:	0142      	lsls	r2, r0, #5
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	1b00      	subs	r0, r0, r4
 800178a:	eb61 0105 	sbc.w	r1, r1, r5
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	018b      	lsls	r3, r1, #6
 8001798:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800179c:	0182      	lsls	r2, r0, #6
 800179e:	1a12      	subs	r2, r2, r0
 80017a0:	eb63 0301 	sbc.w	r3, r3, r1
 80017a4:	f04f 0000 	mov.w	r0, #0
 80017a8:	f04f 0100 	mov.w	r1, #0
 80017ac:	00d9      	lsls	r1, r3, #3
 80017ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017b2:	00d0      	lsls	r0, r2, #3
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	1912      	adds	r2, r2, r4
 80017ba:	eb45 0303 	adc.w	r3, r5, r3
 80017be:	f04f 0000 	mov.w	r0, #0
 80017c2:	f04f 0100 	mov.w	r1, #0
 80017c6:	0259      	lsls	r1, r3, #9
 80017c8:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80017cc:	0250      	lsls	r0, r2, #9
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	461a      	mov	r2, r3
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	f7fe fccd 	bl	800017c <__aeabi_uldivmod>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4613      	mov	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e040      	b.n	800186e <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	461c      	mov	r4, r3
 80017f0:	f04f 0500 	mov.w	r5, #0
 80017f4:	4620      	mov	r0, r4
 80017f6:	4629      	mov	r1, r5
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	014b      	lsls	r3, r1, #5
 8001802:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001806:	0142      	lsls	r2, r0, #5
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	1b00      	subs	r0, r0, r4
 800180e:	eb61 0105 	sbc.w	r1, r1, r5
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	018b      	lsls	r3, r1, #6
 800181c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001820:	0182      	lsls	r2, r0, #6
 8001822:	1a12      	subs	r2, r2, r0
 8001824:	eb63 0301 	sbc.w	r3, r3, r1
 8001828:	f04f 0000 	mov.w	r0, #0
 800182c:	f04f 0100 	mov.w	r1, #0
 8001830:	00d9      	lsls	r1, r3, #3
 8001832:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001836:	00d0      	lsls	r0, r2, #3
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	1912      	adds	r2, r2, r4
 800183e:	eb45 0303 	adc.w	r3, r5, r3
 8001842:	f04f 0000 	mov.w	r0, #0
 8001846:	f04f 0100 	mov.w	r1, #0
 800184a:	0299      	lsls	r1, r3, #10
 800184c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001850:	0290      	lsls	r0, r2, #10
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	461a      	mov	r2, r3
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	f7fe fc8b 	bl	800017c <__aeabi_uldivmod>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4613      	mov	r3, r2
 800186c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	613b      	str	r3, [r7, #16]
      break;
 8001872:	e00d      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_RCC_GetSysClockFreq+0x18c>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	0b5b      	lsrs	r3, r3, #13
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	613b      	str	r3, [r7, #16]
      break;
 800188e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001890:	693b      	ldr	r3, [r7, #16]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bdb0      	pop	{r4, r5, r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	00f42400 	.word	0x00f42400
 80018a4:	007a1200 	.word	0x007a1200
 80018a8:	08001ca4 	.word	0x08001ca4

080018ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b0:	4b02      	ldr	r3, [pc, #8]	; (80018bc <HAL_RCC_GetHCLKFreq+0x10>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	20000000 	.word	0x20000000

080018c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018c4:	f7ff fff2 	bl	80018ac <HAL_RCC_GetHCLKFreq>
 80018c8:	4602      	mov	r2, r0
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	0a1b      	lsrs	r3, r3, #8
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	4903      	ldr	r1, [pc, #12]	; (80018e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018d6:	5ccb      	ldrb	r3, [r1, r3]
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018dc:	4618      	mov	r0, r3
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800
 80018e4:	08001cc0 	.word	0x08001cc0

080018e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018ec:	f7ff ffde 	bl	80018ac <HAL_RCC_GetHCLKFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	0adb      	lsrs	r3, r3, #11
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	4903      	ldr	r1, [pc, #12]	; (800190c <HAL_RCC_GetPCLK2Freq+0x24>)
 80018fe:	5ccb      	ldrb	r3, [r1, r3]
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	08001cc0 	.word	0x08001cc0

08001910 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800191c:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d12c      	bne.n	8001982 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001928:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e016      	b.n	800196e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001940:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194a:	6253      	str	r3, [r2, #36]	; 0x24
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001960:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001974:	d105      	bne.n	8001982 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800197c:	d101      	bne.n	8001982 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800197e:	2301      	movs	r3, #1
 8001980:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d105      	bne.n	8001994 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 0201 	bic.w	r2, r3, #1
 800199c:	490b      	ldr	r1, [pc, #44]	; (80019cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d001      	beq.n	80019b6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	371c      	adds	r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40007000 	.word	0x40007000
 80019cc:	40023c00 	.word	0x40023c00

080019d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e03f      	b.n	8001a62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d106      	bne.n	80019fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7fe fe8e 	bl	8000718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2224      	movs	r2, #36	; 0x24
 8001a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f829 	bl	8001a6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695a      	ldr	r2, [r3, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2220      	movs	r2, #32
 8001a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001aac:	f023 030c 	bic.w	r3, r3, #12
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699a      	ldr	r2, [r3, #24]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a55      	ldr	r2, [pc, #340]	; (8001c2c <UART_SetConfig+0x1c0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d103      	bne.n	8001ae2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ada:	f7ff ff05 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	e002      	b.n	8001ae8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ae2:	f7ff feed 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 8001ae6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001af0:	d14c      	bne.n	8001b8c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	009a      	lsls	r2, r3, #2
 8001afc:	441a      	add	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b08:	4a49      	ldr	r2, [pc, #292]	; (8001c30 <UART_SetConfig+0x1c4>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	0119      	lsls	r1, r3, #4
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	009a      	lsls	r2, r3, #2
 8001b1c:	441a      	add	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b28:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <UART_SetConfig+0x1c4>)
 8001b2a:	fba3 0302 	umull	r0, r3, r3, r2
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	2064      	movs	r0, #100	; 0x64
 8001b32:	fb00 f303 	mul.w	r3, r0, r3
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	3332      	adds	r3, #50	; 0x32
 8001b3c:	4a3c      	ldr	r2, [pc, #240]	; (8001c30 <UART_SetConfig+0x1c4>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001b4a:	4419      	add	r1, r3
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	009a      	lsls	r2, r3, #2
 8001b56:	441a      	add	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b62:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <UART_SetConfig+0x1c4>)
 8001b64:	fba3 0302 	umull	r0, r3, r3, r2
 8001b68:	095b      	lsrs	r3, r3, #5
 8001b6a:	2064      	movs	r0, #100	; 0x64
 8001b6c:	fb00 f303 	mul.w	r3, r0, r3
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	3332      	adds	r3, #50	; 0x32
 8001b76:	4a2e      	ldr	r2, [pc, #184]	; (8001c30 <UART_SetConfig+0x1c4>)
 8001b78:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7c:	095b      	lsrs	r3, r3, #5
 8001b7e:	f003 0207 	and.w	r2, r3, #7
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	440a      	add	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001b8a:	e04a      	b.n	8001c22 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	009a      	lsls	r2, r3, #2
 8001b96:	441a      	add	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4a23      	ldr	r2, [pc, #140]	; (8001c30 <UART_SetConfig+0x1c4>)
 8001ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba8:	095b      	lsrs	r3, r3, #5
 8001baa:	0119      	lsls	r1, r3, #4
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009a      	lsls	r2, r3, #2
 8001bb6:	441a      	add	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <UART_SetConfig+0x1c4>)
 8001bc4:	fba3 0302 	umull	r0, r3, r3, r2
 8001bc8:	095b      	lsrs	r3, r3, #5
 8001bca:	2064      	movs	r0, #100	; 0x64
 8001bcc:	fb00 f303 	mul.w	r3, r0, r3
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	3332      	adds	r3, #50	; 0x32
 8001bd6:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <UART_SetConfig+0x1c4>)
 8001bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be2:	4419      	add	r1, r3
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	009a      	lsls	r2, r3, #2
 8001bee:	441a      	add	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <UART_SetConfig+0x1c4>)
 8001bfc:	fba3 0302 	umull	r0, r3, r3, r2
 8001c00:	095b      	lsrs	r3, r3, #5
 8001c02:	2064      	movs	r0, #100	; 0x64
 8001c04:	fb00 f303 	mul.w	r3, r0, r3
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	3332      	adds	r3, #50	; 0x32
 8001c0e:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <UART_SetConfig+0x1c4>)
 8001c10:	fba2 2303 	umull	r2, r3, r2, r3
 8001c14:	095b      	lsrs	r3, r3, #5
 8001c16:	f003 020f 	and.w	r2, r3, #15
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	440a      	add	r2, r1
 8001c20:	609a      	str	r2, [r3, #8]
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40013800 	.word	0x40013800
 8001c30:	51eb851f 	.word	0x51eb851f

08001c34 <__libc_init_array>:
 8001c34:	b570      	push	{r4, r5, r6, lr}
 8001c36:	2600      	movs	r6, #0
 8001c38:	4d0c      	ldr	r5, [pc, #48]	; (8001c6c <__libc_init_array+0x38>)
 8001c3a:	4c0d      	ldr	r4, [pc, #52]	; (8001c70 <__libc_init_array+0x3c>)
 8001c3c:	1b64      	subs	r4, r4, r5
 8001c3e:	10a4      	asrs	r4, r4, #2
 8001c40:	42a6      	cmp	r6, r4
 8001c42:	d109      	bne.n	8001c58 <__libc_init_array+0x24>
 8001c44:	f000 f822 	bl	8001c8c <_init>
 8001c48:	2600      	movs	r6, #0
 8001c4a:	4d0a      	ldr	r5, [pc, #40]	; (8001c74 <__libc_init_array+0x40>)
 8001c4c:	4c0a      	ldr	r4, [pc, #40]	; (8001c78 <__libc_init_array+0x44>)
 8001c4e:	1b64      	subs	r4, r4, r5
 8001c50:	10a4      	asrs	r4, r4, #2
 8001c52:	42a6      	cmp	r6, r4
 8001c54:	d105      	bne.n	8001c62 <__libc_init_array+0x2e>
 8001c56:	bd70      	pop	{r4, r5, r6, pc}
 8001c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c5c:	4798      	blx	r3
 8001c5e:	3601      	adds	r6, #1
 8001c60:	e7ee      	b.n	8001c40 <__libc_init_array+0xc>
 8001c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c66:	4798      	blx	r3
 8001c68:	3601      	adds	r6, #1
 8001c6a:	e7f2      	b.n	8001c52 <__libc_init_array+0x1e>
 8001c6c:	08001cd0 	.word	0x08001cd0
 8001c70:	08001cd0 	.word	0x08001cd0
 8001c74:	08001cd0 	.word	0x08001cd0
 8001c78:	08001cd4 	.word	0x08001cd4

08001c7c <memset>:
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4402      	add	r2, r0
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d100      	bne.n	8001c86 <memset+0xa>
 8001c84:	4770      	bx	lr
 8001c86:	f803 1b01 	strb.w	r1, [r3], #1
 8001c8a:	e7f9      	b.n	8001c80 <memset+0x4>

08001c8c <_init>:
 8001c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c8e:	bf00      	nop
 8001c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c92:	bc08      	pop	{r3}
 8001c94:	469e      	mov	lr, r3
 8001c96:	4770      	bx	lr

08001c98 <_fini>:
 8001c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9a:	bf00      	nop
 8001c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9e:	bc08      	pop	{r3}
 8001ca0:	469e      	mov	lr, r3
 8001ca2:	4770      	bx	lr
