
BlinkLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004238  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08004374  08004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e8  080044e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080044e8  080044e8  000144e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044f0  080044f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f0  080044f0  000144f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044f4  080044f4  000144f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080044f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000074  0800456c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  0800456c  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6b7  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204e  00000000  00000000  0002b754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0002d7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  0002e130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b57  00000000  00000000  0002e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af11  00000000  00000000  00046517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f8d  00000000  00000000  00051428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e33b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d8c  00000000  00000000  000e3408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000074 	.word	0x20000074
 8000158:	00000000 	.word	0x00000000
 800015c:	0800435c 	.word	0x0800435c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000078 	.word	0x20000078
 8000178:	0800435c 	.word	0x0800435c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800019c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a0:	f000 b96e 	b.w	8000480 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	f040 8083 	bne.w	80002d4 <__udivmoddi4+0x118>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4617      	mov	r7, r2
 80001d2:	d947      	bls.n	8000264 <__udivmoddi4+0xa8>
 80001d4:	fab2 f382 	clz	r3, r2
 80001d8:	b14b      	cbz	r3, 80001ee <__udivmoddi4+0x32>
 80001da:	f1c3 0120 	rsb	r1, r3, #32
 80001de:	fa05 fe03 	lsl.w	lr, r5, r3
 80001e2:	fa20 f101 	lsr.w	r1, r0, r1
 80001e6:	409f      	lsls	r7, r3
 80001e8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001ec:	409c      	lsls	r4, r3
 80001ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001f2:	fbbe fcf8 	udiv	ip, lr, r8
 80001f6:	fa1f f987 	uxth.w	r9, r7
 80001fa:	fb08 e21c 	mls	r2, r8, ip, lr
 80001fe:	fb0c f009 	mul.w	r0, ip, r9
 8000202:	0c21      	lsrs	r1, r4, #16
 8000204:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000208:	4290      	cmp	r0, r2
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	18ba      	adds	r2, r7, r2
 800020e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000212:	f080 8118 	bcs.w	8000446 <__udivmoddi4+0x28a>
 8000216:	4290      	cmp	r0, r2
 8000218:	f240 8115 	bls.w	8000446 <__udivmoddi4+0x28a>
 800021c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000220:	443a      	add	r2, r7
 8000222:	1a12      	subs	r2, r2, r0
 8000224:	fbb2 f0f8 	udiv	r0, r2, r8
 8000228:	fb08 2210 	mls	r2, r8, r0, r2
 800022c:	fb00 f109 	mul.w	r1, r0, r9
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000236:	42a1      	cmp	r1, r4
 8000238:	d909      	bls.n	800024e <__udivmoddi4+0x92>
 800023a:	193c      	adds	r4, r7, r4
 800023c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000240:	f080 8103 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000244:	42a1      	cmp	r1, r4
 8000246:	f240 8100 	bls.w	800044a <__udivmoddi4+0x28e>
 800024a:	3802      	subs	r0, #2
 800024c:	443c      	add	r4, r7
 800024e:	1a64      	subs	r4, r4, r1
 8000250:	2100      	movs	r1, #0
 8000252:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa4>
 8000258:	2200      	movs	r2, #0
 800025a:	40dc      	lsrs	r4, r3
 800025c:	e9c6 4200 	strd	r4, r2, [r6]
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	b902      	cbnz	r2, 8000268 <__udivmoddi4+0xac>
 8000266:	deff      	udf	#255	; 0xff
 8000268:	fab2 f382 	clz	r3, r2
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14f      	bne.n	8000310 <__udivmoddi4+0x154>
 8000270:	1a8d      	subs	r5, r1, r2
 8000272:	2101      	movs	r1, #1
 8000274:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000278:	fa1f f882 	uxth.w	r8, r2
 800027c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000280:	fb0e 551c 	mls	r5, lr, ip, r5
 8000284:	fb08 f00c 	mul.w	r0, r8, ip
 8000288:	0c22      	lsrs	r2, r4, #16
 800028a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800028e:	42a8      	cmp	r0, r5
 8000290:	d907      	bls.n	80002a2 <__udivmoddi4+0xe6>
 8000292:	197d      	adds	r5, r7, r5
 8000294:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000298:	d202      	bcs.n	80002a0 <__udivmoddi4+0xe4>
 800029a:	42a8      	cmp	r0, r5
 800029c:	f200 80e9 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 80002a0:	4694      	mov	ip, r2
 80002a2:	1a2d      	subs	r5, r5, r0
 80002a4:	fbb5 f0fe 	udiv	r0, r5, lr
 80002a8:	fb0e 5510 	mls	r5, lr, r0, r5
 80002ac:	fb08 f800 	mul.w	r8, r8, r0
 80002b0:	b2a4      	uxth	r4, r4
 80002b2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b6:	45a0      	cmp	r8, r4
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x10e>
 80002ba:	193c      	adds	r4, r7, r4
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x10c>
 80002c2:	45a0      	cmp	r8, r4
 80002c4:	f200 80d9 	bhi.w	800047a <__udivmoddi4+0x2be>
 80002c8:	4610      	mov	r0, r2
 80002ca:	eba4 0408 	sub.w	r4, r4, r8
 80002ce:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d2:	e7c0      	b.n	8000256 <__udivmoddi4+0x9a>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x12e>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	f000 80b1 	beq.w	8000440 <__udivmoddi4+0x284>
 80002de:	2100      	movs	r1, #0
 80002e0:	e9c6 0500 	strd	r0, r5, [r6]
 80002e4:	4608      	mov	r0, r1
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d14b      	bne.n	800038a <__udivmoddi4+0x1ce>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0x140>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80b9 	bhi.w	800046e <__udivmoddi4+0x2b2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0303 	sbc.w	r3, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	469e      	mov	lr, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0aa      	beq.n	8000260 <__udivmoddi4+0xa4>
 800030a:	e9c6 4e00 	strd	r4, lr, [r6]
 800030e:	e7a7      	b.n	8000260 <__udivmoddi4+0xa4>
 8000310:	409f      	lsls	r7, r3
 8000312:	f1c3 0220 	rsb	r2, r3, #32
 8000316:	40d1      	lsrs	r1, r2
 8000318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	fa24 f202 	lsr.w	r2, r4, r2
 800032c:	409d      	lsls	r5, r3
 800032e:	fb00 fc08 	mul.w	ip, r0, r8
 8000332:	432a      	orrs	r2, r5
 8000334:	0c15      	lsrs	r5, r2, #16
 8000336:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800033a:	45ac      	cmp	ip, r5
 800033c:	fa04 f403 	lsl.w	r4, r4, r3
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0x19a>
 8000342:	197d      	adds	r5, r7, r5
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000348:	f080 808f 	bcs.w	800046a <__udivmoddi4+0x2ae>
 800034c:	45ac      	cmp	ip, r5
 800034e:	f240 808c 	bls.w	800046a <__udivmoddi4+0x2ae>
 8000352:	3802      	subs	r0, #2
 8000354:	443d      	add	r5, r7
 8000356:	eba5 050c 	sub.w	r5, r5, ip
 800035a:	fbb5 f1fe 	udiv	r1, r5, lr
 800035e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000362:	fb01 f908 	mul.w	r9, r1, r8
 8000366:	b295      	uxth	r5, r2
 8000368:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036c:	45a9      	cmp	r9, r5
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x1c4>
 8000370:	197d      	adds	r5, r7, r5
 8000372:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8000376:	d274      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000378:	45a9      	cmp	r9, r5
 800037a:	d972      	bls.n	8000462 <__udivmoddi4+0x2a6>
 800037c:	3902      	subs	r1, #2
 800037e:	443d      	add	r5, r7
 8000380:	eba5 0509 	sub.w	r5, r5, r9
 8000384:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000388:	e778      	b.n	800027c <__udivmoddi4+0xc0>
 800038a:	f1c1 0720 	rsb	r7, r1, #32
 800038e:	408b      	lsls	r3, r1
 8000390:	fa22 fc07 	lsr.w	ip, r2, r7
 8000394:	ea4c 0c03 	orr.w	ip, ip, r3
 8000398:	fa25 f407 	lsr.w	r4, r5, r7
 800039c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a0:	fbb4 f9fe 	udiv	r9, r4, lr
 80003a4:	fa1f f88c 	uxth.w	r8, ip
 80003a8:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ac:	fa20 f307 	lsr.w	r3, r0, r7
 80003b0:	fb09 fa08 	mul.w	sl, r9, r8
 80003b4:	408d      	lsls	r5, r1
 80003b6:	431d      	orrs	r5, r3
 80003b8:	0c2b      	lsrs	r3, r5, #16
 80003ba:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003be:	45a2      	cmp	sl, r4
 80003c0:	fa02 f201 	lsl.w	r2, r2, r1
 80003c4:	fa00 f301 	lsl.w	r3, r0, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x222>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d2:	d248      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d946      	bls.n	8000466 <__udivmoddi4+0x2aa>
 80003d8:	f1a9 0902 	sub.w	r9, r9, #2
 80003dc:	4464      	add	r4, ip
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003e6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003ea:	fb00 fa08 	mul.w	sl, r0, r8
 80003ee:	b2ad      	uxth	r5, r5
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x24e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000400:	d22d      	bcs.n	800045e <__udivmoddi4+0x2a2>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d92b      	bls.n	800045e <__udivmoddi4+0x2a2>
 8000406:	3802      	subs	r0, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c6      	mov	lr, r8
 800041a:	464d      	mov	r5, r9
 800041c:	d319      	bcc.n	8000452 <__udivmoddi4+0x296>
 800041e:	d016      	beq.n	800044e <__udivmoddi4+0x292>
 8000420:	b15e      	cbz	r6, 800043a <__udivmoddi4+0x27e>
 8000422:	ebb3 020e 	subs.w	r2, r3, lr
 8000426:	eb64 0405 	sbc.w	r4, r4, r5
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	fa22 f301 	lsr.w	r3, r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	40cc      	lsrs	r4, r1
 8000436:	e9c6 7400 	strd	r7, r4, [r6]
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	4631      	mov	r1, r6
 8000442:	4630      	mov	r0, r6
 8000444:	e70c      	b.n	8000260 <__udivmoddi4+0xa4>
 8000446:	468c      	mov	ip, r1
 8000448:	e6eb      	b.n	8000222 <__udivmoddi4+0x66>
 800044a:	4610      	mov	r0, r2
 800044c:	e6ff      	b.n	800024e <__udivmoddi4+0x92>
 800044e:	4543      	cmp	r3, r8
 8000450:	d2e6      	bcs.n	8000420 <__udivmoddi4+0x264>
 8000452:	ebb8 0e02 	subs.w	lr, r8, r2
 8000456:	eb69 050c 	sbc.w	r5, r9, ip
 800045a:	3801      	subs	r0, #1
 800045c:	e7e0      	b.n	8000420 <__udivmoddi4+0x264>
 800045e:	4628      	mov	r0, r5
 8000460:	e7d3      	b.n	800040a <__udivmoddi4+0x24e>
 8000462:	4611      	mov	r1, r2
 8000464:	e78c      	b.n	8000380 <__udivmoddi4+0x1c4>
 8000466:	4681      	mov	r9, r0
 8000468:	e7b9      	b.n	80003de <__udivmoddi4+0x222>
 800046a:	4608      	mov	r0, r1
 800046c:	e773      	b.n	8000356 <__udivmoddi4+0x19a>
 800046e:	4608      	mov	r0, r1
 8000470:	e749      	b.n	8000306 <__udivmoddi4+0x14a>
 8000472:	f1ac 0c02 	sub.w	ip, ip, #2
 8000476:	443d      	add	r5, r7
 8000478:	e713      	b.n	80002a2 <__udivmoddi4+0xe6>
 800047a:	3802      	subs	r0, #2
 800047c:	443c      	add	r4, r7
 800047e:	e724      	b.n	80002ca <__udivmoddi4+0x10e>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
void debugPrint(UART_HandleTypeDef *huart, char _out[]);
void debugPrintln(UART_HandleTypeDef *huart, char _out[]);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_0){
 800048e:	88fb      	ldrh	r3, [r7, #6]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d102      	bne.n	800049a <HAL_GPIO_EXTI_Callback+0x16>
	  printf("- Interrupcion por pulsador activada");
 8000494:	4803      	ldr	r0, [pc, #12]	; (80004a4 <HAL_GPIO_EXTI_Callback+0x20>)
 8000496:	f003 f801 	bl	800349c <iprintf>
	  // Interrupcion para cuando se presione el pulsador
  }
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	08004374 	.word	0x08004374

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fc63 	bl	8000d76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f834 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f9ac 	bl	8000810 <MX_GPIO_Init>
  MX_DMA_Init();
 80004b8:	f000 f98c 	bl	80007d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004bc:	f000 f960 	bl	8000780 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80004c0:	f000 f890 	bl	80005e4 <MX_ADC_Init>
  MX_RTC_Init();
 80004c4:	f000 f902 	bl	80006cc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_buff, 8); // Init UART Interrupt
 80004c8:	2208      	movs	r2, #8
 80004ca:	490d      	ldr	r1, [pc, #52]	; (8000500 <main+0x58>)
 80004cc:	480d      	ldr	r0, [pc, #52]	; (8000504 <main+0x5c>)
 80004ce:	f002 fe30 	bl	8003132 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_ADC_Start_IT(&hadc); // Start convertion
 80004d2:	480d      	ldr	r0, [pc, #52]	; (8000508 <main+0x60>)
 80004d4:	f000 fe26 	bl	8001124 <HAL_ADC_Start_IT>
    printf("- Time is set to (decimal): %d", config_time);
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <main+0x64>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	480c      	ldr	r0, [pc, #48]	; (8000510 <main+0x68>)
 80004e0:	f002 ffdc 	bl	800349c <iprintf>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80004e4:	2101      	movs	r1, #1
 80004e6:	480b      	ldr	r0, [pc, #44]	; (8000514 <main+0x6c>)
 80004e8:	f001 fc22 	bl	8001d30 <HAL_GPIO_TogglePin>
	debugPrintln(&huart2, "Hello");
 80004ec:	490a      	ldr	r1, [pc, #40]	; (8000518 <main+0x70>)
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <main+0x5c>)
 80004f0:	f000 fa20 	bl	8000934 <debugPrintln>
	HAL_Delay(500);
 80004f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f8:	f000 fcac 	bl	8000e54 <HAL_Delay>
	HAL_ADC_Start_IT(&hadc); // Start convertion
 80004fc:	e7e9      	b.n	80004d2 <main+0x2a>
 80004fe:	bf00      	nop
 8000500:	2000009c 	.word	0x2000009c
 8000504:	200000d4 	.word	0x200000d4
 8000508:	20000158 	.word	0x20000158
 800050c:	20000000 	.word	0x20000000
 8000510:	08004404 	.word	0x08004404
 8000514:	40020400 	.word	0x40020400
 8000518:	08004424 	.word	0x08004424

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b096      	sub	sp, #88	; 0x58
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000526:	2234      	movs	r2, #52	; 0x34
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f002 ffae 	bl	800348c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054a:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <SystemClock_Config+0xc4>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000552:	4a23      	ldr	r2, [pc, #140]	; (80005e0 <SystemClock_Config+0xc4>)
 8000554:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000558:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800055a:	2306      	movs	r3, #6
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800055e:	2301      	movs	r3, #1
 8000560:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000562:	2301      	movs	r3, #1
 8000564:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000566:	2310      	movs	r3, #16
 8000568:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056e:	2300      	movs	r3, #0
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000572:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000576:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000578:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800057c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000582:	4618      	mov	r0, r3
 8000584:	f001 fc06 	bl	8001d94 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800058e:	f000 f9ee 	bl	800096e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2303      	movs	r3, #3
 8000598:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	2101      	movs	r1, #1
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 ff21 	bl	80023f4 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005b8:	f000 f9d9 	bl	800096e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005bc:	2301      	movs	r3, #1
 80005be:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80005c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 f9a7 	bl	800291c <HAL_RCCEx_PeriphCLKConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80005d4:	f000 f9cb 	bl	800096e <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3758      	adds	r7, #88	; 0x58
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005f4:	4b33      	ldr	r3, [pc, #204]	; (80006c4 <MX_ADC_Init+0xe0>)
 80005f6:	4a34      	ldr	r2, [pc, #208]	; (80006c8 <MX_ADC_Init+0xe4>)
 80005f8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005fa:	4b32      	ldr	r3, [pc, #200]	; (80006c4 <MX_ADC_Init+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000600:	4b30      	ldr	r3, [pc, #192]	; (80006c4 <MX_ADC_Init+0xe0>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000606:	4b2f      	ldr	r3, [pc, #188]	; (80006c4 <MX_ADC_Init+0xe0>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060c:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <MX_ADC_Init+0xe0>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000612:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <MX_ADC_Init+0xe0>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000618:	4b2a      	ldr	r3, [pc, #168]	; (80006c4 <MX_ADC_Init+0xe0>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800061e:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <MX_ADC_Init+0xe0>)
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <MX_ADC_Init+0xe0>)
 8000626:	2200      	movs	r2, #0
 8000628:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 800062a:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <MX_ADC_Init+0xe0>)
 800062c:	2201      	movs	r2, #1
 800062e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 3;
 8000632:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <MX_ADC_Init+0xe0>)
 8000634:	2203      	movs	r2, #3
 8000636:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <MX_ADC_Init+0xe0>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <MX_ADC_Init+0xe0>)
 8000642:	2210      	movs	r2, #16
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <MX_ADC_Init+0xe0>)
 8000648:	2200      	movs	r2, #0
 800064a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 800064c:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <MX_ADC_Init+0xe0>)
 800064e:	2201      	movs	r2, #1
 8000650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000654:	481b      	ldr	r0, [pc, #108]	; (80006c4 <MX_ADC_Init+0xe0>)
 8000656:	f000 fc1f 	bl	8000e98 <HAL_ADC_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000660:	f000 f985 	bl	800096e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000668:	2301      	movs	r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4619      	mov	r1, r3
 8000674:	4813      	ldr	r0, [pc, #76]	; (80006c4 <MX_ADC_Init+0xe0>)
 8000676:	f000 fdbf 	bl	80011f8 <HAL_ADC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000680:	f000 f975 	bl	800096e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000684:	2301      	movs	r3, #1
 8000686:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000688:	2302      	movs	r3, #2
 800068a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4619      	mov	r1, r3
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <MX_ADC_Init+0xe0>)
 8000692:	f000 fdb1 	bl	80011f8 <HAL_ADC_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 800069c:	f000 f967 	bl	800096e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006a0:	2310      	movs	r3, #16
 80006a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006a4:	2303      	movs	r3, #3
 80006a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_ADC_Init+0xe0>)
 80006ae:	f000 fda3 	bl	80011f8 <HAL_ADC_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80006b8:	f000 f959 	bl	800096e <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000158 	.word	0x20000158
 80006c8:	40012400 	.word	0x40012400

080006cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80006e0:	2300      	movs	r3, #0
 80006e2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006e4:	4b24      	ldr	r3, [pc, #144]	; (8000778 <MX_RTC_Init+0xac>)
 80006e6:	4a25      	ldr	r2, [pc, #148]	; (800077c <MX_RTC_Init+0xb0>)
 80006e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <MX_RTC_Init+0xac>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006f0:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_RTC_Init+0xac>)
 80006f2:	227f      	movs	r2, #127	; 0x7f
 80006f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <MX_RTC_Init+0xac>)
 80006f8:	22ff      	movs	r2, #255	; 0xff
 80006fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_RTC_Init+0xac>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_RTC_Init+0xac>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_RTC_Init+0xac>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800070e:	481a      	ldr	r0, [pc, #104]	; (8000778 <MX_RTC_Init+0xac>)
 8000710:	f002 f9e6 	bl	8002ae0 <HAL_RTC_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800071a:	f000 f928 	bl	800096e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800071e:	2300      	movs	r3, #0
 8000720:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000722:	2300      	movs	r3, #0
 8000724:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000726:	2300      	movs	r3, #0
 8000728:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2201      	movs	r2, #1
 8000736:	4619      	mov	r1, r3
 8000738:	480f      	ldr	r0, [pc, #60]	; (8000778 <MX_RTC_Init+0xac>)
 800073a:	f002 fa4c 	bl	8002bd6 <HAL_RTC_SetTime>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000744:	f000 f913 	bl	800096e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000748:	2301      	movs	r3, #1
 800074a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800074c:	2301      	movs	r3, #1
 800074e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000750:	2301      	movs	r3, #1
 8000752:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000754:	2300      	movs	r3, #0
 8000756:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000758:	463b      	mov	r3, r7
 800075a:	2201      	movs	r2, #1
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <MX_RTC_Init+0xac>)
 8000760:	f002 faed 	bl	8002d3e <HAL_RTC_SetDate>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800076a:	f000 f900 	bl	800096e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000b4 	.word	0x200000b4
 800077c:	40002800 	.word	0x40002800

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_USART2_UART_Init+0x50>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007b8:	f002 fbd5 	bl	8002f66 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007c2:	f000 f8d4 	bl	800096e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000d4 	.word	0x200000d4
 80007d0:	40004400 	.word	0x40004400

080007d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_DMA_Init+0x38>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <MX_DMA_Init+0x38>)
 80007e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_DMA_Init+0x38>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	200b      	movs	r0, #11
 80007f8:	f000 ff97 	bl	800172a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007fc:	200b      	movs	r0, #11
 80007fe:	f000 ffb0 	bl	8001762 <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b3e      	ldr	r3, [pc, #248]	; (8000920 <MX_GPIO_Init+0x110>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	4a3d      	ldr	r2, [pc, #244]	; (8000920 <MX_GPIO_Init+0x110>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	61d3      	str	r3, [r2, #28]
 8000832:	4b3b      	ldr	r3, [pc, #236]	; (8000920 <MX_GPIO_Init+0x110>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	4b38      	ldr	r3, [pc, #224]	; (8000920 <MX_GPIO_Init+0x110>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	4a37      	ldr	r2, [pc, #220]	; (8000920 <MX_GPIO_Init+0x110>)
 8000844:	f043 0320 	orr.w	r3, r3, #32
 8000848:	61d3      	str	r3, [r2, #28]
 800084a:	4b35      	ldr	r3, [pc, #212]	; (8000920 <MX_GPIO_Init+0x110>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	f003 0320 	and.w	r3, r3, #32
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b32      	ldr	r3, [pc, #200]	; (8000920 <MX_GPIO_Init+0x110>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a31      	ldr	r2, [pc, #196]	; (8000920 <MX_GPIO_Init+0x110>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	61d3      	str	r3, [r2, #28]
 8000862:	4b2f      	ldr	r3, [pc, #188]	; (8000920 <MX_GPIO_Init+0x110>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <MX_GPIO_Init+0x110>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a2b      	ldr	r2, [pc, #172]	; (8000920 <MX_GPIO_Init+0x110>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b29      	ldr	r3, [pc, #164]	; (8000920 <MX_GPIO_Init+0x110>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2120      	movs	r1, #32
 800088a:	4826      	ldr	r0, [pc, #152]	; (8000924 <MX_GPIO_Init+0x114>)
 800088c:	f001 fa38 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f240 4101 	movw	r1, #1025	; 0x401
 8000896:	4824      	ldr	r0, [pc, #144]	; (8000928 <MX_GPIO_Init+0x118>)
 8000898:	f001 fa32 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <MX_GPIO_Init+0x11c>)
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	481f      	ldr	r0, [pc, #124]	; (8000930 <MX_GPIO_Init+0x120>)
 80008b2:	f001 f895 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b6:	2320      	movs	r3, #32
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4815      	ldr	r0, [pc, #84]	; (8000924 <MX_GPIO_Init+0x114>)
 80008ce:	f001 f887 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 80008d2:	f240 4301 	movw	r3, #1025	; 0x401
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	480f      	ldr	r0, [pc, #60]	; (8000928 <MX_GPIO_Init+0x118>)
 80008ec:	f001 f878 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008f0:	2302      	movs	r3, #2
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_GPIO_Init+0x11c>)
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	4809      	ldr	r0, [pc, #36]	; (8000928 <MX_GPIO_Init+0x118>)
 8000904:	f001 f86c 	bl	80019e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	2007      	movs	r0, #7
 800090e:	f000 ff0c 	bl	800172a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000912:	2007      	movs	r0, #7
 8000914:	f000 ff25 	bl	8001762 <HAL_NVIC_EnableIRQ>

}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	; 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000
 8000928:	40020400 	.word	0x40020400
 800092c:	10110000 	.word	0x10110000
 8000930:	40020800 	.word	0x40020800

08000934 <debugPrintln>:

void debugPrint(UART_HandleTypeDef *huart, char _out[]){
	HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
}

void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 800093e:	6838      	ldr	r0, [r7, #0]
 8000940:	f7ff fc1c 	bl	800017c <strlen>
 8000944:	4603      	mov	r3, r0
 8000946:	b29a      	uxth	r2, r3
 8000948:	230a      	movs	r3, #10
 800094a:	6839      	ldr	r1, [r7, #0]
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f002 fb57 	bl	8003000 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8000952:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000956:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8000958:	f107 010c 	add.w	r1, r7, #12
 800095c:	230a      	movs	r3, #10
 800095e:	2202      	movs	r2, #2
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f002 fb4d 	bl	8003000 <HAL_UART_Transmit>
}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000972:	b672      	cpsid	i
}
 8000974:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000976:	e7fe      	b.n	8000976 <Error_Handler+0x8>

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_MspInit+0x5c>)
 8000980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000982:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <HAL_MspInit+0x5c>)
 8000984:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000988:	6253      	str	r3, [r2, #36]	; 0x24
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_MspInit+0x5c>)
 800098c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <HAL_MspInit+0x5c>)
 8000998:	6a1b      	ldr	r3, [r3, #32]
 800099a:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <HAL_MspInit+0x5c>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6213      	str	r3, [r2, #32]
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <HAL_MspInit+0x5c>)
 80009a4:	6a1b      	ldr	r3, [r3, #32]
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x5c>)
 80009b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_MspInit+0x5c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6253      	str	r3, [r2, #36]	; 0x24
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_MspInit+0x5c>)
 80009bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009c6:	2007      	movs	r0, #7
 80009c8:	f000 fea4 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a29      	ldr	r2, [pc, #164]	; (8000a9c <HAL_ADC_MspInit+0xc4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d14b      	bne.n	8000a92 <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009fa:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <HAL_ADC_MspInit+0xc8>)
 80009fc:	6a1b      	ldr	r3, [r3, #32]
 80009fe:	4a28      	ldr	r2, [pc, #160]	; (8000aa0 <HAL_ADC_MspInit+0xc8>)
 8000a00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a04:	6213      	str	r3, [r2, #32]
 8000a06:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <HAL_ADC_MspInit+0xc8>)
 8000a08:	6a1b      	ldr	r3, [r3, #32]
 8000a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <HAL_ADC_MspInit+0xc8>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4a22      	ldr	r2, [pc, #136]	; (8000aa0 <HAL_ADC_MspInit+0xc8>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	61d3      	str	r3, [r2, #28]
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <HAL_ADC_MspInit+0xc8>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4819      	ldr	r0, [pc, #100]	; (8000aa4 <HAL_ADC_MspInit+0xcc>)
 8000a3e:	f000 ffcf 	bl	80019e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <HAL_ADC_MspInit+0xd0>)
 8000a44:	4a19      	ldr	r2, [pc, #100]	; (8000aac <HAL_ADC_MspInit+0xd4>)
 8000a46:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <HAL_ADC_MspInit+0xd0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <HAL_ADC_MspInit+0xd0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <HAL_ADC_MspInit+0xd0>)
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <HAL_ADC_MspInit+0xd0>)
 8000a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a60:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_ADC_MspInit+0xd0>)
 8000a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a68:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_ADC_MspInit+0xd0>)
 8000a6c:	2220      	movs	r2, #32
 8000a6e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_ADC_MspInit+0xd0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000a76:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <HAL_ADC_MspInit+0xd0>)
 8000a78:	f000 fe8e 	bl	8001798 <HAL_DMA_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8000a82:	f7ff ff74 	bl	800096e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_ADC_MspInit+0xd0>)
 8000a8a:	645a      	str	r2, [r3, #68]	; 0x44
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <HAL_ADC_MspInit+0xd0>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	; 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40012400 	.word	0x40012400
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	20000114 	.word	0x20000114
 8000aac:	40026008 	.word	0x40026008

08000ab0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <HAL_RTC_MspInit+0x24>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d102      	bne.n	8000ac8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_RTC_MspInit+0x28>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40002800 	.word	0x40002800
 8000ad8:	424706d8 	.word	0x424706d8

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <HAL_UART_MspInit+0x7c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d127      	bne.n	8000b4e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_UART_MspInit+0x80>)
 8000b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b02:	4a16      	ldr	r2, [pc, #88]	; (8000b5c <HAL_UART_MspInit+0x80>)
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b08:	6253      	str	r3, [r2, #36]	; 0x24
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <HAL_UART_MspInit+0x80>)
 8000b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_UART_MspInit+0x80>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <HAL_UART_MspInit+0x80>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_UART_MspInit+0x80>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b2e:	230c      	movs	r3, #12
 8000b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b3e:	2307      	movs	r3, #7
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <HAL_UART_MspInit+0x84>)
 8000b4a:	f000 ff49 	bl	80019e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	; 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40004400 	.word	0x40004400
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020000 	.word	0x40020000

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000baa:	f000 f937 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	f001 f8d4 	bl	8001d64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <DMA1_Channel1_IRQHandler+0x10>)
 8000bc6:	f000 fe5b 	bl	8001880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000114 	.word	0x20000114

08000bd4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	e00a      	b.n	8000bfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000be6:	f3af 8000 	nop.w
 8000bea:	4601      	mov	r1, r0
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	60ba      	str	r2, [r7, #8]
 8000bf2:	b2ca      	uxtb	r2, r1
 8000bf4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697a      	ldr	r2, [r7, #20]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dbf0      	blt.n	8000be6 <_read+0x12>
	}

return len;
 8000c04:	687b      	ldr	r3, [r7, #4]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	60f8      	str	r0, [r7, #12]
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	e009      	b.n	8000c34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	60ba      	str	r2, [r7, #8]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dbf1      	blt.n	8000c20 <_write+0x12>
	}
	return len;
 8000c3c:	687b      	ldr	r3, [r7, #4]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_close>:

int _close(int file)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c6c:	605a      	str	r2, [r3, #4]
	return 0;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr

08000c7a <_isatty>:

int _isatty(int file)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
	return 1;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr

08000c8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b085      	sub	sp, #20
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
	return 0;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
	...

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f002 fbae 	bl	8003438 <__errno>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <_sbrk+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20014000 	.word	0x20014000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	20000090 	.word	0x20000090
 8000d10:	200001c0 	.word	0x200001c0

08000d14 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <SystemInit+0x14>)
 8000d1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d2c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d2e:	e003      	b.n	8000d38 <LoopCopyDataInit>

08000d30 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d32:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d34:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d36:	3104      	adds	r1, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d38:	480a      	ldr	r0, [pc, #40]	; (8000d64 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d3c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d3e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d40:	d3f6      	bcc.n	8000d30 <CopyDataInit>
  ldr r2, =_sbss
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d44:	e002      	b.n	8000d4c <LoopFillZerobss>

08000d46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d48:	f842 3b04 	str.w	r3, [r2], #4

08000d4c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d4e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d50:	d3f9      	bcc.n	8000d46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d52:	f7ff ffdf 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f002 fb75 	bl	8003444 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d5a:	f7ff fba5 	bl	80004a8 <main>
  bx lr
 8000d5e:	4770      	bx	lr
  ldr r3, =_sidata
 8000d60:	080044f8 	.word	0x080044f8
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d68:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000d6c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000d70:	200001c0 	.word	0x200001c0

08000d74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC1_IRQHandler>

08000d76 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 fcc7 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 f80e 	bl	8000da8 <HAL_InitTick>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d002      	beq.n	8000d98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	e001      	b.n	8000d9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d98:	f7ff fdee 	bl	8000978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <HAL_InitTick+0x68>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d022      	beq.n	8000e02 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_InitTick+0x6c>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <HAL_InitTick+0x68>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 fcd4 	bl	800177e <HAL_SYSTICK_Config>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10f      	bne.n	8000dfc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b0f      	cmp	r3, #15
 8000de0:	d809      	bhi.n	8000df6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de2:	2200      	movs	r2, #0
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dea:	f000 fc9e 	bl	800172a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_InitTick+0x70>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	e007      	b.n	8000e06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	73fb      	strb	r3, [r7, #15]
 8000dfa:	e004      	b.n	8000e06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	e001      	b.n	8000e06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	2000000c 	.word	0x2000000c
 8000e14:	20000004 	.word	0x20000004
 8000e18:	20000008 	.word	0x20000008

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_IncTick+0x1c>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_IncTick+0x20>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a03      	ldr	r2, [pc, #12]	; (8000e38 <HAL_IncTick+0x1c>)
 8000e2c:	6013      	str	r3, [r2, #0]
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	200001ac 	.word	0x200001ac
 8000e3c:	2000000c 	.word	0x2000000c

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <HAL_GetTick+0x10>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	200001ac 	.word	0x200001ac

08000e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff fff0 	bl	8000e40 <HAL_GetTick>
 8000e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e6c:	d004      	beq.n	8000e78 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_Delay+0x40>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	4413      	add	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e78:	bf00      	nop
 8000e7a:	f7ff ffe1 	bl	8000e40 <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d8f7      	bhi.n	8000e7a <HAL_Delay+0x26>
  {
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000000c 	.word	0x2000000c

08000e98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08e      	sub	sp, #56	; 0x38
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e127      	b.n	8001108 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d115      	bne.n	8000ef2 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed4:	4b8e      	ldr	r3, [pc, #568]	; (8001110 <HAL_ADC_Init+0x278>)
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4a8d      	ldr	r2, [pc, #564]	; (8001110 <HAL_ADC_Init+0x278>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6213      	str	r3, [r2, #32]
 8000ee0:	4b8b      	ldr	r3, [pc, #556]	; (8001110 <HAL_ADC_Init+0x278>)
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff fd73 	bl	80009d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f040 80ff 	bne.w	80010fe <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f08:	f023 0302 	bic.w	r3, r3, #2
 8000f0c:	f043 0202 	orr.w	r2, r3, #2
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000f14:	4b7f      	ldr	r3, [pc, #508]	; (8001114 <HAL_ADC_Init+0x27c>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	497c      	ldr	r1, [pc, #496]	; (8001114 <HAL_ADC_Init+0x27c>)
 8000f22:	4313      	orrs	r3, r2
 8000f24:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000f2e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f36:	4619      	mov	r1, r3
 8000f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f3c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
 8000f40:	fa93 f3a3 	rbit	r3, r3
 8000f44:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fab3 f383 	clz	r3, r3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000f52:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f58:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f60:	4619      	mov	r1, r3
 8000f62:	2302      	movs	r3, #2
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f68:	fa93 f3a3 	rbit	r3, r3
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	fab3 f383 	clz	r3, r3
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000f7a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f86:	2b10      	cmp	r3, #16
 8000f88:	d007      	beq.n	8000f9a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000f92:	4313      	orrs	r3, r2
 8000f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f96:	4313      	orrs	r3, r2
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa4:	2b40      	cmp	r3, #64	; 0x40
 8000fa6:	d04f      	beq.n	8001048 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000fba:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	6912      	ldr	r2, [r2, #16]
 8000fc0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000fc4:	d003      	beq.n	8000fce <HAL_ADC_Init+0x136>
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	6912      	ldr	r2, [r2, #16]
 8000fca:	2a01      	cmp	r2, #1
 8000fcc:	d102      	bne.n	8000fd4 <HAL_ADC_Init+0x13c>
 8000fce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd2:	e000      	b.n	8000fd6 <HAL_ADC_Init+0x13e>
 8000fd4:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000fd6:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d125      	bne.n	8001034 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d114      	bne.n	800101c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000ffc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	fa92 f2a2 	rbit	r2, r2
 8001004:	617a      	str	r2, [r7, #20]
  return result;
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	fab2 f282 	clz	r2, r2
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	4093      	lsls	r3, r2
 8001010:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001016:	4313      	orrs	r3, r2
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
 800101a:	e00b      	b.n	8001034 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	f043 0220 	orr.w	r2, r3, #32
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800102c:	f043 0201 	orr.w	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	4b37      	ldr	r3, [pc, #220]	; (8001118 <HAL_ADC_Init+0x280>)
 800103c:	4013      	ands	r3, r2
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6812      	ldr	r2, [r2, #0]
 8001042:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001044:	430b      	orrs	r3, r1
 8001046:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	4b33      	ldr	r3, [pc, #204]	; (800111c <HAL_ADC_Init+0x284>)
 8001050:	4013      	ands	r3, r2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	6812      	ldr	r2, [r2, #0]
 8001056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001058:	430b      	orrs	r3, r1
 800105a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001064:	d003      	beq.n	800106e <HAL_ADC_Init+0x1d6>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d119      	bne.n	80010a2 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107c:	3b01      	subs	r3, #1
 800107e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001082:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	fa92 f2a2 	rbit	r2, r2
 800108a:	60fa      	str	r2, [r7, #12]
  return result;
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	fab2 f282 	clz	r2, r2
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	fa03 f202 	lsl.w	r2, r3, r2
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	430a      	orrs	r2, r1
 800109e:	631a      	str	r2, [r3, #48]	; 0x30
 80010a0:	e007      	b.n	80010b2 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80010b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_ADC_Init+0x288>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010be:	429a      	cmp	r2, r3
 80010c0:	d10b      	bne.n	80010da <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	f023 0303 	bic.w	r3, r3, #3
 80010d0:	f043 0201 	orr.w	r2, r3, #1
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80010d8:	e014      	b.n	8001104 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f023 0312 	bic.w	r3, r3, #18
 80010e2:	f043 0210 	orr.w	r2, r3, #16
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ee:	f043 0201 	orr.w	r2, r3, #1
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80010fc:	e002      	b.n	8001104 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001104:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001108:	4618      	mov	r0, r3
 800110a:	3738      	adds	r7, #56	; 0x38
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800
 8001114:	40012700 	.word	0x40012700
 8001118:	fcfc16ff 	.word	0xfcfc16ff
 800111c:	c0fff189 	.word	0xc0fff189
 8001120:	bf80fffe 	.word	0xbf80fffe

08001124 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001136:	2b01      	cmp	r3, #1
 8001138:	d101      	bne.n	800113e <HAL_ADC_Start_IT+0x1a>
 800113a:	2302      	movs	r3, #2
 800113c:	e058      	b.n	80011f0 <HAL_ADC_Start_IT+0xcc>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f9c2 	bl	80014d0 <ADC_Enable>
 800114c:	4603      	mov	r3, r0
 800114e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d14b      	bne.n	80011ee <HAL_ADC_Start_IT+0xca>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001174:	2b00      	cmp	r3, #0
 8001176:	d007      	beq.n	8001188 <HAL_ADC_Start_IT+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001180:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001194:	d106      	bne.n	80011a4 <HAL_ADC_Start_IT+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800119a:	f023 0206 	bic.w	r2, r3, #6
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	651a      	str	r2, [r3, #80]	; 0x50
 80011a2:	e002      	b.n	80011aa <HAL_ADC_Start_IT+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011ba:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011ca:	f043 0320 	orr.w	r3, r3, #32
 80011ce:	6053      	str	r3, [r2, #4]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d107      	bne.n	80011ee <HAL_ADC_Start_IT+0xca>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011ec:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x20>
 8001214:	2302      	movs	r3, #2
 8001216:	e14f      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x2c0>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b06      	cmp	r3, #6
 8001226:	d81c      	bhi.n	8001262 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	3b05      	subs	r3, #5
 800123a:	221f      	movs	r2, #31
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	4019      	ands	r1, r3
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	3b05      	subs	r3, #5
 8001254:	fa00 f203 	lsl.w	r2, r0, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	641a      	str	r2, [r3, #64]	; 0x40
 8001260:	e07e      	b.n	8001360 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b0c      	cmp	r3, #12
 8001268:	d81c      	bhi.n	80012a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	3b23      	subs	r3, #35	; 0x23
 800127c:	221f      	movs	r2, #31
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	4019      	ands	r1, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	3b23      	subs	r3, #35	; 0x23
 8001296:	fa00 f203 	lsl.w	r2, r0, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80012a2:	e05d      	b.n	8001360 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b12      	cmp	r3, #18
 80012aa:	d81c      	bhi.n	80012e6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	3b41      	subs	r3, #65	; 0x41
 80012be:	221f      	movs	r2, #31
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	4019      	ands	r1, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	3b41      	subs	r3, #65	; 0x41
 80012d8:	fa00 f203 	lsl.w	r2, r0, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	639a      	str	r2, [r3, #56]	; 0x38
 80012e4:	e03c      	b.n	8001360 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b18      	cmp	r3, #24
 80012ec:	d81c      	bhi.n	8001328 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	3b5f      	subs	r3, #95	; 0x5f
 8001300:	221f      	movs	r2, #31
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	4019      	ands	r1, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	3b5f      	subs	r3, #95	; 0x5f
 800131a:	fa00 f203 	lsl.w	r2, r0, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	635a      	str	r2, [r3, #52]	; 0x34
 8001326:	e01b      	b.n	8001360 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	3b7d      	subs	r3, #125	; 0x7d
 800133a:	221f      	movs	r2, #31
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	4019      	ands	r1, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	3b7d      	subs	r3, #125	; 0x7d
 8001354:	fa00 f203 	lsl.w	r2, r0, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b09      	cmp	r3, #9
 8001366:	d81a      	bhi.n	800139e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6959      	ldr	r1, [r3, #20]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	2207      	movs	r2, #7
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	4019      	ands	r1, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	6898      	ldr	r0, [r3, #8]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	fa00 f203 	lsl.w	r2, r0, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	615a      	str	r2, [r3, #20]
 800139c:	e05d      	b.n	800145a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b13      	cmp	r3, #19
 80013a4:	d81c      	bhi.n	80013e0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6919      	ldr	r1, [r3, #16]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	3b1e      	subs	r3, #30
 80013b8:	2207      	movs	r2, #7
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	4019      	ands	r1, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	6898      	ldr	r0, [r3, #8]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	3b1e      	subs	r3, #30
 80013d2:	fa00 f203 	lsl.w	r2, r0, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	e03c      	b.n	800145a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b1d      	cmp	r3, #29
 80013e6:	d81c      	bhi.n	8001422 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68d9      	ldr	r1, [r3, #12]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	3b3c      	subs	r3, #60	; 0x3c
 80013fa:	2207      	movs	r2, #7
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	4019      	ands	r1, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	6898      	ldr	r0, [r3, #8]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	3b3c      	subs	r3, #60	; 0x3c
 8001414:	fa00 f203 	lsl.w	r2, r0, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	e01b      	b.n	800145a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4613      	mov	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	3b5a      	subs	r3, #90	; 0x5a
 8001434:	2207      	movs	r2, #7
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	4019      	ands	r1, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	6898      	ldr	r0, [r3, #8]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	3b5a      	subs	r3, #90	; 0x5a
 800144e:	fa00 f203 	lsl.w	r2, r0, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b10      	cmp	r3, #16
 8001460:	d003      	beq.n	800146a <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001466:	2b11      	cmp	r3, #17
 8001468:	d121      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <HAL_ADC_ConfigChannel+0x2cc>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d11b      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HAL_ADC_ConfigChannel+0x2cc>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <HAL_ADC_ConfigChannel+0x2cc>)
 800147c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001480:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b10      	cmp	r3, #16
 8001488:	d111      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_ADC_ConfigChannel+0x2d0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a0f      	ldr	r2, [pc, #60]	; (80014cc <HAL_ADC_ConfigChannel+0x2d4>)
 8001490:	fba2 2303 	umull	r2, r3, r2, r3
 8001494:	0c9a      	lsrs	r2, r3, #18
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80014a0:	e002      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f9      	bne.n	80014a2 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40012700 	.word	0x40012700
 80014c8:	20000004 	.word	0x20000004
 80014cc:	431bde83 	.word	0x431bde83

080014d0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ea:	2b40      	cmp	r3, #64	; 0x40
 80014ec:	d03c      	beq.n	8001568 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0201 	orr.w	r2, r2, #1
 80014fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <ADC_Enable+0xa4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a1d      	ldr	r2, [pc, #116]	; (8001578 <ADC_Enable+0xa8>)
 8001504:	fba2 2303 	umull	r2, r3, r2, r3
 8001508:	0c9a      	lsrs	r2, r3, #18
 800150a:	4613      	mov	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001512:	e002      	b.n	800151a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	3b01      	subs	r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1f9      	bne.n	8001514 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001520:	f7ff fc8e 	bl	8000e40 <HAL_GetTick>
 8001524:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001526:	e018      	b.n	800155a <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001528:	f7ff fc8a 	bl	8000e40 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d911      	bls.n	800155a <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f043 0210 	orr.w	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001546:	f043 0201 	orr.w	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e007      	b.n	800156a <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001564:	2b40      	cmp	r3, #64	; 0x40
 8001566:	d1df      	bne.n	8001528 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000004 	.word	0x20000004
 8001578:	431bde83 	.word	0x431bde83

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db0b      	blt.n	800160a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4906      	ldr	r1, [pc, #24]	; (8001614 <__NVIC_EnableIRQ+0x34>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2001      	movs	r0, #1
 8001602:	fa00 f202 	lsl.w	r2, r0, r2
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e0:	d301      	bcc.n	80016e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00f      	b.n	8001706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <SysTick_Config+0x40>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ee:	210f      	movs	r1, #15
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016f4:	f7ff ff90 	bl	8001618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <SysTick_Config+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SysTick_Config+0x40>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff2d 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff42 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff90 	bl	800166c <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5f 	bl	8001618 <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff35 	bl	80015e0 <__NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffa2 	bl	80016d0 <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e059      	b.n	800185e <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <HAL_DMA_Init+0xd0>)
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d80f      	bhi.n	80017d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_DMA_Init+0xd4>)
 80017be:	4413      	add	r3, r2
 80017c0:	4a2b      	ldr	r2, [pc, #172]	; (8001870 <HAL_DMA_Init+0xd8>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	009a      	lsls	r2, r3, #2
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a28      	ldr	r2, [pc, #160]	; (8001874 <HAL_DMA_Init+0xdc>)
 80017d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80017d4:	e00e      	b.n	80017f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	4b26      	ldr	r3, [pc, #152]	; (8001878 <HAL_DMA_Init+0xe0>)
 80017de:	4413      	add	r3, r2
 80017e0:	4a23      	ldr	r2, [pc, #140]	; (8001870 <HAL_DMA_Init+0xd8>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	009a      	lsls	r2, r3, #2
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a22      	ldr	r2, [pc, #136]	; (800187c <HAL_DMA_Init+0xe4>)
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2202      	movs	r2, #2
 80017f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800180a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800180e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001818:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001824:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001830:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	40026407 	.word	0x40026407
 800186c:	bffd9ff8 	.word	0xbffd9ff8
 8001870:	cccccccd 	.word	0xcccccccd
 8001874:	40026000 	.word	0x40026000
 8001878:	bffd9bf8 	.word	0xbffd9bf8
 800187c:	40026400 	.word	0x40026400

08001880 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	f003 031c 	and.w	r3, r3, #28
 80018a0:	2204      	movs	r2, #4
 80018a2:	409a      	lsls	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d026      	beq.n	80018fa <HAL_DMA_IRQHandler+0x7a>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d021      	beq.n	80018fa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0320 	and.w	r3, r3, #32
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0204 	bic.w	r2, r2, #4
 80018d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f003 021c 	and.w	r2, r3, #28
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e0:	2104      	movs	r1, #4
 80018e2:	fa01 f202 	lsl.w	r2, r1, r2
 80018e6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d071      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018f8:	e06c      	b.n	80019d4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 031c 	and.w	r3, r3, #28
 8001902:	2202      	movs	r2, #2
 8001904:	409a      	lsls	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4013      	ands	r3, r2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d02e      	beq.n	800196c <HAL_DMA_IRQHandler+0xec>
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d029      	beq.n	800196c <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0320 	and.w	r3, r3, #32
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10b      	bne.n	800193e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 020a 	bic.w	r2, r2, #10
 8001934:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f003 021c 	and.w	r2, r3, #28
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194a:	2102      	movs	r1, #2
 800194c:	fa01 f202 	lsl.w	r2, r1, r2
 8001950:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	2b00      	cmp	r3, #0
 8001960:	d038      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800196a:	e033      	b.n	80019d4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f003 031c 	and.w	r3, r3, #28
 8001974:	2208      	movs	r2, #8
 8001976:	409a      	lsls	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d02a      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x156>
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d025      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 020e 	bic.w	r2, r2, #14
 8001998:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 021c 	and.w	r2, r3, #28
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a6:	2101      	movs	r1, #1
 80019a8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
}
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80019f6:	e160      	b.n	8001cba <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2101      	movs	r1, #1
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8152 	beq.w	8001cb4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d00b      	beq.n	8001a30 <HAL_GPIO_Init+0x50>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d007      	beq.n	8001a30 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a24:	2b11      	cmp	r3, #17
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b12      	cmp	r3, #18
 8001a2e:	d130      	bne.n	8001a92 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001a66:	2201      	movs	r2, #1
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	f003 0201 	and.w	r2, r3, #1
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0xf2>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b12      	cmp	r3, #18
 8001ad0:	d123      	bne.n	8001b1a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ade:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3208      	adds	r2, #8
 8001b14:	6939      	ldr	r1, [r7, #16]
 8001b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0203 	and.w	r2, r3, #3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80ac 	beq.w	8001cb4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5c:	4b5e      	ldr	r3, [pc, #376]	; (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a5d      	ldr	r2, [pc, #372]	; (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	4b5b      	ldr	r3, [pc, #364]	; (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b74:	4a59      	ldr	r2, [pc, #356]	; (8001cdc <HAL_GPIO_Init+0x2fc>)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a51      	ldr	r2, [pc, #324]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d025      	beq.n	8001bec <HAL_GPIO_Init+0x20c>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a50      	ldr	r2, [pc, #320]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d01f      	beq.n	8001be8 <HAL_GPIO_Init+0x208>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a4f      	ldr	r2, [pc, #316]	; (8001ce8 <HAL_GPIO_Init+0x308>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d019      	beq.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a4e      	ldr	r2, [pc, #312]	; (8001cec <HAL_GPIO_Init+0x30c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d013      	beq.n	8001be0 <HAL_GPIO_Init+0x200>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <HAL_GPIO_Init+0x310>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d00d      	beq.n	8001bdc <HAL_GPIO_Init+0x1fc>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a4c      	ldr	r2, [pc, #304]	; (8001cf4 <HAL_GPIO_Init+0x314>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d007      	beq.n	8001bd8 <HAL_GPIO_Init+0x1f8>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a4b      	ldr	r2, [pc, #300]	; (8001cf8 <HAL_GPIO_Init+0x318>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d101      	bne.n	8001bd4 <HAL_GPIO_Init+0x1f4>
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	e00c      	b.n	8001bee <HAL_GPIO_Init+0x20e>
 8001bd4:	2307      	movs	r3, #7
 8001bd6:	e00a      	b.n	8001bee <HAL_GPIO_Init+0x20e>
 8001bd8:	2305      	movs	r3, #5
 8001bda:	e008      	b.n	8001bee <HAL_GPIO_Init+0x20e>
 8001bdc:	2304      	movs	r3, #4
 8001bde:	e006      	b.n	8001bee <HAL_GPIO_Init+0x20e>
 8001be0:	2303      	movs	r3, #3
 8001be2:	e004      	b.n	8001bee <HAL_GPIO_Init+0x20e>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e002      	b.n	8001bee <HAL_GPIO_Init+0x20e>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_GPIO_Init+0x20e>
 8001bec:	2300      	movs	r3, #0
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	f002 0203 	and.w	r2, r2, #3
 8001bf4:	0092      	lsls	r2, r2, #2
 8001bf6:	4093      	lsls	r3, r2
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bfe:	4937      	ldr	r1, [pc, #220]	; (8001cdc <HAL_GPIO_Init+0x2fc>)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3302      	adds	r3, #2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <HAL_GPIO_Init+0x31c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c30:	4a32      	ldr	r2, [pc, #200]	; (8001cfc <HAL_GPIO_Init+0x31c>)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c36:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <HAL_GPIO_Init+0x31c>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c5a:	4a28      	ldr	r2, [pc, #160]	; (8001cfc <HAL_GPIO_Init+0x31c>)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c60:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <HAL_GPIO_Init+0x31c>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c84:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <HAL_GPIO_Init+0x31c>)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <HAL_GPIO_Init+0x31c>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cae:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <HAL_GPIO_Init+0x31c>)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f47f ae97 	bne.w	80019f8 <HAL_GPIO_Init+0x18>
  }
}
 8001cca:	bf00      	nop
 8001ccc:	bf00      	nop
 8001cce:	371c      	adds	r7, #28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40021400 	.word	0x40021400
 8001cf8:	40021800 	.word	0x40021800
 8001cfc:	40010400 	.word	0x40010400

08001d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d10:	787b      	ldrb	r3, [r7, #1]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001d1c:	e003      	b.n	8001d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	041a      	lsls	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	619a      	str	r2, [r3, #24]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d42:	887a      	ldrh	r2, [r7, #2]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4013      	ands	r3, r2
 8001d48:	041a      	lsls	r2, r3, #16
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43d9      	mvns	r1, r3
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	400b      	ands	r3, r1
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	619a      	str	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
	...

08001d64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d006      	beq.n	8001d88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fb7e 	bl	8000484 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40010400 	.word	0x40010400

08001d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e31d      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da6:	4b94      	ldr	r3, [pc, #592]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db0:	4b91      	ldr	r3, [pc, #580]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d07b      	beq.n	8001ebe <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d006      	beq.n	8001dda <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2b0c      	cmp	r3, #12
 8001dd0:	d10f      	bne.n	8001df2 <HAL_RCC_OscConfig+0x5e>
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd8:	d10b      	bne.n	8001df2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dda:	4b87      	ldr	r3, [pc, #540]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d06a      	beq.n	8001ebc <HAL_RCC_OscConfig+0x128>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d166      	bne.n	8001ebc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e2f7      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d106      	bne.n	8001e08 <HAL_RCC_OscConfig+0x74>
 8001dfa:	4b7f      	ldr	r3, [pc, #508]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a7e      	ldr	r2, [pc, #504]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e02d      	b.n	8001e64 <HAL_RCC_OscConfig+0xd0>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10c      	bne.n	8001e2a <HAL_RCC_OscConfig+0x96>
 8001e10:	4b79      	ldr	r3, [pc, #484]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a78      	ldr	r2, [pc, #480]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b76      	ldr	r3, [pc, #472]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a75      	ldr	r2, [pc, #468]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	e01c      	b.n	8001e64 <HAL_RCC_OscConfig+0xd0>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b05      	cmp	r3, #5
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0xb8>
 8001e32:	4b71      	ldr	r3, [pc, #452]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a70      	ldr	r2, [pc, #448]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a6d      	ldr	r2, [pc, #436]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e00b      	b.n	8001e64 <HAL_RCC_OscConfig+0xd0>
 8001e4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a69      	ldr	r2, [pc, #420]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a66      	ldr	r2, [pc, #408]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d013      	beq.n	8001e94 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7fe ffe8 	bl	8000e40 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e74:	f7fe ffe4 	bl	8000e40 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e2ad      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e86:	4b5c      	ldr	r3, [pc, #368]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0xe0>
 8001e92:	e014      	b.n	8001ebe <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7fe ffd4 	bl	8000e40 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7fe ffd0 	bl	8000e40 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	; 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e299      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001eae:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x108>
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d05a      	beq.n	8001f80 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2b0c      	cmp	r3, #12
 8001ed4:	d119      	bne.n	8001f0a <HAL_RCC_OscConfig+0x176>
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d116      	bne.n	8001f0a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001edc:	4b46      	ldr	r3, [pc, #280]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x160>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e276      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b40      	ldr	r3, [pc, #256]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	493d      	ldr	r1, [pc, #244]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f08:	e03a      	b.n	8001f80 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d020      	beq.n	8001f54 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f12:	4b3a      	ldr	r3, [pc, #232]	; (8001ffc <HAL_RCC_OscConfig+0x268>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7fe ff92 	bl	8000e40 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f20:	f7fe ff8e 	bl	8000e40 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e257      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f32:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	492a      	ldr	r1, [pc, #168]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
 8001f52:	e015      	b.n	8001f80 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f54:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <HAL_RCC_OscConfig+0x268>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7fe ff71 	bl	8000e40 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f62:	f7fe ff6d 	bl	8000e40 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e236      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f74:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f0      	bne.n	8001f62 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80b8 	beq.w	80020fe <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d170      	bne.n	8002076 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_OscConfig+0x218>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e21a      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1a      	ldr	r2, [r3, #32]
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d921      	bls.n	8002000 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fc4b 	bl	800285c <RCC_SetFlashLatencyFromMSIRange>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e208      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4906      	ldr	r1, [pc, #24]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	061b      	lsls	r3, r3, #24
 8001ff0:	4901      	ldr	r1, [pc, #4]	; (8001ff8 <HAL_RCC_OscConfig+0x264>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
 8001ff6:	e020      	b.n	800203a <HAL_RCC_OscConfig+0x2a6>
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002000:	4ba4      	ldr	r3, [pc, #656]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	49a1      	ldr	r1, [pc, #644]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002012:	4ba0      	ldr	r3, [pc, #640]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	061b      	lsls	r3, r3, #24
 8002020:	499c      	ldr	r1, [pc, #624]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fc16 	bl	800285c <RCC_SetFlashLatencyFromMSIRange>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e1d3      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	0b5b      	lsrs	r3, r3, #13
 8002040:	3301      	adds	r3, #1
 8002042:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800204a:	4a92      	ldr	r2, [pc, #584]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 800204c:	6892      	ldr	r2, [r2, #8]
 800204e:	0912      	lsrs	r2, r2, #4
 8002050:	f002 020f 	and.w	r2, r2, #15
 8002054:	4990      	ldr	r1, [pc, #576]	; (8002298 <HAL_RCC_OscConfig+0x504>)
 8002056:	5c8a      	ldrb	r2, [r1, r2]
 8002058:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800205a:	4a90      	ldr	r2, [pc, #576]	; (800229c <HAL_RCC_OscConfig+0x508>)
 800205c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800205e:	4b90      	ldr	r3, [pc, #576]	; (80022a0 <HAL_RCC_OscConfig+0x50c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fea0 	bl	8000da8 <HAL_InitTick>
 8002068:	4603      	mov	r3, r0
 800206a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d045      	beq.n	80020fe <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	e1b5      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d029      	beq.n	80020d2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800207e:	4b89      	ldr	r3, [pc, #548]	; (80022a4 <HAL_RCC_OscConfig+0x510>)
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7fe fedc 	bl	8000e40 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800208c:	f7fe fed8 	bl	8000e40 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1a1      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800209e:	4b7d      	ldr	r3, [pc, #500]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020aa:	4b7a      	ldr	r3, [pc, #488]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4977      	ldr	r1, [pc, #476]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020bc:	4b75      	ldr	r3, [pc, #468]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	4972      	ldr	r1, [pc, #456]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
 80020d0:	e015      	b.n	80020fe <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020d2:	4b74      	ldr	r3, [pc, #464]	; (80022a4 <HAL_RCC_OscConfig+0x510>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe feb2 	bl	8000e40 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020e0:	f7fe feae 	bl	8000e40 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e177      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020f2:	4b68      	ldr	r3, [pc, #416]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d030      	beq.n	800216c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d016      	beq.n	8002140 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002112:	4b65      	ldr	r3, [pc, #404]	; (80022a8 <HAL_RCC_OscConfig+0x514>)
 8002114:	2201      	movs	r2, #1
 8002116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002118:	f7fe fe92 	bl	8000e40 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002120:	f7fe fe8e 	bl	8000e40 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e157      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002132:	4b58      	ldr	r3, [pc, #352]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x38c>
 800213e:	e015      	b.n	800216c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002140:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <HAL_RCC_OscConfig+0x514>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002146:	f7fe fe7b 	bl	8000e40 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800214e:	f7fe fe77 	bl	8000e40 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e140      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002160:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80b5 	beq.w	80022e4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217e:	4b45      	ldr	r3, [pc, #276]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10d      	bne.n	80021a6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	4b42      	ldr	r3, [pc, #264]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	4a41      	ldr	r2, [pc, #260]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002194:	6253      	str	r3, [r2, #36]	; 0x24
 8002196:	4b3f      	ldr	r3, [pc, #252]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a2:	2301      	movs	r3, #1
 80021a4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a6:	4b41      	ldr	r3, [pc, #260]	; (80022ac <HAL_RCC_OscConfig+0x518>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d118      	bne.n	80021e4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b2:	4b3e      	ldr	r3, [pc, #248]	; (80022ac <HAL_RCC_OscConfig+0x518>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a3d      	ldr	r2, [pc, #244]	; (80022ac <HAL_RCC_OscConfig+0x518>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021be:	f7fe fe3f 	bl	8000e40 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c6:	f7fe fe3b 	bl	8000e40 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b64      	cmp	r3, #100	; 0x64
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e104      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	4b34      	ldr	r3, [pc, #208]	; (80022ac <HAL_RCC_OscConfig+0x518>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x466>
 80021ec:	4b29      	ldr	r3, [pc, #164]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 80021ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f0:	4a28      	ldr	r2, [pc, #160]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 80021f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f6:	6353      	str	r3, [r2, #52]	; 0x34
 80021f8:	e02d      	b.n	8002256 <HAL_RCC_OscConfig+0x4c2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x488>
 8002202:	4b24      	ldr	r3, [pc, #144]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002206:	4a23      	ldr	r2, [pc, #140]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800220c:	6353      	str	r3, [r2, #52]	; 0x34
 800220e:	4b21      	ldr	r3, [pc, #132]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	4a20      	ldr	r2, [pc, #128]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002218:	6353      	str	r3, [r2, #52]	; 0x34
 800221a:	e01c      	b.n	8002256 <HAL_RCC_OscConfig+0x4c2>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b05      	cmp	r3, #5
 8002222:	d10c      	bne.n	800223e <HAL_RCC_OscConfig+0x4aa>
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002228:	4a1a      	ldr	r2, [pc, #104]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 800222a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800222e:	6353      	str	r3, [r2, #52]	; 0x34
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002234:	4a17      	ldr	r2, [pc, #92]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223a:	6353      	str	r3, [r2, #52]	; 0x34
 800223c:	e00b      	b.n	8002256 <HAL_RCC_OscConfig+0x4c2>
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002242:	4a14      	ldr	r2, [pc, #80]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002248:	6353      	str	r3, [r2, #52]	; 0x34
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 800224c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224e:	4a11      	ldr	r2, [pc, #68]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 8002250:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002254:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d015      	beq.n	800228a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7fe fdef 	bl	8000e40 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7fe fdeb 	bl	8000e40 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	; 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e0b2      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_OscConfig+0x500>)
 800227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0ee      	beq.n	8002266 <HAL_RCC_OscConfig+0x4d2>
 8002288:	e023      	b.n	80022d2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228a:	f7fe fdd9 	bl	8000e40 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002290:	e019      	b.n	80022c6 <HAL_RCC_OscConfig+0x532>
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800
 8002298:	08004438 	.word	0x08004438
 800229c:	20000004 	.word	0x20000004
 80022a0:	20000008 	.word	0x20000008
 80022a4:	42470020 	.word	0x42470020
 80022a8:	42470680 	.word	0x42470680
 80022ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7fe fdc6 	bl	8000e40 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e08d      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022c6:	4b49      	ldr	r3, [pc, #292]	; (80023ec <HAL_RCC_OscConfig+0x658>)
 80022c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1ee      	bne.n	80022b0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022d2:	7ffb      	ldrb	r3, [r7, #31]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d8:	4b44      	ldr	r3, [pc, #272]	; (80023ec <HAL_RCC_OscConfig+0x658>)
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	4a43      	ldr	r2, [pc, #268]	; (80023ec <HAL_RCC_OscConfig+0x658>)
 80022de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d079      	beq.n	80023e0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2b0c      	cmp	r3, #12
 80022f0:	d056      	beq.n	80023a0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d13b      	bne.n	8002372 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_RCC_OscConfig+0x65c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe fd9e 	bl	8000e40 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002308:	f7fe fd9a 	bl	8000e40 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e063      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800231a:	4b34      	ldr	r3, [pc, #208]	; (80023ec <HAL_RCC_OscConfig+0x658>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002326:	4b31      	ldr	r3, [pc, #196]	; (80023ec <HAL_RCC_OscConfig+0x658>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	4319      	orrs	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	430b      	orrs	r3, r1
 800233e:	492b      	ldr	r1, [pc, #172]	; (80023ec <HAL_RCC_OscConfig+0x658>)
 8002340:	4313      	orrs	r3, r2
 8002342:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002344:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_RCC_OscConfig+0x65c>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7fe fd79 	bl	8000e40 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002352:	f7fe fd75 	bl	8000e40 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e03e      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002364:	4b21      	ldr	r3, [pc, #132]	; (80023ec <HAL_RCC_OscConfig+0x658>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x5be>
 8002370:	e036      	b.n	80023e0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002372:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <HAL_RCC_OscConfig+0x65c>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7fe fd62 	bl	8000e40 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002380:	f7fe fd5e 	bl	8000e40 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e027      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002392:	4b16      	ldr	r3, [pc, #88]	; (80023ec <HAL_RCC_OscConfig+0x658>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x5ec>
 800239e:	e01f      	b.n	80023e0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e01a      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_RCC_OscConfig+0x658>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	429a      	cmp	r2, r3
 80023be:	d10d      	bne.n	80023dc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3720      	adds	r7, #32
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	42470060 	.word	0x42470060

080023f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e11a      	b.n	800263e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002408:	4b8f      	ldr	r3, [pc, #572]	; (8002648 <HAL_RCC_ClockConfig+0x254>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d919      	bls.n	800244a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d105      	bne.n	8002428 <HAL_RCC_ClockConfig+0x34>
 800241c:	4b8a      	ldr	r3, [pc, #552]	; (8002648 <HAL_RCC_ClockConfig+0x254>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a89      	ldr	r2, [pc, #548]	; (8002648 <HAL_RCC_ClockConfig+0x254>)
 8002422:	f043 0304 	orr.w	r3, r3, #4
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b87      	ldr	r3, [pc, #540]	; (8002648 <HAL_RCC_ClockConfig+0x254>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f023 0201 	bic.w	r2, r3, #1
 8002430:	4985      	ldr	r1, [pc, #532]	; (8002648 <HAL_RCC_ClockConfig+0x254>)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002438:	4b83      	ldr	r3, [pc, #524]	; (8002648 <HAL_RCC_ClockConfig+0x254>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d001      	beq.n	800244a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0f9      	b.n	800263e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002456:	4b7d      	ldr	r3, [pc, #500]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	497a      	ldr	r1, [pc, #488]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 8002464:	4313      	orrs	r3, r2
 8002466:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 808e 	beq.w	8002592 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800247e:	4b73      	ldr	r3, [pc, #460]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d121      	bne.n	80024ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e0d7      	b.n	800263e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b03      	cmp	r3, #3
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002496:	4b6d      	ldr	r3, [pc, #436]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d115      	bne.n	80024ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e0cb      	b.n	800263e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ae:	4b67      	ldr	r3, [pc, #412]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0bf      	b.n	800263e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024be:	4b63      	ldr	r3, [pc, #396]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e0b7      	b.n	800263e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ce:	4b5f      	ldr	r3, [pc, #380]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f023 0203 	bic.w	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	495c      	ldr	r1, [pc, #368]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e0:	f7fe fcae 	bl	8000e40 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d112      	bne.n	8002514 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7fe fca6 	bl	8000e40 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e09b      	b.n	800263e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002506:	4b51      	ldr	r3, [pc, #324]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b08      	cmp	r3, #8
 8002510:	d1ee      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xfc>
 8002512:	e03e      	b.n	8002592 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d112      	bne.n	8002542 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800251c:	e00a      	b.n	8002534 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251e:	f7fe fc8f 	bl	8000e40 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	f241 3288 	movw	r2, #5000	; 0x1388
 800252c:	4293      	cmp	r3, r2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e084      	b.n	800263e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002534:	4b45      	ldr	r3, [pc, #276]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	2b0c      	cmp	r3, #12
 800253e:	d1ee      	bne.n	800251e <HAL_RCC_ClockConfig+0x12a>
 8002540:	e027      	b.n	8002592 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d11d      	bne.n	8002586 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800254a:	e00a      	b.n	8002562 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254c:	f7fe fc78 	bl	8000e40 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	; 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e06d      	b.n	800263e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002562:	4b3a      	ldr	r3, [pc, #232]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b04      	cmp	r3, #4
 800256c:	d1ee      	bne.n	800254c <HAL_RCC_ClockConfig+0x158>
 800256e:	e010      	b.n	8002592 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7fe fc66 	bl	8000e40 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e05b      	b.n	800263e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002586:	4b31      	ldr	r3, [pc, #196]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1ee      	bne.n	8002570 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_RCC_ClockConfig+0x254>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d219      	bcs.n	80025d4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d105      	bne.n	80025b2 <HAL_RCC_ClockConfig+0x1be>
 80025a6:	4b28      	ldr	r3, [pc, #160]	; (8002648 <HAL_RCC_ClockConfig+0x254>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a27      	ldr	r2, [pc, #156]	; (8002648 <HAL_RCC_ClockConfig+0x254>)
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	4b25      	ldr	r3, [pc, #148]	; (8002648 <HAL_RCC_ClockConfig+0x254>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 0201 	bic.w	r2, r3, #1
 80025ba:	4923      	ldr	r1, [pc, #140]	; (8002648 <HAL_RCC_ClockConfig+0x254>)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b21      	ldr	r3, [pc, #132]	; (8002648 <HAL_RCC_ClockConfig+0x254>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e034      	b.n	800263e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e0:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4917      	ldr	r1, [pc, #92]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	490f      	ldr	r1, [pc, #60]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002612:	f000 f823 	bl	800265c <HAL_RCC_GetSysClockFreq>
 8002616:	4602      	mov	r2, r0
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <HAL_RCC_ClockConfig+0x258>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	490b      	ldr	r1, [pc, #44]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 8002624:	5ccb      	ldrb	r3, [r1, r3]
 8002626:	fa22 f303 	lsr.w	r3, r2, r3
 800262a:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 800262c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800262e:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <HAL_RCC_ClockConfig+0x264>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fbb8 	bl	8000da8 <HAL_InitTick>
 8002638:	4603      	mov	r3, r0
 800263a:	72fb      	strb	r3, [r7, #11]

  return status;
 800263c:	7afb      	ldrb	r3, [r7, #11]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023c00 	.word	0x40023c00
 800264c:	40023800 	.word	0x40023800
 8002650:	08004438 	.word	0x08004438
 8002654:	20000004 	.word	0x20000004
 8002658:	20000008 	.word	0x20000008

0800265c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800265c:	b5b0      	push	{r4, r5, r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002662:	4b61      	ldr	r3, [pc, #388]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x18c>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d00d      	beq.n	800268e <HAL_RCC_GetSysClockFreq+0x32>
 8002672:	2b0c      	cmp	r3, #12
 8002674:	f200 80a4 	bhi.w	80027c0 <HAL_RCC_GetSysClockFreq+0x164>
 8002678:	2b04      	cmp	r3, #4
 800267a:	d002      	beq.n	8002682 <HAL_RCC_GetSysClockFreq+0x26>
 800267c:	2b08      	cmp	r3, #8
 800267e:	d003      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x2c>
 8002680:	e09e      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002682:	4b5a      	ldr	r3, [pc, #360]	; (80027ec <HAL_RCC_GetSysClockFreq+0x190>)
 8002684:	613b      	str	r3, [r7, #16]
      break;
 8002686:	e0a9      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002688:	4b59      	ldr	r3, [pc, #356]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x194>)
 800268a:	613b      	str	r3, [r7, #16]
      break;
 800268c:	e0a6      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	0c9b      	lsrs	r3, r3, #18
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	4a57      	ldr	r2, [pc, #348]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x198>)
 8002698:	5cd3      	ldrb	r3, [r2, r3]
 800269a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	0d9b      	lsrs	r3, r3, #22
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	3301      	adds	r3, #1
 80026a6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a8:	4b4f      	ldr	r3, [pc, #316]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x18c>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d041      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	461c      	mov	r4, r3
 80026b8:	f04f 0500 	mov.w	r5, #0
 80026bc:	4620      	mov	r0, r4
 80026be:	4629      	mov	r1, r5
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	014b      	lsls	r3, r1, #5
 80026ca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026ce:	0142      	lsls	r2, r0, #5
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	1b00      	subs	r0, r0, r4
 80026d6:	eb61 0105 	sbc.w	r1, r1, r5
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	018b      	lsls	r3, r1, #6
 80026e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026e8:	0182      	lsls	r2, r0, #6
 80026ea:	1a12      	subs	r2, r2, r0
 80026ec:	eb63 0301 	sbc.w	r3, r3, r1
 80026f0:	f04f 0000 	mov.w	r0, #0
 80026f4:	f04f 0100 	mov.w	r1, #0
 80026f8:	00d9      	lsls	r1, r3, #3
 80026fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026fe:	00d0      	lsls	r0, r2, #3
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	1912      	adds	r2, r2, r4
 8002706:	eb45 0303 	adc.w	r3, r5, r3
 800270a:	f04f 0000 	mov.w	r0, #0
 800270e:	f04f 0100 	mov.w	r1, #0
 8002712:	0259      	lsls	r1, r3, #9
 8002714:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002718:	0250      	lsls	r0, r2, #9
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	461a      	mov	r2, r3
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	f7fd fd2f 	bl	800018c <__aeabi_uldivmod>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4613      	mov	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	e040      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	461c      	mov	r4, r3
 800273c:	f04f 0500 	mov.w	r5, #0
 8002740:	4620      	mov	r0, r4
 8002742:	4629      	mov	r1, r5
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	014b      	lsls	r3, r1, #5
 800274e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002752:	0142      	lsls	r2, r0, #5
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	1b00      	subs	r0, r0, r4
 800275a:	eb61 0105 	sbc.w	r1, r1, r5
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	018b      	lsls	r3, r1, #6
 8002768:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800276c:	0182      	lsls	r2, r0, #6
 800276e:	1a12      	subs	r2, r2, r0
 8002770:	eb63 0301 	sbc.w	r3, r3, r1
 8002774:	f04f 0000 	mov.w	r0, #0
 8002778:	f04f 0100 	mov.w	r1, #0
 800277c:	00d9      	lsls	r1, r3, #3
 800277e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002782:	00d0      	lsls	r0, r2, #3
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	1912      	adds	r2, r2, r4
 800278a:	eb45 0303 	adc.w	r3, r5, r3
 800278e:	f04f 0000 	mov.w	r0, #0
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	0299      	lsls	r1, r3, #10
 8002798:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800279c:	0290      	lsls	r0, r2, #10
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4610      	mov	r0, r2
 80027a4:	4619      	mov	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	461a      	mov	r2, r3
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	f7fd fced 	bl	800018c <__aeabi_uldivmod>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4613      	mov	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	613b      	str	r3, [r7, #16]
      break;
 80027be:	e00d      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x18c>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	0b5b      	lsrs	r3, r3, #13
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	3301      	adds	r3, #1
 80027d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	613b      	str	r3, [r7, #16]
      break;
 80027da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027dc:	693b      	ldr	r3, [r7, #16]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bdb0      	pop	{r4, r5, r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	007a1200 	.word	0x007a1200
 80027f4:	0800442c 	.word	0x0800442c

080027f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027fc:	4b02      	ldr	r3, [pc, #8]	; (8002808 <HAL_RCC_GetHCLKFreq+0x10>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	20000004 	.word	0x20000004

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002810:	f7ff fff2 	bl	80027f8 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4903      	ldr	r1, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40023800 	.word	0x40023800
 8002830:	08004448 	.word	0x08004448

08002834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002838:	f7ff ffde 	bl	80027f8 <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0adb      	lsrs	r3, r3, #11
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	08004448 	.word	0x08004448

0800285c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002864:	2300      	movs	r3, #0
 8002866:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002868:	4b29      	ldr	r3, [pc, #164]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d12c      	bne.n	80028ce <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002874:	4b26      	ldr	r3, [pc, #152]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002880:	4b24      	ldr	r3, [pc, #144]	; (8002914 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	e016      	b.n	80028ba <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	4b20      	ldr	r3, [pc, #128]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002896:	6253      	str	r3, [r2, #36]	; 0x24
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80028ac:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ae:	4b18      	ldr	r3, [pc, #96]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	4a17      	ldr	r2, [pc, #92]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80028c0:	d105      	bne.n	80028ce <RCC_SetFlashLatencyFromMSIRange+0x72>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028c8:	d101      	bne.n	80028ce <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80028ca:	2301      	movs	r3, #1
 80028cc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d105      	bne.n	80028e0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80028d4:	4b10      	ldr	r3, [pc, #64]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0f      	ldr	r2, [pc, #60]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028da:	f043 0304 	orr.w	r3, r3, #4
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 0201 	bic.w	r2, r3, #1
 80028e8:	490b      	ldr	r1, [pc, #44]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d001      	beq.n	8002902 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800
 8002914:	40007000 	.word	0x40007000
 8002918:	40023c00 	.word	0x40023c00

0800291c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d106      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80c6 	beq.w	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800293e:	2300      	movs	r3, #0
 8002940:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002942:	4b64      	ldr	r3, [pc, #400]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10d      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294e:	4b61      	ldr	r3, [pc, #388]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	4a60      	ldr	r2, [pc, #384]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002958:	6253      	str	r3, [r2, #36]	; 0x24
 800295a:	4b5e      	ldr	r3, [pc, #376]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002966:	2301      	movs	r3, #1
 8002968:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296a:	4b5b      	ldr	r3, [pc, #364]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d118      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002976:	4b58      	ldr	r3, [pc, #352]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a57      	ldr	r2, [pc, #348]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800297c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002982:	f7fe fa5d 	bl	8000e40 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	e008      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298a:	f7fe fa59 	bl	8000e40 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b64      	cmp	r3, #100	; 0x64
 8002996:	d901      	bls.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e097      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299c:	4b4e      	ldr	r3, [pc, #312]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80029a8:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80029b0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d106      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d00f      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029da:	d108      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80029dc:	4b3d      	ldr	r3, [pc, #244]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029e8:	d101      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e06e      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80029ee:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d041      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10c      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d02d      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d027      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002a32:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a3a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a3c:	4b27      	ldr	r3, [pc, #156]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a42:	4b26      	ldr	r3, [pc, #152]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002a48:	4a22      	ldr	r2, [pc, #136]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d014      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fe f9f2 	bl	8000e40 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe f9ee 	bl	8000e40 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e02a      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a76:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0ee      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a8e:	d10a      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002a90:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002aa0:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab2:	4908      	ldr	r1, [pc, #32]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	634b      	str	r3, [r1, #52]	; 0x34

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ab8:	7dfb      	ldrb	r3, [r7, #23]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d105      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40007000 	.word	0x40007000
 8002adc:	424706dc 	.word	0x424706dc

08002ae0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e06d      	b.n	8002bce <HAL_RTC_Init+0xee>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7f5b      	ldrb	r3, [r3, #29]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d105      	bne.n	8002b08 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fd ffd4 	bl	8000ab0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	22ca      	movs	r2, #202	; 0xca
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2253      	movs	r2, #83	; 0x53
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f9d8 	bl	8002ed4 <RTC_EnterInitMode>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	22ff      	movs	r2, #255	; 0xff
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2204      	movs	r2, #4
 8002b36:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e048      	b.n	8002bce <HAL_RTC_Init+0xee>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b4e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6899      	ldr	r1, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68d2      	ldr	r2, [r2, #12]
 8002b76:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6919      	ldr	r1, [r3, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	041a      	lsls	r2, r3, #16
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b9a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002baa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	22ff      	movs	r2, #255	; 0xff
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002bd6:	b590      	push	{r4, r7, lr}
 8002bd8:	b087      	sub	sp, #28
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	7f1b      	ldrb	r3, [r3, #28]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_RTC_SetTime+0x18>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e0a3      	b.n	8002d36 <HAL_RTC_SetTime+0x160>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d126      	bne.n	8002c4e <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2200      	movs	r2, #0
 8002c12:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 f985 	bl	8002f28 <RTC_ByteToBcd2>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	785b      	ldrb	r3, [r3, #1]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f97e 	bl	8002f28 <RTC_ByteToBcd2>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c30:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	789b      	ldrb	r3, [r3, #2]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f976 	bl	8002f28 <RTC_ByteToBcd2>
 8002c3c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002c3e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	78db      	ldrb	r3, [r3, #3]
 8002c46:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	e018      	b.n	8002c80 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	785b      	ldrb	r3, [r3, #1]
 8002c6c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c6e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002c74:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	78db      	ldrb	r3, [r3, #3]
 8002c7a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	22ca      	movs	r2, #202	; 0xca
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2253      	movs	r2, #83	; 0x53
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f91f 	bl	8002ed4 <RTC_EnterInitMode>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00b      	beq.n	8002cb4 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	22ff      	movs	r2, #255	; 0xff
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e040      	b.n	8002d36 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002cbe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002cc2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cd2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6899      	ldr	r1, [r3, #8]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cfa:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f8bc 	bl	8002e7a <HAL_RTC_WaitForSynchro>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00b      	beq.n	8002d20 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	22ff      	movs	r2, #255	; 0xff
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2204      	movs	r2, #4
 8002d14:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e00a      	b.n	8002d36 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	22ff      	movs	r2, #255	; 0xff
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002d34:	2300      	movs	r3, #0
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd90      	pop	{r4, r7, pc}

08002d3e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d3e:	b590      	push	{r4, r7, lr}
 8002d40:	b087      	sub	sp, #28
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	7f1b      	ldrb	r3, [r3, #28]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_RTC_SetDate+0x18>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e08d      	b.n	8002e72 <HAL_RTC_SetDate+0x134>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10e      	bne.n	8002d86 <HAL_RTC_SetDate+0x48>
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	785b      	ldrb	r3, [r3, #1]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	785b      	ldrb	r3, [r3, #1]
 8002d78:	f023 0310 	bic.w	r3, r3, #16
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	330a      	adds	r3, #10
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d11c      	bne.n	8002dc6 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	78db      	ldrb	r3, [r3, #3]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 f8c9 	bl	8002f28 <RTC_ByteToBcd2>
 8002d96:	4603      	mov	r3, r0
 8002d98:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	785b      	ldrb	r3, [r3, #1]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f8c2 	bl	8002f28 <RTC_ByteToBcd2>
 8002da4:	4603      	mov	r3, r0
 8002da6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002da8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	789b      	ldrb	r3, [r3, #2]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f8ba 	bl	8002f28 <RTC_ByteToBcd2>
 8002db4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002db6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e00e      	b.n	8002de4 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	78db      	ldrb	r3, [r3, #3]
 8002dca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	785b      	ldrb	r3, [r3, #1]
 8002dd0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002dd2:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002dd8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002de0:	4313      	orrs	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	22ca      	movs	r2, #202	; 0xca
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2253      	movs	r2, #83	; 0x53
 8002df2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f86d 	bl	8002ed4 <RTC_EnterInitMode>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00b      	beq.n	8002e18 <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	22ff      	movs	r2, #255	; 0xff
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e02c      	b.n	8002e72 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e26:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e36:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f81e 	bl	8002e7a <HAL_RTC_WaitForSynchro>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00b      	beq.n	8002e5c <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	22ff      	movs	r2, #255	; 0xff
 8002e4a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2204      	movs	r2, #4
 8002e50:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e00a      	b.n	8002e72 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	22ff      	movs	r2, #255	; 0xff
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002e70:	2300      	movs	r3, #0
  }
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd90      	pop	{r4, r7, pc}

08002e7a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d11c      	bne.n	8002eca <HAL_RTC_WaitForSynchro+0x50>
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e9e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002ea0:	f7fd ffce 	bl	8000e40 <HAL_GetTick>
 8002ea4:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ea6:	e009      	b.n	8002ebc <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002ea8:	f7fd ffca 	bl	8000e40 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eb6:	d901      	bls.n	8002ebc <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e007      	b.n	8002ecc <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0ee      	beq.n	8002ea8 <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d119      	bne.n	8002f1e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ef2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002ef4:	f7fd ffa4 	bl	8000e40 <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002efa:	e009      	b.n	8002f10 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002efc:	f7fd ffa0 	bl	8000e40 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f0a:	d901      	bls.n	8002f10 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e007      	b.n	8002f20 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0ee      	beq.n	8002efc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8002f3a:	e005      	b.n	8002f48 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002f42:	7afb      	ldrb	r3, [r7, #11]
 8002f44:	3b0a      	subs	r3, #10
 8002f46:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8002f48:	7afb      	ldrb	r3, [r7, #11]
 8002f4a:	2b09      	cmp	r3, #9
 8002f4c:	d8f6      	bhi.n	8002f3c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	7afb      	ldrb	r3, [r7, #11]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	b2db      	uxtb	r3, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr

08002f66 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e03f      	b.n	8002ff8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d106      	bne.n	8002f92 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7fd fda5 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2224      	movs	r2, #36	; 0x24
 8002f96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fa8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f960 	bl	8003270 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fbe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fde:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b20      	cmp	r3, #32
 800301e:	f040 8083 	bne.w	8003128 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <HAL_UART_Transmit+0x2e>
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e07b      	b.n	800312a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_UART_Transmit+0x40>
 800303c:	2302      	movs	r3, #2
 800303e:	e074      	b.n	800312a <HAL_UART_Transmit+0x12a>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2221      	movs	r2, #33	; 0x21
 8003052:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003056:	f7fd fef3 	bl	8000e40 <HAL_GetTick>
 800305a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	88fa      	ldrh	r2, [r7, #6]
 8003060:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	88fa      	ldrh	r2, [r7, #6]
 8003066:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003070:	e042      	b.n	80030f8 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003088:	d122      	bne.n	80030d0 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2200      	movs	r2, #0
 8003092:	2180      	movs	r1, #128	; 0x80
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f8a0 	bl	80031da <UART_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e042      	b.n	800312a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	3302      	adds	r3, #2
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	e017      	b.n	80030f8 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	3301      	adds	r3, #1
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	e013      	b.n	80030f8 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2200      	movs	r2, #0
 80030d8:	2180      	movs	r1, #128	; 0x80
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f87d 	bl	80031da <UART_WaitOnFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e01f      	b.n	800312a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	60ba      	str	r2, [r7, #8]
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1b7      	bne.n	8003072 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2200      	movs	r2, #0
 800310a:	2140      	movs	r1, #64	; 0x40
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f864 	bl	80031da <UART_WaitOnFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e006      	b.n	800312a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	e000      	b.n	800312a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003128:	2302      	movs	r3, #2
  }
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003132:	b480      	push	{r7}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	4613      	mov	r3, r2
 800313e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b20      	cmp	r3, #32
 800314a:	d140      	bne.n	80031ce <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_UART_Receive_IT+0x26>
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e039      	b.n	80031d0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_UART_Receive_IT+0x38>
 8003166:	2302      	movs	r3, #2
 8003168:	e032      	b.n	80031d0 <HAL_UART_Receive_IT+0x9e>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	88fa      	ldrh	r2, [r7, #6]
 800317c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	88fa      	ldrh	r2, [r7, #6]
 8003182:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2222      	movs	r2, #34	; 0x22
 800318e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a8:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0220 	orr.w	r2, r2, #32
 80031c8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
  }
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	4613      	mov	r3, r2
 80031e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ea:	e02c      	b.n	8003246 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f2:	d028      	beq.n	8003246 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d007      	beq.n	800320a <UART_WaitOnFlagUntilTimeout+0x30>
 80031fa:	f7fd fe21 	bl	8000e40 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	429a      	cmp	r2, r3
 8003208:	d21d      	bcs.n	8003246 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003218:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0201 	bic.w	r2, r2, #1
 8003228:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e00f      	b.n	8003266 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4013      	ands	r3, r2
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	429a      	cmp	r2, r3
 8003254:	bf0c      	ite	eq
 8003256:	2301      	moveq	r3, #1
 8003258:	2300      	movne	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	429a      	cmp	r2, r3
 8003262:	d0c3      	beq.n	80031ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80032b0:	f023 030c 	bic.w	r3, r3, #12
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	430b      	orrs	r3, r1
 80032bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699a      	ldr	r2, [r3, #24]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a55      	ldr	r2, [pc, #340]	; (8003430 <UART_SetConfig+0x1c0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d103      	bne.n	80032e6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032de:	f7ff faa9 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	e002      	b.n	80032ec <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032e6:	f7ff fa91 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 80032ea:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f4:	d14c      	bne.n	8003390 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	009a      	lsls	r2, r3, #2
 8003300:	441a      	add	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fbb2 f3f3 	udiv	r3, r2, r3
 800330c:	4a49      	ldr	r2, [pc, #292]	; (8003434 <UART_SetConfig+0x1c4>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	0119      	lsls	r1, r3, #4
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	009a      	lsls	r2, r3, #2
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	fbb2 f2f3 	udiv	r2, r2, r3
 800332c:	4b41      	ldr	r3, [pc, #260]	; (8003434 <UART_SetConfig+0x1c4>)
 800332e:	fba3 0302 	umull	r0, r3, r3, r2
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	2064      	movs	r0, #100	; 0x64
 8003336:	fb00 f303 	mul.w	r3, r0, r3
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	3332      	adds	r3, #50	; 0x32
 8003340:	4a3c      	ldr	r2, [pc, #240]	; (8003434 <UART_SetConfig+0x1c4>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800334e:	4419      	add	r1, r3
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	009a      	lsls	r2, r3, #2
 800335a:	441a      	add	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	fbb2 f2f3 	udiv	r2, r2, r3
 8003366:	4b33      	ldr	r3, [pc, #204]	; (8003434 <UART_SetConfig+0x1c4>)
 8003368:	fba3 0302 	umull	r0, r3, r3, r2
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	2064      	movs	r0, #100	; 0x64
 8003370:	fb00 f303 	mul.w	r3, r0, r3
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	3332      	adds	r3, #50	; 0x32
 800337a:	4a2e      	ldr	r2, [pc, #184]	; (8003434 <UART_SetConfig+0x1c4>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	f003 0207 	and.w	r2, r3, #7
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	440a      	add	r2, r1
 800338c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800338e:	e04a      	b.n	8003426 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	009a      	lsls	r2, r3, #2
 800339a:	441a      	add	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a6:	4a23      	ldr	r2, [pc, #140]	; (8003434 <UART_SetConfig+0x1c4>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	0119      	lsls	r1, r3, #4
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	009a      	lsls	r2, r3, #2
 80033ba:	441a      	add	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80033c6:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <UART_SetConfig+0x1c4>)
 80033c8:	fba3 0302 	umull	r0, r3, r3, r2
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	2064      	movs	r0, #100	; 0x64
 80033d0:	fb00 f303 	mul.w	r3, r0, r3
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	3332      	adds	r3, #50	; 0x32
 80033da:	4a16      	ldr	r2, [pc, #88]	; (8003434 <UART_SetConfig+0x1c4>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e6:	4419      	add	r1, r3
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	009a      	lsls	r2, r3, #2
 80033f2:	441a      	add	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <UART_SetConfig+0x1c4>)
 8003400:	fba3 0302 	umull	r0, r3, r3, r2
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	2064      	movs	r0, #100	; 0x64
 8003408:	fb00 f303 	mul.w	r3, r0, r3
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	3332      	adds	r3, #50	; 0x32
 8003412:	4a08      	ldr	r2, [pc, #32]	; (8003434 <UART_SetConfig+0x1c4>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	f003 020f 	and.w	r2, r3, #15
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	440a      	add	r2, r1
 8003424:	609a      	str	r2, [r3, #8]
}
 8003426:	bf00      	nop
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40013800 	.word	0x40013800
 8003434:	51eb851f 	.word	0x51eb851f

08003438 <__errno>:
 8003438:	4b01      	ldr	r3, [pc, #4]	; (8003440 <__errno+0x8>)
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	20000010 	.word	0x20000010

08003444 <__libc_init_array>:
 8003444:	b570      	push	{r4, r5, r6, lr}
 8003446:	2600      	movs	r6, #0
 8003448:	4d0c      	ldr	r5, [pc, #48]	; (800347c <__libc_init_array+0x38>)
 800344a:	4c0d      	ldr	r4, [pc, #52]	; (8003480 <__libc_init_array+0x3c>)
 800344c:	1b64      	subs	r4, r4, r5
 800344e:	10a4      	asrs	r4, r4, #2
 8003450:	42a6      	cmp	r6, r4
 8003452:	d109      	bne.n	8003468 <__libc_init_array+0x24>
 8003454:	f000 ff82 	bl	800435c <_init>
 8003458:	2600      	movs	r6, #0
 800345a:	4d0a      	ldr	r5, [pc, #40]	; (8003484 <__libc_init_array+0x40>)
 800345c:	4c0a      	ldr	r4, [pc, #40]	; (8003488 <__libc_init_array+0x44>)
 800345e:	1b64      	subs	r4, r4, r5
 8003460:	10a4      	asrs	r4, r4, #2
 8003462:	42a6      	cmp	r6, r4
 8003464:	d105      	bne.n	8003472 <__libc_init_array+0x2e>
 8003466:	bd70      	pop	{r4, r5, r6, pc}
 8003468:	f855 3b04 	ldr.w	r3, [r5], #4
 800346c:	4798      	blx	r3
 800346e:	3601      	adds	r6, #1
 8003470:	e7ee      	b.n	8003450 <__libc_init_array+0xc>
 8003472:	f855 3b04 	ldr.w	r3, [r5], #4
 8003476:	4798      	blx	r3
 8003478:	3601      	adds	r6, #1
 800347a:	e7f2      	b.n	8003462 <__libc_init_array+0x1e>
 800347c:	080044f0 	.word	0x080044f0
 8003480:	080044f0 	.word	0x080044f0
 8003484:	080044f0 	.word	0x080044f0
 8003488:	080044f4 	.word	0x080044f4

0800348c <memset>:
 800348c:	4603      	mov	r3, r0
 800348e:	4402      	add	r2, r0
 8003490:	4293      	cmp	r3, r2
 8003492:	d100      	bne.n	8003496 <memset+0xa>
 8003494:	4770      	bx	lr
 8003496:	f803 1b01 	strb.w	r1, [r3], #1
 800349a:	e7f9      	b.n	8003490 <memset+0x4>

0800349c <iprintf>:
 800349c:	b40f      	push	{r0, r1, r2, r3}
 800349e:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <iprintf+0x2c>)
 80034a0:	b513      	push	{r0, r1, r4, lr}
 80034a2:	681c      	ldr	r4, [r3, #0]
 80034a4:	b124      	cbz	r4, 80034b0 <iprintf+0x14>
 80034a6:	69a3      	ldr	r3, [r4, #24]
 80034a8:	b913      	cbnz	r3, 80034b0 <iprintf+0x14>
 80034aa:	4620      	mov	r0, r4
 80034ac:	f000 f866 	bl	800357c <__sinit>
 80034b0:	ab05      	add	r3, sp, #20
 80034b2:	4620      	mov	r0, r4
 80034b4:	9a04      	ldr	r2, [sp, #16]
 80034b6:	68a1      	ldr	r1, [r4, #8]
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	f000 f981 	bl	80037c0 <_vfiprintf_r>
 80034be:	b002      	add	sp, #8
 80034c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034c4:	b004      	add	sp, #16
 80034c6:	4770      	bx	lr
 80034c8:	20000010 	.word	0x20000010

080034cc <std>:
 80034cc:	2300      	movs	r3, #0
 80034ce:	b510      	push	{r4, lr}
 80034d0:	4604      	mov	r4, r0
 80034d2:	e9c0 3300 	strd	r3, r3, [r0]
 80034d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034da:	6083      	str	r3, [r0, #8]
 80034dc:	8181      	strh	r1, [r0, #12]
 80034de:	6643      	str	r3, [r0, #100]	; 0x64
 80034e0:	81c2      	strh	r2, [r0, #14]
 80034e2:	6183      	str	r3, [r0, #24]
 80034e4:	4619      	mov	r1, r3
 80034e6:	2208      	movs	r2, #8
 80034e8:	305c      	adds	r0, #92	; 0x5c
 80034ea:	f7ff ffcf 	bl	800348c <memset>
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <std+0x38>)
 80034f0:	6224      	str	r4, [r4, #32]
 80034f2:	6263      	str	r3, [r4, #36]	; 0x24
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <std+0x3c>)
 80034f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80034f8:	4b04      	ldr	r3, [pc, #16]	; (800350c <std+0x40>)
 80034fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <std+0x44>)
 80034fe:	6323      	str	r3, [r4, #48]	; 0x30
 8003500:	bd10      	pop	{r4, pc}
 8003502:	bf00      	nop
 8003504:	08003d6d 	.word	0x08003d6d
 8003508:	08003d8f 	.word	0x08003d8f
 800350c:	08003dc7 	.word	0x08003dc7
 8003510:	08003deb 	.word	0x08003deb

08003514 <_cleanup_r>:
 8003514:	4901      	ldr	r1, [pc, #4]	; (800351c <_cleanup_r+0x8>)
 8003516:	f000 b8af 	b.w	8003678 <_fwalk_reent>
 800351a:	bf00      	nop
 800351c:	080040c5 	.word	0x080040c5

08003520 <__sfmoreglue>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	2568      	movs	r5, #104	; 0x68
 8003524:	1e4a      	subs	r2, r1, #1
 8003526:	4355      	muls	r5, r2
 8003528:	460e      	mov	r6, r1
 800352a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800352e:	f000 f8c5 	bl	80036bc <_malloc_r>
 8003532:	4604      	mov	r4, r0
 8003534:	b140      	cbz	r0, 8003548 <__sfmoreglue+0x28>
 8003536:	2100      	movs	r1, #0
 8003538:	e9c0 1600 	strd	r1, r6, [r0]
 800353c:	300c      	adds	r0, #12
 800353e:	60a0      	str	r0, [r4, #8]
 8003540:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003544:	f7ff ffa2 	bl	800348c <memset>
 8003548:	4620      	mov	r0, r4
 800354a:	bd70      	pop	{r4, r5, r6, pc}

0800354c <__sfp_lock_acquire>:
 800354c:	4801      	ldr	r0, [pc, #4]	; (8003554 <__sfp_lock_acquire+0x8>)
 800354e:	f000 b8b3 	b.w	80036b8 <__retarget_lock_acquire_recursive>
 8003552:	bf00      	nop
 8003554:	200001b8 	.word	0x200001b8

08003558 <__sfp_lock_release>:
 8003558:	4801      	ldr	r0, [pc, #4]	; (8003560 <__sfp_lock_release+0x8>)
 800355a:	f000 b8ae 	b.w	80036ba <__retarget_lock_release_recursive>
 800355e:	bf00      	nop
 8003560:	200001b8 	.word	0x200001b8

08003564 <__sinit_lock_acquire>:
 8003564:	4801      	ldr	r0, [pc, #4]	; (800356c <__sinit_lock_acquire+0x8>)
 8003566:	f000 b8a7 	b.w	80036b8 <__retarget_lock_acquire_recursive>
 800356a:	bf00      	nop
 800356c:	200001b3 	.word	0x200001b3

08003570 <__sinit_lock_release>:
 8003570:	4801      	ldr	r0, [pc, #4]	; (8003578 <__sinit_lock_release+0x8>)
 8003572:	f000 b8a2 	b.w	80036ba <__retarget_lock_release_recursive>
 8003576:	bf00      	nop
 8003578:	200001b3 	.word	0x200001b3

0800357c <__sinit>:
 800357c:	b510      	push	{r4, lr}
 800357e:	4604      	mov	r4, r0
 8003580:	f7ff fff0 	bl	8003564 <__sinit_lock_acquire>
 8003584:	69a3      	ldr	r3, [r4, #24]
 8003586:	b11b      	cbz	r3, 8003590 <__sinit+0x14>
 8003588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800358c:	f7ff bff0 	b.w	8003570 <__sinit_lock_release>
 8003590:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003594:	6523      	str	r3, [r4, #80]	; 0x50
 8003596:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <__sinit+0x68>)
 8003598:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <__sinit+0x6c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	62a2      	str	r2, [r4, #40]	; 0x28
 800359e:	42a3      	cmp	r3, r4
 80035a0:	bf08      	it	eq
 80035a2:	2301      	moveq	r3, #1
 80035a4:	4620      	mov	r0, r4
 80035a6:	bf08      	it	eq
 80035a8:	61a3      	streq	r3, [r4, #24]
 80035aa:	f000 f81f 	bl	80035ec <__sfp>
 80035ae:	6060      	str	r0, [r4, #4]
 80035b0:	4620      	mov	r0, r4
 80035b2:	f000 f81b 	bl	80035ec <__sfp>
 80035b6:	60a0      	str	r0, [r4, #8]
 80035b8:	4620      	mov	r0, r4
 80035ba:	f000 f817 	bl	80035ec <__sfp>
 80035be:	2200      	movs	r2, #0
 80035c0:	2104      	movs	r1, #4
 80035c2:	60e0      	str	r0, [r4, #12]
 80035c4:	6860      	ldr	r0, [r4, #4]
 80035c6:	f7ff ff81 	bl	80034cc <std>
 80035ca:	2201      	movs	r2, #1
 80035cc:	2109      	movs	r1, #9
 80035ce:	68a0      	ldr	r0, [r4, #8]
 80035d0:	f7ff ff7c 	bl	80034cc <std>
 80035d4:	2202      	movs	r2, #2
 80035d6:	2112      	movs	r1, #18
 80035d8:	68e0      	ldr	r0, [r4, #12]
 80035da:	f7ff ff77 	bl	80034cc <std>
 80035de:	2301      	movs	r3, #1
 80035e0:	61a3      	str	r3, [r4, #24]
 80035e2:	e7d1      	b.n	8003588 <__sinit+0xc>
 80035e4:	08004450 	.word	0x08004450
 80035e8:	08003515 	.word	0x08003515

080035ec <__sfp>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	4607      	mov	r7, r0
 80035f0:	f7ff ffac 	bl	800354c <__sfp_lock_acquire>
 80035f4:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <__sfp+0x84>)
 80035f6:	681e      	ldr	r6, [r3, #0]
 80035f8:	69b3      	ldr	r3, [r6, #24]
 80035fa:	b913      	cbnz	r3, 8003602 <__sfp+0x16>
 80035fc:	4630      	mov	r0, r6
 80035fe:	f7ff ffbd 	bl	800357c <__sinit>
 8003602:	3648      	adds	r6, #72	; 0x48
 8003604:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003608:	3b01      	subs	r3, #1
 800360a:	d503      	bpl.n	8003614 <__sfp+0x28>
 800360c:	6833      	ldr	r3, [r6, #0]
 800360e:	b30b      	cbz	r3, 8003654 <__sfp+0x68>
 8003610:	6836      	ldr	r6, [r6, #0]
 8003612:	e7f7      	b.n	8003604 <__sfp+0x18>
 8003614:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003618:	b9d5      	cbnz	r5, 8003650 <__sfp+0x64>
 800361a:	4b16      	ldr	r3, [pc, #88]	; (8003674 <__sfp+0x88>)
 800361c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003620:	60e3      	str	r3, [r4, #12]
 8003622:	6665      	str	r5, [r4, #100]	; 0x64
 8003624:	f000 f847 	bl	80036b6 <__retarget_lock_init_recursive>
 8003628:	f7ff ff96 	bl	8003558 <__sfp_lock_release>
 800362c:	2208      	movs	r2, #8
 800362e:	4629      	mov	r1, r5
 8003630:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003634:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003638:	6025      	str	r5, [r4, #0]
 800363a:	61a5      	str	r5, [r4, #24]
 800363c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003640:	f7ff ff24 	bl	800348c <memset>
 8003644:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003648:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800364c:	4620      	mov	r0, r4
 800364e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003650:	3468      	adds	r4, #104	; 0x68
 8003652:	e7d9      	b.n	8003608 <__sfp+0x1c>
 8003654:	2104      	movs	r1, #4
 8003656:	4638      	mov	r0, r7
 8003658:	f7ff ff62 	bl	8003520 <__sfmoreglue>
 800365c:	4604      	mov	r4, r0
 800365e:	6030      	str	r0, [r6, #0]
 8003660:	2800      	cmp	r0, #0
 8003662:	d1d5      	bne.n	8003610 <__sfp+0x24>
 8003664:	f7ff ff78 	bl	8003558 <__sfp_lock_release>
 8003668:	230c      	movs	r3, #12
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	e7ee      	b.n	800364c <__sfp+0x60>
 800366e:	bf00      	nop
 8003670:	08004450 	.word	0x08004450
 8003674:	ffff0001 	.word	0xffff0001

08003678 <_fwalk_reent>:
 8003678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800367c:	4606      	mov	r6, r0
 800367e:	4688      	mov	r8, r1
 8003680:	2700      	movs	r7, #0
 8003682:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003686:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800368a:	f1b9 0901 	subs.w	r9, r9, #1
 800368e:	d505      	bpl.n	800369c <_fwalk_reent+0x24>
 8003690:	6824      	ldr	r4, [r4, #0]
 8003692:	2c00      	cmp	r4, #0
 8003694:	d1f7      	bne.n	8003686 <_fwalk_reent+0xe>
 8003696:	4638      	mov	r0, r7
 8003698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800369c:	89ab      	ldrh	r3, [r5, #12]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d907      	bls.n	80036b2 <_fwalk_reent+0x3a>
 80036a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036a6:	3301      	adds	r3, #1
 80036a8:	d003      	beq.n	80036b2 <_fwalk_reent+0x3a>
 80036aa:	4629      	mov	r1, r5
 80036ac:	4630      	mov	r0, r6
 80036ae:	47c0      	blx	r8
 80036b0:	4307      	orrs	r7, r0
 80036b2:	3568      	adds	r5, #104	; 0x68
 80036b4:	e7e9      	b.n	800368a <_fwalk_reent+0x12>

080036b6 <__retarget_lock_init_recursive>:
 80036b6:	4770      	bx	lr

080036b8 <__retarget_lock_acquire_recursive>:
 80036b8:	4770      	bx	lr

080036ba <__retarget_lock_release_recursive>:
 80036ba:	4770      	bx	lr

080036bc <_malloc_r>:
 80036bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036be:	1ccd      	adds	r5, r1, #3
 80036c0:	f025 0503 	bic.w	r5, r5, #3
 80036c4:	3508      	adds	r5, #8
 80036c6:	2d0c      	cmp	r5, #12
 80036c8:	bf38      	it	cc
 80036ca:	250c      	movcc	r5, #12
 80036cc:	2d00      	cmp	r5, #0
 80036ce:	4606      	mov	r6, r0
 80036d0:	db01      	blt.n	80036d6 <_malloc_r+0x1a>
 80036d2:	42a9      	cmp	r1, r5
 80036d4:	d903      	bls.n	80036de <_malloc_r+0x22>
 80036d6:	230c      	movs	r3, #12
 80036d8:	6033      	str	r3, [r6, #0]
 80036da:	2000      	movs	r0, #0
 80036dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036de:	f000 fdb1 	bl	8004244 <__malloc_lock>
 80036e2:	4921      	ldr	r1, [pc, #132]	; (8003768 <_malloc_r+0xac>)
 80036e4:	680a      	ldr	r2, [r1, #0]
 80036e6:	4614      	mov	r4, r2
 80036e8:	b99c      	cbnz	r4, 8003712 <_malloc_r+0x56>
 80036ea:	4f20      	ldr	r7, [pc, #128]	; (800376c <_malloc_r+0xb0>)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	b923      	cbnz	r3, 80036fa <_malloc_r+0x3e>
 80036f0:	4621      	mov	r1, r4
 80036f2:	4630      	mov	r0, r6
 80036f4:	f000 fb2a 	bl	8003d4c <_sbrk_r>
 80036f8:	6038      	str	r0, [r7, #0]
 80036fa:	4629      	mov	r1, r5
 80036fc:	4630      	mov	r0, r6
 80036fe:	f000 fb25 	bl	8003d4c <_sbrk_r>
 8003702:	1c43      	adds	r3, r0, #1
 8003704:	d123      	bne.n	800374e <_malloc_r+0x92>
 8003706:	230c      	movs	r3, #12
 8003708:	4630      	mov	r0, r6
 800370a:	6033      	str	r3, [r6, #0]
 800370c:	f000 fda0 	bl	8004250 <__malloc_unlock>
 8003710:	e7e3      	b.n	80036da <_malloc_r+0x1e>
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	1b5b      	subs	r3, r3, r5
 8003716:	d417      	bmi.n	8003748 <_malloc_r+0x8c>
 8003718:	2b0b      	cmp	r3, #11
 800371a:	d903      	bls.n	8003724 <_malloc_r+0x68>
 800371c:	6023      	str	r3, [r4, #0]
 800371e:	441c      	add	r4, r3
 8003720:	6025      	str	r5, [r4, #0]
 8003722:	e004      	b.n	800372e <_malloc_r+0x72>
 8003724:	6863      	ldr	r3, [r4, #4]
 8003726:	42a2      	cmp	r2, r4
 8003728:	bf0c      	ite	eq
 800372a:	600b      	streq	r3, [r1, #0]
 800372c:	6053      	strne	r3, [r2, #4]
 800372e:	4630      	mov	r0, r6
 8003730:	f000 fd8e 	bl	8004250 <__malloc_unlock>
 8003734:	f104 000b 	add.w	r0, r4, #11
 8003738:	1d23      	adds	r3, r4, #4
 800373a:	f020 0007 	bic.w	r0, r0, #7
 800373e:	1ac2      	subs	r2, r0, r3
 8003740:	d0cc      	beq.n	80036dc <_malloc_r+0x20>
 8003742:	1a1b      	subs	r3, r3, r0
 8003744:	50a3      	str	r3, [r4, r2]
 8003746:	e7c9      	b.n	80036dc <_malloc_r+0x20>
 8003748:	4622      	mov	r2, r4
 800374a:	6864      	ldr	r4, [r4, #4]
 800374c:	e7cc      	b.n	80036e8 <_malloc_r+0x2c>
 800374e:	1cc4      	adds	r4, r0, #3
 8003750:	f024 0403 	bic.w	r4, r4, #3
 8003754:	42a0      	cmp	r0, r4
 8003756:	d0e3      	beq.n	8003720 <_malloc_r+0x64>
 8003758:	1a21      	subs	r1, r4, r0
 800375a:	4630      	mov	r0, r6
 800375c:	f000 faf6 	bl	8003d4c <_sbrk_r>
 8003760:	3001      	adds	r0, #1
 8003762:	d1dd      	bne.n	8003720 <_malloc_r+0x64>
 8003764:	e7cf      	b.n	8003706 <_malloc_r+0x4a>
 8003766:	bf00      	nop
 8003768:	20000094 	.word	0x20000094
 800376c:	20000098 	.word	0x20000098

08003770 <__sfputc_r>:
 8003770:	6893      	ldr	r3, [r2, #8]
 8003772:	b410      	push	{r4}
 8003774:	3b01      	subs	r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	6093      	str	r3, [r2, #8]
 800377a:	da07      	bge.n	800378c <__sfputc_r+0x1c>
 800377c:	6994      	ldr	r4, [r2, #24]
 800377e:	42a3      	cmp	r3, r4
 8003780:	db01      	blt.n	8003786 <__sfputc_r+0x16>
 8003782:	290a      	cmp	r1, #10
 8003784:	d102      	bne.n	800378c <__sfputc_r+0x1c>
 8003786:	bc10      	pop	{r4}
 8003788:	f000 bb34 	b.w	8003df4 <__swbuf_r>
 800378c:	6813      	ldr	r3, [r2, #0]
 800378e:	1c58      	adds	r0, r3, #1
 8003790:	6010      	str	r0, [r2, #0]
 8003792:	7019      	strb	r1, [r3, #0]
 8003794:	4608      	mov	r0, r1
 8003796:	bc10      	pop	{r4}
 8003798:	4770      	bx	lr

0800379a <__sfputs_r>:
 800379a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379c:	4606      	mov	r6, r0
 800379e:	460f      	mov	r7, r1
 80037a0:	4614      	mov	r4, r2
 80037a2:	18d5      	adds	r5, r2, r3
 80037a4:	42ac      	cmp	r4, r5
 80037a6:	d101      	bne.n	80037ac <__sfputs_r+0x12>
 80037a8:	2000      	movs	r0, #0
 80037aa:	e007      	b.n	80037bc <__sfputs_r+0x22>
 80037ac:	463a      	mov	r2, r7
 80037ae:	4630      	mov	r0, r6
 80037b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037b4:	f7ff ffdc 	bl	8003770 <__sfputc_r>
 80037b8:	1c43      	adds	r3, r0, #1
 80037ba:	d1f3      	bne.n	80037a4 <__sfputs_r+0xa>
 80037bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037c0 <_vfiprintf_r>:
 80037c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c4:	460d      	mov	r5, r1
 80037c6:	4614      	mov	r4, r2
 80037c8:	4698      	mov	r8, r3
 80037ca:	4606      	mov	r6, r0
 80037cc:	b09d      	sub	sp, #116	; 0x74
 80037ce:	b118      	cbz	r0, 80037d8 <_vfiprintf_r+0x18>
 80037d0:	6983      	ldr	r3, [r0, #24]
 80037d2:	b90b      	cbnz	r3, 80037d8 <_vfiprintf_r+0x18>
 80037d4:	f7ff fed2 	bl	800357c <__sinit>
 80037d8:	4b89      	ldr	r3, [pc, #548]	; (8003a00 <_vfiprintf_r+0x240>)
 80037da:	429d      	cmp	r5, r3
 80037dc:	d11b      	bne.n	8003816 <_vfiprintf_r+0x56>
 80037de:	6875      	ldr	r5, [r6, #4]
 80037e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037e2:	07d9      	lsls	r1, r3, #31
 80037e4:	d405      	bmi.n	80037f2 <_vfiprintf_r+0x32>
 80037e6:	89ab      	ldrh	r3, [r5, #12]
 80037e8:	059a      	lsls	r2, r3, #22
 80037ea:	d402      	bmi.n	80037f2 <_vfiprintf_r+0x32>
 80037ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037ee:	f7ff ff63 	bl	80036b8 <__retarget_lock_acquire_recursive>
 80037f2:	89ab      	ldrh	r3, [r5, #12]
 80037f4:	071b      	lsls	r3, r3, #28
 80037f6:	d501      	bpl.n	80037fc <_vfiprintf_r+0x3c>
 80037f8:	692b      	ldr	r3, [r5, #16]
 80037fa:	b9eb      	cbnz	r3, 8003838 <_vfiprintf_r+0x78>
 80037fc:	4629      	mov	r1, r5
 80037fe:	4630      	mov	r0, r6
 8003800:	f000 fb5c 	bl	8003ebc <__swsetup_r>
 8003804:	b1c0      	cbz	r0, 8003838 <_vfiprintf_r+0x78>
 8003806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003808:	07dc      	lsls	r4, r3, #31
 800380a:	d50e      	bpl.n	800382a <_vfiprintf_r+0x6a>
 800380c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003810:	b01d      	add	sp, #116	; 0x74
 8003812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003816:	4b7b      	ldr	r3, [pc, #492]	; (8003a04 <_vfiprintf_r+0x244>)
 8003818:	429d      	cmp	r5, r3
 800381a:	d101      	bne.n	8003820 <_vfiprintf_r+0x60>
 800381c:	68b5      	ldr	r5, [r6, #8]
 800381e:	e7df      	b.n	80037e0 <_vfiprintf_r+0x20>
 8003820:	4b79      	ldr	r3, [pc, #484]	; (8003a08 <_vfiprintf_r+0x248>)
 8003822:	429d      	cmp	r5, r3
 8003824:	bf08      	it	eq
 8003826:	68f5      	ldreq	r5, [r6, #12]
 8003828:	e7da      	b.n	80037e0 <_vfiprintf_r+0x20>
 800382a:	89ab      	ldrh	r3, [r5, #12]
 800382c:	0598      	lsls	r0, r3, #22
 800382e:	d4ed      	bmi.n	800380c <_vfiprintf_r+0x4c>
 8003830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003832:	f7ff ff42 	bl	80036ba <__retarget_lock_release_recursive>
 8003836:	e7e9      	b.n	800380c <_vfiprintf_r+0x4c>
 8003838:	2300      	movs	r3, #0
 800383a:	9309      	str	r3, [sp, #36]	; 0x24
 800383c:	2320      	movs	r3, #32
 800383e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003842:	2330      	movs	r3, #48	; 0x30
 8003844:	f04f 0901 	mov.w	r9, #1
 8003848:	f8cd 800c 	str.w	r8, [sp, #12]
 800384c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003a0c <_vfiprintf_r+0x24c>
 8003850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003854:	4623      	mov	r3, r4
 8003856:	469a      	mov	sl, r3
 8003858:	f813 2b01 	ldrb.w	r2, [r3], #1
 800385c:	b10a      	cbz	r2, 8003862 <_vfiprintf_r+0xa2>
 800385e:	2a25      	cmp	r2, #37	; 0x25
 8003860:	d1f9      	bne.n	8003856 <_vfiprintf_r+0x96>
 8003862:	ebba 0b04 	subs.w	fp, sl, r4
 8003866:	d00b      	beq.n	8003880 <_vfiprintf_r+0xc0>
 8003868:	465b      	mov	r3, fp
 800386a:	4622      	mov	r2, r4
 800386c:	4629      	mov	r1, r5
 800386e:	4630      	mov	r0, r6
 8003870:	f7ff ff93 	bl	800379a <__sfputs_r>
 8003874:	3001      	adds	r0, #1
 8003876:	f000 80aa 	beq.w	80039ce <_vfiprintf_r+0x20e>
 800387a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800387c:	445a      	add	r2, fp
 800387e:	9209      	str	r2, [sp, #36]	; 0x24
 8003880:	f89a 3000 	ldrb.w	r3, [sl]
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80a2 	beq.w	80039ce <_vfiprintf_r+0x20e>
 800388a:	2300      	movs	r3, #0
 800388c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003894:	f10a 0a01 	add.w	sl, sl, #1
 8003898:	9304      	str	r3, [sp, #16]
 800389a:	9307      	str	r3, [sp, #28]
 800389c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038a0:	931a      	str	r3, [sp, #104]	; 0x68
 80038a2:	4654      	mov	r4, sl
 80038a4:	2205      	movs	r2, #5
 80038a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038aa:	4858      	ldr	r0, [pc, #352]	; (8003a0c <_vfiprintf_r+0x24c>)
 80038ac:	f000 fcbc 	bl	8004228 <memchr>
 80038b0:	9a04      	ldr	r2, [sp, #16]
 80038b2:	b9d8      	cbnz	r0, 80038ec <_vfiprintf_r+0x12c>
 80038b4:	06d1      	lsls	r1, r2, #27
 80038b6:	bf44      	itt	mi
 80038b8:	2320      	movmi	r3, #32
 80038ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038be:	0713      	lsls	r3, r2, #28
 80038c0:	bf44      	itt	mi
 80038c2:	232b      	movmi	r3, #43	; 0x2b
 80038c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038c8:	f89a 3000 	ldrb.w	r3, [sl]
 80038cc:	2b2a      	cmp	r3, #42	; 0x2a
 80038ce:	d015      	beq.n	80038fc <_vfiprintf_r+0x13c>
 80038d0:	4654      	mov	r4, sl
 80038d2:	2000      	movs	r0, #0
 80038d4:	f04f 0c0a 	mov.w	ip, #10
 80038d8:	9a07      	ldr	r2, [sp, #28]
 80038da:	4621      	mov	r1, r4
 80038dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038e0:	3b30      	subs	r3, #48	; 0x30
 80038e2:	2b09      	cmp	r3, #9
 80038e4:	d94e      	bls.n	8003984 <_vfiprintf_r+0x1c4>
 80038e6:	b1b0      	cbz	r0, 8003916 <_vfiprintf_r+0x156>
 80038e8:	9207      	str	r2, [sp, #28]
 80038ea:	e014      	b.n	8003916 <_vfiprintf_r+0x156>
 80038ec:	eba0 0308 	sub.w	r3, r0, r8
 80038f0:	fa09 f303 	lsl.w	r3, r9, r3
 80038f4:	4313      	orrs	r3, r2
 80038f6:	46a2      	mov	sl, r4
 80038f8:	9304      	str	r3, [sp, #16]
 80038fa:	e7d2      	b.n	80038a2 <_vfiprintf_r+0xe2>
 80038fc:	9b03      	ldr	r3, [sp, #12]
 80038fe:	1d19      	adds	r1, r3, #4
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	9103      	str	r1, [sp, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	bfbb      	ittet	lt
 8003908:	425b      	neglt	r3, r3
 800390a:	f042 0202 	orrlt.w	r2, r2, #2
 800390e:	9307      	strge	r3, [sp, #28]
 8003910:	9307      	strlt	r3, [sp, #28]
 8003912:	bfb8      	it	lt
 8003914:	9204      	strlt	r2, [sp, #16]
 8003916:	7823      	ldrb	r3, [r4, #0]
 8003918:	2b2e      	cmp	r3, #46	; 0x2e
 800391a:	d10c      	bne.n	8003936 <_vfiprintf_r+0x176>
 800391c:	7863      	ldrb	r3, [r4, #1]
 800391e:	2b2a      	cmp	r3, #42	; 0x2a
 8003920:	d135      	bne.n	800398e <_vfiprintf_r+0x1ce>
 8003922:	9b03      	ldr	r3, [sp, #12]
 8003924:	3402      	adds	r4, #2
 8003926:	1d1a      	adds	r2, r3, #4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	9203      	str	r2, [sp, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	bfb8      	it	lt
 8003930:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003934:	9305      	str	r3, [sp, #20]
 8003936:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003a1c <_vfiprintf_r+0x25c>
 800393a:	2203      	movs	r2, #3
 800393c:	4650      	mov	r0, sl
 800393e:	7821      	ldrb	r1, [r4, #0]
 8003940:	f000 fc72 	bl	8004228 <memchr>
 8003944:	b140      	cbz	r0, 8003958 <_vfiprintf_r+0x198>
 8003946:	2340      	movs	r3, #64	; 0x40
 8003948:	eba0 000a 	sub.w	r0, r0, sl
 800394c:	fa03 f000 	lsl.w	r0, r3, r0
 8003950:	9b04      	ldr	r3, [sp, #16]
 8003952:	3401      	adds	r4, #1
 8003954:	4303      	orrs	r3, r0
 8003956:	9304      	str	r3, [sp, #16]
 8003958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800395c:	2206      	movs	r2, #6
 800395e:	482c      	ldr	r0, [pc, #176]	; (8003a10 <_vfiprintf_r+0x250>)
 8003960:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003964:	f000 fc60 	bl	8004228 <memchr>
 8003968:	2800      	cmp	r0, #0
 800396a:	d03f      	beq.n	80039ec <_vfiprintf_r+0x22c>
 800396c:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <_vfiprintf_r+0x254>)
 800396e:	bb1b      	cbnz	r3, 80039b8 <_vfiprintf_r+0x1f8>
 8003970:	9b03      	ldr	r3, [sp, #12]
 8003972:	3307      	adds	r3, #7
 8003974:	f023 0307 	bic.w	r3, r3, #7
 8003978:	3308      	adds	r3, #8
 800397a:	9303      	str	r3, [sp, #12]
 800397c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800397e:	443b      	add	r3, r7
 8003980:	9309      	str	r3, [sp, #36]	; 0x24
 8003982:	e767      	b.n	8003854 <_vfiprintf_r+0x94>
 8003984:	460c      	mov	r4, r1
 8003986:	2001      	movs	r0, #1
 8003988:	fb0c 3202 	mla	r2, ip, r2, r3
 800398c:	e7a5      	b.n	80038da <_vfiprintf_r+0x11a>
 800398e:	2300      	movs	r3, #0
 8003990:	f04f 0c0a 	mov.w	ip, #10
 8003994:	4619      	mov	r1, r3
 8003996:	3401      	adds	r4, #1
 8003998:	9305      	str	r3, [sp, #20]
 800399a:	4620      	mov	r0, r4
 800399c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039a0:	3a30      	subs	r2, #48	; 0x30
 80039a2:	2a09      	cmp	r2, #9
 80039a4:	d903      	bls.n	80039ae <_vfiprintf_r+0x1ee>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0c5      	beq.n	8003936 <_vfiprintf_r+0x176>
 80039aa:	9105      	str	r1, [sp, #20]
 80039ac:	e7c3      	b.n	8003936 <_vfiprintf_r+0x176>
 80039ae:	4604      	mov	r4, r0
 80039b0:	2301      	movs	r3, #1
 80039b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80039b6:	e7f0      	b.n	800399a <_vfiprintf_r+0x1da>
 80039b8:	ab03      	add	r3, sp, #12
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	462a      	mov	r2, r5
 80039be:	4630      	mov	r0, r6
 80039c0:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <_vfiprintf_r+0x258>)
 80039c2:	a904      	add	r1, sp, #16
 80039c4:	f3af 8000 	nop.w
 80039c8:	4607      	mov	r7, r0
 80039ca:	1c78      	adds	r0, r7, #1
 80039cc:	d1d6      	bne.n	800397c <_vfiprintf_r+0x1bc>
 80039ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039d0:	07d9      	lsls	r1, r3, #31
 80039d2:	d405      	bmi.n	80039e0 <_vfiprintf_r+0x220>
 80039d4:	89ab      	ldrh	r3, [r5, #12]
 80039d6:	059a      	lsls	r2, r3, #22
 80039d8:	d402      	bmi.n	80039e0 <_vfiprintf_r+0x220>
 80039da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039dc:	f7ff fe6d 	bl	80036ba <__retarget_lock_release_recursive>
 80039e0:	89ab      	ldrh	r3, [r5, #12]
 80039e2:	065b      	lsls	r3, r3, #25
 80039e4:	f53f af12 	bmi.w	800380c <_vfiprintf_r+0x4c>
 80039e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039ea:	e711      	b.n	8003810 <_vfiprintf_r+0x50>
 80039ec:	ab03      	add	r3, sp, #12
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	462a      	mov	r2, r5
 80039f2:	4630      	mov	r0, r6
 80039f4:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <_vfiprintf_r+0x258>)
 80039f6:	a904      	add	r1, sp, #16
 80039f8:	f000 f882 	bl	8003b00 <_printf_i>
 80039fc:	e7e4      	b.n	80039c8 <_vfiprintf_r+0x208>
 80039fe:	bf00      	nop
 8003a00:	08004474 	.word	0x08004474
 8003a04:	08004494 	.word	0x08004494
 8003a08:	08004454 	.word	0x08004454
 8003a0c:	080044b4 	.word	0x080044b4
 8003a10:	080044be 	.word	0x080044be
 8003a14:	00000000 	.word	0x00000000
 8003a18:	0800379b 	.word	0x0800379b
 8003a1c:	080044ba 	.word	0x080044ba

08003a20 <_printf_common>:
 8003a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a24:	4616      	mov	r6, r2
 8003a26:	4699      	mov	r9, r3
 8003a28:	688a      	ldr	r2, [r1, #8]
 8003a2a:	690b      	ldr	r3, [r1, #16]
 8003a2c:	4607      	mov	r7, r0
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	bfb8      	it	lt
 8003a32:	4613      	movlt	r3, r2
 8003a34:	6033      	str	r3, [r6, #0]
 8003a36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a3a:	460c      	mov	r4, r1
 8003a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a40:	b10a      	cbz	r2, 8003a46 <_printf_common+0x26>
 8003a42:	3301      	adds	r3, #1
 8003a44:	6033      	str	r3, [r6, #0]
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	0699      	lsls	r1, r3, #26
 8003a4a:	bf42      	ittt	mi
 8003a4c:	6833      	ldrmi	r3, [r6, #0]
 8003a4e:	3302      	addmi	r3, #2
 8003a50:	6033      	strmi	r3, [r6, #0]
 8003a52:	6825      	ldr	r5, [r4, #0]
 8003a54:	f015 0506 	ands.w	r5, r5, #6
 8003a58:	d106      	bne.n	8003a68 <_printf_common+0x48>
 8003a5a:	f104 0a19 	add.w	sl, r4, #25
 8003a5e:	68e3      	ldr	r3, [r4, #12]
 8003a60:	6832      	ldr	r2, [r6, #0]
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	42ab      	cmp	r3, r5
 8003a66:	dc28      	bgt.n	8003aba <_printf_common+0x9a>
 8003a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a6c:	1e13      	subs	r3, r2, #0
 8003a6e:	6822      	ldr	r2, [r4, #0]
 8003a70:	bf18      	it	ne
 8003a72:	2301      	movne	r3, #1
 8003a74:	0692      	lsls	r2, r2, #26
 8003a76:	d42d      	bmi.n	8003ad4 <_printf_common+0xb4>
 8003a78:	4649      	mov	r1, r9
 8003a7a:	4638      	mov	r0, r7
 8003a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a80:	47c0      	blx	r8
 8003a82:	3001      	adds	r0, #1
 8003a84:	d020      	beq.n	8003ac8 <_printf_common+0xa8>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	68e5      	ldr	r5, [r4, #12]
 8003a8a:	f003 0306 	and.w	r3, r3, #6
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	bf18      	it	ne
 8003a92:	2500      	movne	r5, #0
 8003a94:	6832      	ldr	r2, [r6, #0]
 8003a96:	f04f 0600 	mov.w	r6, #0
 8003a9a:	68a3      	ldr	r3, [r4, #8]
 8003a9c:	bf08      	it	eq
 8003a9e:	1aad      	subeq	r5, r5, r2
 8003aa0:	6922      	ldr	r2, [r4, #16]
 8003aa2:	bf08      	it	eq
 8003aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	bfc4      	itt	gt
 8003aac:	1a9b      	subgt	r3, r3, r2
 8003aae:	18ed      	addgt	r5, r5, r3
 8003ab0:	341a      	adds	r4, #26
 8003ab2:	42b5      	cmp	r5, r6
 8003ab4:	d11a      	bne.n	8003aec <_printf_common+0xcc>
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	e008      	b.n	8003acc <_printf_common+0xac>
 8003aba:	2301      	movs	r3, #1
 8003abc:	4652      	mov	r2, sl
 8003abe:	4649      	mov	r1, r9
 8003ac0:	4638      	mov	r0, r7
 8003ac2:	47c0      	blx	r8
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	d103      	bne.n	8003ad0 <_printf_common+0xb0>
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad0:	3501      	adds	r5, #1
 8003ad2:	e7c4      	b.n	8003a5e <_printf_common+0x3e>
 8003ad4:	2030      	movs	r0, #48	; 0x30
 8003ad6:	18e1      	adds	r1, r4, r3
 8003ad8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ae2:	4422      	add	r2, r4
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003aea:	e7c5      	b.n	8003a78 <_printf_common+0x58>
 8003aec:	2301      	movs	r3, #1
 8003aee:	4622      	mov	r2, r4
 8003af0:	4649      	mov	r1, r9
 8003af2:	4638      	mov	r0, r7
 8003af4:	47c0      	blx	r8
 8003af6:	3001      	adds	r0, #1
 8003af8:	d0e6      	beq.n	8003ac8 <_printf_common+0xa8>
 8003afa:	3601      	adds	r6, #1
 8003afc:	e7d9      	b.n	8003ab2 <_printf_common+0x92>
	...

08003b00 <_printf_i>:
 8003b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b04:	460c      	mov	r4, r1
 8003b06:	7e27      	ldrb	r7, [r4, #24]
 8003b08:	4691      	mov	r9, r2
 8003b0a:	2f78      	cmp	r7, #120	; 0x78
 8003b0c:	4680      	mov	r8, r0
 8003b0e:	469a      	mov	sl, r3
 8003b10:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b16:	d807      	bhi.n	8003b28 <_printf_i+0x28>
 8003b18:	2f62      	cmp	r7, #98	; 0x62
 8003b1a:	d80a      	bhi.n	8003b32 <_printf_i+0x32>
 8003b1c:	2f00      	cmp	r7, #0
 8003b1e:	f000 80d9 	beq.w	8003cd4 <_printf_i+0x1d4>
 8003b22:	2f58      	cmp	r7, #88	; 0x58
 8003b24:	f000 80a4 	beq.w	8003c70 <_printf_i+0x170>
 8003b28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b30:	e03a      	b.n	8003ba8 <_printf_i+0xa8>
 8003b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b36:	2b15      	cmp	r3, #21
 8003b38:	d8f6      	bhi.n	8003b28 <_printf_i+0x28>
 8003b3a:	a001      	add	r0, pc, #4	; (adr r0, 8003b40 <_printf_i+0x40>)
 8003b3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b40:	08003b99 	.word	0x08003b99
 8003b44:	08003bad 	.word	0x08003bad
 8003b48:	08003b29 	.word	0x08003b29
 8003b4c:	08003b29 	.word	0x08003b29
 8003b50:	08003b29 	.word	0x08003b29
 8003b54:	08003b29 	.word	0x08003b29
 8003b58:	08003bad 	.word	0x08003bad
 8003b5c:	08003b29 	.word	0x08003b29
 8003b60:	08003b29 	.word	0x08003b29
 8003b64:	08003b29 	.word	0x08003b29
 8003b68:	08003b29 	.word	0x08003b29
 8003b6c:	08003cbb 	.word	0x08003cbb
 8003b70:	08003bdd 	.word	0x08003bdd
 8003b74:	08003c9d 	.word	0x08003c9d
 8003b78:	08003b29 	.word	0x08003b29
 8003b7c:	08003b29 	.word	0x08003b29
 8003b80:	08003cdd 	.word	0x08003cdd
 8003b84:	08003b29 	.word	0x08003b29
 8003b88:	08003bdd 	.word	0x08003bdd
 8003b8c:	08003b29 	.word	0x08003b29
 8003b90:	08003b29 	.word	0x08003b29
 8003b94:	08003ca5 	.word	0x08003ca5
 8003b98:	680b      	ldr	r3, [r1, #0]
 8003b9a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b9e:	1d1a      	adds	r2, r3, #4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	600a      	str	r2, [r1, #0]
 8003ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0a4      	b.n	8003cf6 <_printf_i+0x1f6>
 8003bac:	6825      	ldr	r5, [r4, #0]
 8003bae:	6808      	ldr	r0, [r1, #0]
 8003bb0:	062e      	lsls	r6, r5, #24
 8003bb2:	f100 0304 	add.w	r3, r0, #4
 8003bb6:	d50a      	bpl.n	8003bce <_printf_i+0xce>
 8003bb8:	6805      	ldr	r5, [r0, #0]
 8003bba:	600b      	str	r3, [r1, #0]
 8003bbc:	2d00      	cmp	r5, #0
 8003bbe:	da03      	bge.n	8003bc8 <_printf_i+0xc8>
 8003bc0:	232d      	movs	r3, #45	; 0x2d
 8003bc2:	426d      	negs	r5, r5
 8003bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bc8:	230a      	movs	r3, #10
 8003bca:	485e      	ldr	r0, [pc, #376]	; (8003d44 <_printf_i+0x244>)
 8003bcc:	e019      	b.n	8003c02 <_printf_i+0x102>
 8003bce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003bd2:	6805      	ldr	r5, [r0, #0]
 8003bd4:	600b      	str	r3, [r1, #0]
 8003bd6:	bf18      	it	ne
 8003bd8:	b22d      	sxthne	r5, r5
 8003bda:	e7ef      	b.n	8003bbc <_printf_i+0xbc>
 8003bdc:	680b      	ldr	r3, [r1, #0]
 8003bde:	6825      	ldr	r5, [r4, #0]
 8003be0:	1d18      	adds	r0, r3, #4
 8003be2:	6008      	str	r0, [r1, #0]
 8003be4:	0628      	lsls	r0, r5, #24
 8003be6:	d501      	bpl.n	8003bec <_printf_i+0xec>
 8003be8:	681d      	ldr	r5, [r3, #0]
 8003bea:	e002      	b.n	8003bf2 <_printf_i+0xf2>
 8003bec:	0669      	lsls	r1, r5, #25
 8003bee:	d5fb      	bpl.n	8003be8 <_printf_i+0xe8>
 8003bf0:	881d      	ldrh	r5, [r3, #0]
 8003bf2:	2f6f      	cmp	r7, #111	; 0x6f
 8003bf4:	bf0c      	ite	eq
 8003bf6:	2308      	moveq	r3, #8
 8003bf8:	230a      	movne	r3, #10
 8003bfa:	4852      	ldr	r0, [pc, #328]	; (8003d44 <_printf_i+0x244>)
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c02:	6866      	ldr	r6, [r4, #4]
 8003c04:	2e00      	cmp	r6, #0
 8003c06:	bfa8      	it	ge
 8003c08:	6821      	ldrge	r1, [r4, #0]
 8003c0a:	60a6      	str	r6, [r4, #8]
 8003c0c:	bfa4      	itt	ge
 8003c0e:	f021 0104 	bicge.w	r1, r1, #4
 8003c12:	6021      	strge	r1, [r4, #0]
 8003c14:	b90d      	cbnz	r5, 8003c1a <_printf_i+0x11a>
 8003c16:	2e00      	cmp	r6, #0
 8003c18:	d04d      	beq.n	8003cb6 <_printf_i+0x1b6>
 8003c1a:	4616      	mov	r6, r2
 8003c1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c20:	fb03 5711 	mls	r7, r3, r1, r5
 8003c24:	5dc7      	ldrb	r7, [r0, r7]
 8003c26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c2a:	462f      	mov	r7, r5
 8003c2c:	42bb      	cmp	r3, r7
 8003c2e:	460d      	mov	r5, r1
 8003c30:	d9f4      	bls.n	8003c1c <_printf_i+0x11c>
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d10b      	bne.n	8003c4e <_printf_i+0x14e>
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	07df      	lsls	r7, r3, #31
 8003c3a:	d508      	bpl.n	8003c4e <_printf_i+0x14e>
 8003c3c:	6923      	ldr	r3, [r4, #16]
 8003c3e:	6861      	ldr	r1, [r4, #4]
 8003c40:	4299      	cmp	r1, r3
 8003c42:	bfde      	ittt	le
 8003c44:	2330      	movle	r3, #48	; 0x30
 8003c46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c4a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003c4e:	1b92      	subs	r2, r2, r6
 8003c50:	6122      	str	r2, [r4, #16]
 8003c52:	464b      	mov	r3, r9
 8003c54:	4621      	mov	r1, r4
 8003c56:	4640      	mov	r0, r8
 8003c58:	f8cd a000 	str.w	sl, [sp]
 8003c5c:	aa03      	add	r2, sp, #12
 8003c5e:	f7ff fedf 	bl	8003a20 <_printf_common>
 8003c62:	3001      	adds	r0, #1
 8003c64:	d14c      	bne.n	8003d00 <_printf_i+0x200>
 8003c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c6a:	b004      	add	sp, #16
 8003c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c70:	4834      	ldr	r0, [pc, #208]	; (8003d44 <_printf_i+0x244>)
 8003c72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c76:	680e      	ldr	r6, [r1, #0]
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003c7e:	061f      	lsls	r7, r3, #24
 8003c80:	600e      	str	r6, [r1, #0]
 8003c82:	d514      	bpl.n	8003cae <_printf_i+0x1ae>
 8003c84:	07d9      	lsls	r1, r3, #31
 8003c86:	bf44      	itt	mi
 8003c88:	f043 0320 	orrmi.w	r3, r3, #32
 8003c8c:	6023      	strmi	r3, [r4, #0]
 8003c8e:	b91d      	cbnz	r5, 8003c98 <_printf_i+0x198>
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	f023 0320 	bic.w	r3, r3, #32
 8003c96:	6023      	str	r3, [r4, #0]
 8003c98:	2310      	movs	r3, #16
 8003c9a:	e7af      	b.n	8003bfc <_printf_i+0xfc>
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	f043 0320 	orr.w	r3, r3, #32
 8003ca2:	6023      	str	r3, [r4, #0]
 8003ca4:	2378      	movs	r3, #120	; 0x78
 8003ca6:	4828      	ldr	r0, [pc, #160]	; (8003d48 <_printf_i+0x248>)
 8003ca8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cac:	e7e3      	b.n	8003c76 <_printf_i+0x176>
 8003cae:	065e      	lsls	r6, r3, #25
 8003cb0:	bf48      	it	mi
 8003cb2:	b2ad      	uxthmi	r5, r5
 8003cb4:	e7e6      	b.n	8003c84 <_printf_i+0x184>
 8003cb6:	4616      	mov	r6, r2
 8003cb8:	e7bb      	b.n	8003c32 <_printf_i+0x132>
 8003cba:	680b      	ldr	r3, [r1, #0]
 8003cbc:	6826      	ldr	r6, [r4, #0]
 8003cbe:	1d1d      	adds	r5, r3, #4
 8003cc0:	6960      	ldr	r0, [r4, #20]
 8003cc2:	600d      	str	r5, [r1, #0]
 8003cc4:	0635      	lsls	r5, r6, #24
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	d501      	bpl.n	8003cce <_printf_i+0x1ce>
 8003cca:	6018      	str	r0, [r3, #0]
 8003ccc:	e002      	b.n	8003cd4 <_printf_i+0x1d4>
 8003cce:	0671      	lsls	r1, r6, #25
 8003cd0:	d5fb      	bpl.n	8003cca <_printf_i+0x1ca>
 8003cd2:	8018      	strh	r0, [r3, #0]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	4616      	mov	r6, r2
 8003cd8:	6123      	str	r3, [r4, #16]
 8003cda:	e7ba      	b.n	8003c52 <_printf_i+0x152>
 8003cdc:	680b      	ldr	r3, [r1, #0]
 8003cde:	1d1a      	adds	r2, r3, #4
 8003ce0:	600a      	str	r2, [r1, #0]
 8003ce2:	681e      	ldr	r6, [r3, #0]
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	6862      	ldr	r2, [r4, #4]
 8003cea:	f000 fa9d 	bl	8004228 <memchr>
 8003cee:	b108      	cbz	r0, 8003cf4 <_printf_i+0x1f4>
 8003cf0:	1b80      	subs	r0, r0, r6
 8003cf2:	6060      	str	r0, [r4, #4]
 8003cf4:	6863      	ldr	r3, [r4, #4]
 8003cf6:	6123      	str	r3, [r4, #16]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cfe:	e7a8      	b.n	8003c52 <_printf_i+0x152>
 8003d00:	4632      	mov	r2, r6
 8003d02:	4649      	mov	r1, r9
 8003d04:	4640      	mov	r0, r8
 8003d06:	6923      	ldr	r3, [r4, #16]
 8003d08:	47d0      	blx	sl
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	d0ab      	beq.n	8003c66 <_printf_i+0x166>
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	079b      	lsls	r3, r3, #30
 8003d12:	d413      	bmi.n	8003d3c <_printf_i+0x23c>
 8003d14:	68e0      	ldr	r0, [r4, #12]
 8003d16:	9b03      	ldr	r3, [sp, #12]
 8003d18:	4298      	cmp	r0, r3
 8003d1a:	bfb8      	it	lt
 8003d1c:	4618      	movlt	r0, r3
 8003d1e:	e7a4      	b.n	8003c6a <_printf_i+0x16a>
 8003d20:	2301      	movs	r3, #1
 8003d22:	4632      	mov	r2, r6
 8003d24:	4649      	mov	r1, r9
 8003d26:	4640      	mov	r0, r8
 8003d28:	47d0      	blx	sl
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d09b      	beq.n	8003c66 <_printf_i+0x166>
 8003d2e:	3501      	adds	r5, #1
 8003d30:	68e3      	ldr	r3, [r4, #12]
 8003d32:	9903      	ldr	r1, [sp, #12]
 8003d34:	1a5b      	subs	r3, r3, r1
 8003d36:	42ab      	cmp	r3, r5
 8003d38:	dcf2      	bgt.n	8003d20 <_printf_i+0x220>
 8003d3a:	e7eb      	b.n	8003d14 <_printf_i+0x214>
 8003d3c:	2500      	movs	r5, #0
 8003d3e:	f104 0619 	add.w	r6, r4, #25
 8003d42:	e7f5      	b.n	8003d30 <_printf_i+0x230>
 8003d44:	080044c5 	.word	0x080044c5
 8003d48:	080044d6 	.word	0x080044d6

08003d4c <_sbrk_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	2300      	movs	r3, #0
 8003d50:	4d05      	ldr	r5, [pc, #20]	; (8003d68 <_sbrk_r+0x1c>)
 8003d52:	4604      	mov	r4, r0
 8003d54:	4608      	mov	r0, r1
 8003d56:	602b      	str	r3, [r5, #0]
 8003d58:	f7fc ffa6 	bl	8000ca8 <_sbrk>
 8003d5c:	1c43      	adds	r3, r0, #1
 8003d5e:	d102      	bne.n	8003d66 <_sbrk_r+0x1a>
 8003d60:	682b      	ldr	r3, [r5, #0]
 8003d62:	b103      	cbz	r3, 8003d66 <_sbrk_r+0x1a>
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	bd38      	pop	{r3, r4, r5, pc}
 8003d68:	200001bc 	.word	0x200001bc

08003d6c <__sread>:
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	460c      	mov	r4, r1
 8003d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d74:	f000 fabe 	bl	80042f4 <_read_r>
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	bfab      	itete	ge
 8003d7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8003d80:	181b      	addge	r3, r3, r0
 8003d82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d86:	bfac      	ite	ge
 8003d88:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d8a:	81a3      	strhlt	r3, [r4, #12]
 8003d8c:	bd10      	pop	{r4, pc}

08003d8e <__swrite>:
 8003d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d92:	461f      	mov	r7, r3
 8003d94:	898b      	ldrh	r3, [r1, #12]
 8003d96:	4605      	mov	r5, r0
 8003d98:	05db      	lsls	r3, r3, #23
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	4616      	mov	r6, r2
 8003d9e:	d505      	bpl.n	8003dac <__swrite+0x1e>
 8003da0:	2302      	movs	r3, #2
 8003da2:	2200      	movs	r2, #0
 8003da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da8:	f000 f9c8 	bl	800413c <_lseek_r>
 8003dac:	89a3      	ldrh	r3, [r4, #12]
 8003dae:	4632      	mov	r2, r6
 8003db0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003db4:	81a3      	strh	r3, [r4, #12]
 8003db6:	4628      	mov	r0, r5
 8003db8:	463b      	mov	r3, r7
 8003dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc2:	f000 b869 	b.w	8003e98 <_write_r>

08003dc6 <__sseek>:
 8003dc6:	b510      	push	{r4, lr}
 8003dc8:	460c      	mov	r4, r1
 8003dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dce:	f000 f9b5 	bl	800413c <_lseek_r>
 8003dd2:	1c43      	adds	r3, r0, #1
 8003dd4:	89a3      	ldrh	r3, [r4, #12]
 8003dd6:	bf15      	itete	ne
 8003dd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003dda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003dde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003de2:	81a3      	strheq	r3, [r4, #12]
 8003de4:	bf18      	it	ne
 8003de6:	81a3      	strhne	r3, [r4, #12]
 8003de8:	bd10      	pop	{r4, pc}

08003dea <__sclose>:
 8003dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dee:	f000 b8d3 	b.w	8003f98 <_close_r>
	...

08003df4 <__swbuf_r>:
 8003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df6:	460e      	mov	r6, r1
 8003df8:	4614      	mov	r4, r2
 8003dfa:	4605      	mov	r5, r0
 8003dfc:	b118      	cbz	r0, 8003e06 <__swbuf_r+0x12>
 8003dfe:	6983      	ldr	r3, [r0, #24]
 8003e00:	b90b      	cbnz	r3, 8003e06 <__swbuf_r+0x12>
 8003e02:	f7ff fbbb 	bl	800357c <__sinit>
 8003e06:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <__swbuf_r+0x98>)
 8003e08:	429c      	cmp	r4, r3
 8003e0a:	d12b      	bne.n	8003e64 <__swbuf_r+0x70>
 8003e0c:	686c      	ldr	r4, [r5, #4]
 8003e0e:	69a3      	ldr	r3, [r4, #24]
 8003e10:	60a3      	str	r3, [r4, #8]
 8003e12:	89a3      	ldrh	r3, [r4, #12]
 8003e14:	071a      	lsls	r2, r3, #28
 8003e16:	d52f      	bpl.n	8003e78 <__swbuf_r+0x84>
 8003e18:	6923      	ldr	r3, [r4, #16]
 8003e1a:	b36b      	cbz	r3, 8003e78 <__swbuf_r+0x84>
 8003e1c:	6923      	ldr	r3, [r4, #16]
 8003e1e:	6820      	ldr	r0, [r4, #0]
 8003e20:	b2f6      	uxtb	r6, r6
 8003e22:	1ac0      	subs	r0, r0, r3
 8003e24:	6963      	ldr	r3, [r4, #20]
 8003e26:	4637      	mov	r7, r6
 8003e28:	4283      	cmp	r3, r0
 8003e2a:	dc04      	bgt.n	8003e36 <__swbuf_r+0x42>
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	4628      	mov	r0, r5
 8003e30:	f000 f948 	bl	80040c4 <_fflush_r>
 8003e34:	bb30      	cbnz	r0, 8003e84 <__swbuf_r+0x90>
 8003e36:	68a3      	ldr	r3, [r4, #8]
 8003e38:	3001      	adds	r0, #1
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	60a3      	str	r3, [r4, #8]
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	6022      	str	r2, [r4, #0]
 8003e44:	701e      	strb	r6, [r3, #0]
 8003e46:	6963      	ldr	r3, [r4, #20]
 8003e48:	4283      	cmp	r3, r0
 8003e4a:	d004      	beq.n	8003e56 <__swbuf_r+0x62>
 8003e4c:	89a3      	ldrh	r3, [r4, #12]
 8003e4e:	07db      	lsls	r3, r3, #31
 8003e50:	d506      	bpl.n	8003e60 <__swbuf_r+0x6c>
 8003e52:	2e0a      	cmp	r6, #10
 8003e54:	d104      	bne.n	8003e60 <__swbuf_r+0x6c>
 8003e56:	4621      	mov	r1, r4
 8003e58:	4628      	mov	r0, r5
 8003e5a:	f000 f933 	bl	80040c4 <_fflush_r>
 8003e5e:	b988      	cbnz	r0, 8003e84 <__swbuf_r+0x90>
 8003e60:	4638      	mov	r0, r7
 8003e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <__swbuf_r+0x9c>)
 8003e66:	429c      	cmp	r4, r3
 8003e68:	d101      	bne.n	8003e6e <__swbuf_r+0x7a>
 8003e6a:	68ac      	ldr	r4, [r5, #8]
 8003e6c:	e7cf      	b.n	8003e0e <__swbuf_r+0x1a>
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <__swbuf_r+0xa0>)
 8003e70:	429c      	cmp	r4, r3
 8003e72:	bf08      	it	eq
 8003e74:	68ec      	ldreq	r4, [r5, #12]
 8003e76:	e7ca      	b.n	8003e0e <__swbuf_r+0x1a>
 8003e78:	4621      	mov	r1, r4
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f000 f81e 	bl	8003ebc <__swsetup_r>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d0cb      	beq.n	8003e1c <__swbuf_r+0x28>
 8003e84:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003e88:	e7ea      	b.n	8003e60 <__swbuf_r+0x6c>
 8003e8a:	bf00      	nop
 8003e8c:	08004474 	.word	0x08004474
 8003e90:	08004494 	.word	0x08004494
 8003e94:	08004454 	.word	0x08004454

08003e98 <_write_r>:
 8003e98:	b538      	push	{r3, r4, r5, lr}
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	4d05      	ldr	r5, [pc, #20]	; (8003eb8 <_write_r+0x20>)
 8003ea4:	602a      	str	r2, [r5, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f7fc feb1 	bl	8000c0e <_write>
 8003eac:	1c43      	adds	r3, r0, #1
 8003eae:	d102      	bne.n	8003eb6 <_write_r+0x1e>
 8003eb0:	682b      	ldr	r3, [r5, #0]
 8003eb2:	b103      	cbz	r3, 8003eb6 <_write_r+0x1e>
 8003eb4:	6023      	str	r3, [r4, #0]
 8003eb6:	bd38      	pop	{r3, r4, r5, pc}
 8003eb8:	200001bc 	.word	0x200001bc

08003ebc <__swsetup_r>:
 8003ebc:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <__swsetup_r+0xcc>)
 8003ebe:	b570      	push	{r4, r5, r6, lr}
 8003ec0:	681d      	ldr	r5, [r3, #0]
 8003ec2:	4606      	mov	r6, r0
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	b125      	cbz	r5, 8003ed2 <__swsetup_r+0x16>
 8003ec8:	69ab      	ldr	r3, [r5, #24]
 8003eca:	b913      	cbnz	r3, 8003ed2 <__swsetup_r+0x16>
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f7ff fb55 	bl	800357c <__sinit>
 8003ed2:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <__swsetup_r+0xd0>)
 8003ed4:	429c      	cmp	r4, r3
 8003ed6:	d10f      	bne.n	8003ef8 <__swsetup_r+0x3c>
 8003ed8:	686c      	ldr	r4, [r5, #4]
 8003eda:	89a3      	ldrh	r3, [r4, #12]
 8003edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ee0:	0719      	lsls	r1, r3, #28
 8003ee2:	d42c      	bmi.n	8003f3e <__swsetup_r+0x82>
 8003ee4:	06dd      	lsls	r5, r3, #27
 8003ee6:	d411      	bmi.n	8003f0c <__swsetup_r+0x50>
 8003ee8:	2309      	movs	r3, #9
 8003eea:	6033      	str	r3, [r6, #0]
 8003eec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ef4:	81a3      	strh	r3, [r4, #12]
 8003ef6:	e03e      	b.n	8003f76 <__swsetup_r+0xba>
 8003ef8:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <__swsetup_r+0xd4>)
 8003efa:	429c      	cmp	r4, r3
 8003efc:	d101      	bne.n	8003f02 <__swsetup_r+0x46>
 8003efe:	68ac      	ldr	r4, [r5, #8]
 8003f00:	e7eb      	b.n	8003eda <__swsetup_r+0x1e>
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <__swsetup_r+0xd8>)
 8003f04:	429c      	cmp	r4, r3
 8003f06:	bf08      	it	eq
 8003f08:	68ec      	ldreq	r4, [r5, #12]
 8003f0a:	e7e6      	b.n	8003eda <__swsetup_r+0x1e>
 8003f0c:	0758      	lsls	r0, r3, #29
 8003f0e:	d512      	bpl.n	8003f36 <__swsetup_r+0x7a>
 8003f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f12:	b141      	cbz	r1, 8003f26 <__swsetup_r+0x6a>
 8003f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f18:	4299      	cmp	r1, r3
 8003f1a:	d002      	beq.n	8003f22 <__swsetup_r+0x66>
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	f000 f99d 	bl	800425c <_free_r>
 8003f22:	2300      	movs	r3, #0
 8003f24:	6363      	str	r3, [r4, #52]	; 0x34
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f2c:	81a3      	strh	r3, [r4, #12]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	6063      	str	r3, [r4, #4]
 8003f32:	6923      	ldr	r3, [r4, #16]
 8003f34:	6023      	str	r3, [r4, #0]
 8003f36:	89a3      	ldrh	r3, [r4, #12]
 8003f38:	f043 0308 	orr.w	r3, r3, #8
 8003f3c:	81a3      	strh	r3, [r4, #12]
 8003f3e:	6923      	ldr	r3, [r4, #16]
 8003f40:	b94b      	cbnz	r3, 8003f56 <__swsetup_r+0x9a>
 8003f42:	89a3      	ldrh	r3, [r4, #12]
 8003f44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4c:	d003      	beq.n	8003f56 <__swsetup_r+0x9a>
 8003f4e:	4621      	mov	r1, r4
 8003f50:	4630      	mov	r0, r6
 8003f52:	f000 f929 	bl	80041a8 <__smakebuf_r>
 8003f56:	89a0      	ldrh	r0, [r4, #12]
 8003f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f5c:	f010 0301 	ands.w	r3, r0, #1
 8003f60:	d00a      	beq.n	8003f78 <__swsetup_r+0xbc>
 8003f62:	2300      	movs	r3, #0
 8003f64:	60a3      	str	r3, [r4, #8]
 8003f66:	6963      	ldr	r3, [r4, #20]
 8003f68:	425b      	negs	r3, r3
 8003f6a:	61a3      	str	r3, [r4, #24]
 8003f6c:	6923      	ldr	r3, [r4, #16]
 8003f6e:	b943      	cbnz	r3, 8003f82 <__swsetup_r+0xc6>
 8003f70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f74:	d1ba      	bne.n	8003eec <__swsetup_r+0x30>
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	0781      	lsls	r1, r0, #30
 8003f7a:	bf58      	it	pl
 8003f7c:	6963      	ldrpl	r3, [r4, #20]
 8003f7e:	60a3      	str	r3, [r4, #8]
 8003f80:	e7f4      	b.n	8003f6c <__swsetup_r+0xb0>
 8003f82:	2000      	movs	r0, #0
 8003f84:	e7f7      	b.n	8003f76 <__swsetup_r+0xba>
 8003f86:	bf00      	nop
 8003f88:	20000010 	.word	0x20000010
 8003f8c:	08004474 	.word	0x08004474
 8003f90:	08004494 	.word	0x08004494
 8003f94:	08004454 	.word	0x08004454

08003f98 <_close_r>:
 8003f98:	b538      	push	{r3, r4, r5, lr}
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	4d05      	ldr	r5, [pc, #20]	; (8003fb4 <_close_r+0x1c>)
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	4608      	mov	r0, r1
 8003fa2:	602b      	str	r3, [r5, #0]
 8003fa4:	f7fc fe4f 	bl	8000c46 <_close>
 8003fa8:	1c43      	adds	r3, r0, #1
 8003faa:	d102      	bne.n	8003fb2 <_close_r+0x1a>
 8003fac:	682b      	ldr	r3, [r5, #0]
 8003fae:	b103      	cbz	r3, 8003fb2 <_close_r+0x1a>
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	bd38      	pop	{r3, r4, r5, pc}
 8003fb4:	200001bc 	.word	0x200001bc

08003fb8 <__sflush_r>:
 8003fb8:	898a      	ldrh	r2, [r1, #12]
 8003fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fbe:	4605      	mov	r5, r0
 8003fc0:	0710      	lsls	r0, r2, #28
 8003fc2:	460c      	mov	r4, r1
 8003fc4:	d458      	bmi.n	8004078 <__sflush_r+0xc0>
 8003fc6:	684b      	ldr	r3, [r1, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	dc05      	bgt.n	8003fd8 <__sflush_r+0x20>
 8003fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	dc02      	bgt.n	8003fd8 <__sflush_r+0x20>
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fda:	2e00      	cmp	r6, #0
 8003fdc:	d0f9      	beq.n	8003fd2 <__sflush_r+0x1a>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003fe4:	682f      	ldr	r7, [r5, #0]
 8003fe6:	602b      	str	r3, [r5, #0]
 8003fe8:	d032      	beq.n	8004050 <__sflush_r+0x98>
 8003fea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fec:	89a3      	ldrh	r3, [r4, #12]
 8003fee:	075a      	lsls	r2, r3, #29
 8003ff0:	d505      	bpl.n	8003ffe <__sflush_r+0x46>
 8003ff2:	6863      	ldr	r3, [r4, #4]
 8003ff4:	1ac0      	subs	r0, r0, r3
 8003ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ff8:	b10b      	cbz	r3, 8003ffe <__sflush_r+0x46>
 8003ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ffc:	1ac0      	subs	r0, r0, r3
 8003ffe:	2300      	movs	r3, #0
 8004000:	4602      	mov	r2, r0
 8004002:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004004:	4628      	mov	r0, r5
 8004006:	6a21      	ldr	r1, [r4, #32]
 8004008:	47b0      	blx	r6
 800400a:	1c43      	adds	r3, r0, #1
 800400c:	89a3      	ldrh	r3, [r4, #12]
 800400e:	d106      	bne.n	800401e <__sflush_r+0x66>
 8004010:	6829      	ldr	r1, [r5, #0]
 8004012:	291d      	cmp	r1, #29
 8004014:	d82c      	bhi.n	8004070 <__sflush_r+0xb8>
 8004016:	4a2a      	ldr	r2, [pc, #168]	; (80040c0 <__sflush_r+0x108>)
 8004018:	40ca      	lsrs	r2, r1
 800401a:	07d6      	lsls	r6, r2, #31
 800401c:	d528      	bpl.n	8004070 <__sflush_r+0xb8>
 800401e:	2200      	movs	r2, #0
 8004020:	6062      	str	r2, [r4, #4]
 8004022:	6922      	ldr	r2, [r4, #16]
 8004024:	04d9      	lsls	r1, r3, #19
 8004026:	6022      	str	r2, [r4, #0]
 8004028:	d504      	bpl.n	8004034 <__sflush_r+0x7c>
 800402a:	1c42      	adds	r2, r0, #1
 800402c:	d101      	bne.n	8004032 <__sflush_r+0x7a>
 800402e:	682b      	ldr	r3, [r5, #0]
 8004030:	b903      	cbnz	r3, 8004034 <__sflush_r+0x7c>
 8004032:	6560      	str	r0, [r4, #84]	; 0x54
 8004034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004036:	602f      	str	r7, [r5, #0]
 8004038:	2900      	cmp	r1, #0
 800403a:	d0ca      	beq.n	8003fd2 <__sflush_r+0x1a>
 800403c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004040:	4299      	cmp	r1, r3
 8004042:	d002      	beq.n	800404a <__sflush_r+0x92>
 8004044:	4628      	mov	r0, r5
 8004046:	f000 f909 	bl	800425c <_free_r>
 800404a:	2000      	movs	r0, #0
 800404c:	6360      	str	r0, [r4, #52]	; 0x34
 800404e:	e7c1      	b.n	8003fd4 <__sflush_r+0x1c>
 8004050:	6a21      	ldr	r1, [r4, #32]
 8004052:	2301      	movs	r3, #1
 8004054:	4628      	mov	r0, r5
 8004056:	47b0      	blx	r6
 8004058:	1c41      	adds	r1, r0, #1
 800405a:	d1c7      	bne.n	8003fec <__sflush_r+0x34>
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0c4      	beq.n	8003fec <__sflush_r+0x34>
 8004062:	2b1d      	cmp	r3, #29
 8004064:	d001      	beq.n	800406a <__sflush_r+0xb2>
 8004066:	2b16      	cmp	r3, #22
 8004068:	d101      	bne.n	800406e <__sflush_r+0xb6>
 800406a:	602f      	str	r7, [r5, #0]
 800406c:	e7b1      	b.n	8003fd2 <__sflush_r+0x1a>
 800406e:	89a3      	ldrh	r3, [r4, #12]
 8004070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004074:	81a3      	strh	r3, [r4, #12]
 8004076:	e7ad      	b.n	8003fd4 <__sflush_r+0x1c>
 8004078:	690f      	ldr	r7, [r1, #16]
 800407a:	2f00      	cmp	r7, #0
 800407c:	d0a9      	beq.n	8003fd2 <__sflush_r+0x1a>
 800407e:	0793      	lsls	r3, r2, #30
 8004080:	bf18      	it	ne
 8004082:	2300      	movne	r3, #0
 8004084:	680e      	ldr	r6, [r1, #0]
 8004086:	bf08      	it	eq
 8004088:	694b      	ldreq	r3, [r1, #20]
 800408a:	eba6 0807 	sub.w	r8, r6, r7
 800408e:	600f      	str	r7, [r1, #0]
 8004090:	608b      	str	r3, [r1, #8]
 8004092:	f1b8 0f00 	cmp.w	r8, #0
 8004096:	dd9c      	ble.n	8003fd2 <__sflush_r+0x1a>
 8004098:	4643      	mov	r3, r8
 800409a:	463a      	mov	r2, r7
 800409c:	4628      	mov	r0, r5
 800409e:	6a21      	ldr	r1, [r4, #32]
 80040a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040a2:	47b0      	blx	r6
 80040a4:	2800      	cmp	r0, #0
 80040a6:	dc06      	bgt.n	80040b6 <__sflush_r+0xfe>
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b2:	81a3      	strh	r3, [r4, #12]
 80040b4:	e78e      	b.n	8003fd4 <__sflush_r+0x1c>
 80040b6:	4407      	add	r7, r0
 80040b8:	eba8 0800 	sub.w	r8, r8, r0
 80040bc:	e7e9      	b.n	8004092 <__sflush_r+0xda>
 80040be:	bf00      	nop
 80040c0:	20400001 	.word	0x20400001

080040c4 <_fflush_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	690b      	ldr	r3, [r1, #16]
 80040c8:	4605      	mov	r5, r0
 80040ca:	460c      	mov	r4, r1
 80040cc:	b913      	cbnz	r3, 80040d4 <_fflush_r+0x10>
 80040ce:	2500      	movs	r5, #0
 80040d0:	4628      	mov	r0, r5
 80040d2:	bd38      	pop	{r3, r4, r5, pc}
 80040d4:	b118      	cbz	r0, 80040de <_fflush_r+0x1a>
 80040d6:	6983      	ldr	r3, [r0, #24]
 80040d8:	b90b      	cbnz	r3, 80040de <_fflush_r+0x1a>
 80040da:	f7ff fa4f 	bl	800357c <__sinit>
 80040de:	4b14      	ldr	r3, [pc, #80]	; (8004130 <_fflush_r+0x6c>)
 80040e0:	429c      	cmp	r4, r3
 80040e2:	d11b      	bne.n	800411c <_fflush_r+0x58>
 80040e4:	686c      	ldr	r4, [r5, #4]
 80040e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0ef      	beq.n	80040ce <_fflush_r+0xa>
 80040ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040f0:	07d0      	lsls	r0, r2, #31
 80040f2:	d404      	bmi.n	80040fe <_fflush_r+0x3a>
 80040f4:	0599      	lsls	r1, r3, #22
 80040f6:	d402      	bmi.n	80040fe <_fflush_r+0x3a>
 80040f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040fa:	f7ff fadd 	bl	80036b8 <__retarget_lock_acquire_recursive>
 80040fe:	4628      	mov	r0, r5
 8004100:	4621      	mov	r1, r4
 8004102:	f7ff ff59 	bl	8003fb8 <__sflush_r>
 8004106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004108:	4605      	mov	r5, r0
 800410a:	07da      	lsls	r2, r3, #31
 800410c:	d4e0      	bmi.n	80040d0 <_fflush_r+0xc>
 800410e:	89a3      	ldrh	r3, [r4, #12]
 8004110:	059b      	lsls	r3, r3, #22
 8004112:	d4dd      	bmi.n	80040d0 <_fflush_r+0xc>
 8004114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004116:	f7ff fad0 	bl	80036ba <__retarget_lock_release_recursive>
 800411a:	e7d9      	b.n	80040d0 <_fflush_r+0xc>
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <_fflush_r+0x70>)
 800411e:	429c      	cmp	r4, r3
 8004120:	d101      	bne.n	8004126 <_fflush_r+0x62>
 8004122:	68ac      	ldr	r4, [r5, #8]
 8004124:	e7df      	b.n	80040e6 <_fflush_r+0x22>
 8004126:	4b04      	ldr	r3, [pc, #16]	; (8004138 <_fflush_r+0x74>)
 8004128:	429c      	cmp	r4, r3
 800412a:	bf08      	it	eq
 800412c:	68ec      	ldreq	r4, [r5, #12]
 800412e:	e7da      	b.n	80040e6 <_fflush_r+0x22>
 8004130:	08004474 	.word	0x08004474
 8004134:	08004494 	.word	0x08004494
 8004138:	08004454 	.word	0x08004454

0800413c <_lseek_r>:
 800413c:	b538      	push	{r3, r4, r5, lr}
 800413e:	4604      	mov	r4, r0
 8004140:	4608      	mov	r0, r1
 8004142:	4611      	mov	r1, r2
 8004144:	2200      	movs	r2, #0
 8004146:	4d05      	ldr	r5, [pc, #20]	; (800415c <_lseek_r+0x20>)
 8004148:	602a      	str	r2, [r5, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	f7fc fd9f 	bl	8000c8e <_lseek>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_lseek_r+0x1e>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	b103      	cbz	r3, 800415a <_lseek_r+0x1e>
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	200001bc 	.word	0x200001bc

08004160 <__swhatbuf_r>:
 8004160:	b570      	push	{r4, r5, r6, lr}
 8004162:	460e      	mov	r6, r1
 8004164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004168:	4614      	mov	r4, r2
 800416a:	2900      	cmp	r1, #0
 800416c:	461d      	mov	r5, r3
 800416e:	b096      	sub	sp, #88	; 0x58
 8004170:	da07      	bge.n	8004182 <__swhatbuf_r+0x22>
 8004172:	2300      	movs	r3, #0
 8004174:	602b      	str	r3, [r5, #0]
 8004176:	89b3      	ldrh	r3, [r6, #12]
 8004178:	061a      	lsls	r2, r3, #24
 800417a:	d410      	bmi.n	800419e <__swhatbuf_r+0x3e>
 800417c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004180:	e00e      	b.n	80041a0 <__swhatbuf_r+0x40>
 8004182:	466a      	mov	r2, sp
 8004184:	f000 f8c8 	bl	8004318 <_fstat_r>
 8004188:	2800      	cmp	r0, #0
 800418a:	dbf2      	blt.n	8004172 <__swhatbuf_r+0x12>
 800418c:	9a01      	ldr	r2, [sp, #4]
 800418e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004192:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004196:	425a      	negs	r2, r3
 8004198:	415a      	adcs	r2, r3
 800419a:	602a      	str	r2, [r5, #0]
 800419c:	e7ee      	b.n	800417c <__swhatbuf_r+0x1c>
 800419e:	2340      	movs	r3, #64	; 0x40
 80041a0:	2000      	movs	r0, #0
 80041a2:	6023      	str	r3, [r4, #0]
 80041a4:	b016      	add	sp, #88	; 0x58
 80041a6:	bd70      	pop	{r4, r5, r6, pc}

080041a8 <__smakebuf_r>:
 80041a8:	898b      	ldrh	r3, [r1, #12]
 80041aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041ac:	079d      	lsls	r5, r3, #30
 80041ae:	4606      	mov	r6, r0
 80041b0:	460c      	mov	r4, r1
 80041b2:	d507      	bpl.n	80041c4 <__smakebuf_r+0x1c>
 80041b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80041b8:	6023      	str	r3, [r4, #0]
 80041ba:	6123      	str	r3, [r4, #16]
 80041bc:	2301      	movs	r3, #1
 80041be:	6163      	str	r3, [r4, #20]
 80041c0:	b002      	add	sp, #8
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
 80041c4:	466a      	mov	r2, sp
 80041c6:	ab01      	add	r3, sp, #4
 80041c8:	f7ff ffca 	bl	8004160 <__swhatbuf_r>
 80041cc:	9900      	ldr	r1, [sp, #0]
 80041ce:	4605      	mov	r5, r0
 80041d0:	4630      	mov	r0, r6
 80041d2:	f7ff fa73 	bl	80036bc <_malloc_r>
 80041d6:	b948      	cbnz	r0, 80041ec <__smakebuf_r+0x44>
 80041d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041dc:	059a      	lsls	r2, r3, #22
 80041de:	d4ef      	bmi.n	80041c0 <__smakebuf_r+0x18>
 80041e0:	f023 0303 	bic.w	r3, r3, #3
 80041e4:	f043 0302 	orr.w	r3, r3, #2
 80041e8:	81a3      	strh	r3, [r4, #12]
 80041ea:	e7e3      	b.n	80041b4 <__smakebuf_r+0xc>
 80041ec:	4b0d      	ldr	r3, [pc, #52]	; (8004224 <__smakebuf_r+0x7c>)
 80041ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	6020      	str	r0, [r4, #0]
 80041f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f8:	81a3      	strh	r3, [r4, #12]
 80041fa:	9b00      	ldr	r3, [sp, #0]
 80041fc:	6120      	str	r0, [r4, #16]
 80041fe:	6163      	str	r3, [r4, #20]
 8004200:	9b01      	ldr	r3, [sp, #4]
 8004202:	b15b      	cbz	r3, 800421c <__smakebuf_r+0x74>
 8004204:	4630      	mov	r0, r6
 8004206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800420a:	f000 f897 	bl	800433c <_isatty_r>
 800420e:	b128      	cbz	r0, 800421c <__smakebuf_r+0x74>
 8004210:	89a3      	ldrh	r3, [r4, #12]
 8004212:	f023 0303 	bic.w	r3, r3, #3
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	81a3      	strh	r3, [r4, #12]
 800421c:	89a0      	ldrh	r0, [r4, #12]
 800421e:	4305      	orrs	r5, r0
 8004220:	81a5      	strh	r5, [r4, #12]
 8004222:	e7cd      	b.n	80041c0 <__smakebuf_r+0x18>
 8004224:	08003515 	.word	0x08003515

08004228 <memchr>:
 8004228:	4603      	mov	r3, r0
 800422a:	b510      	push	{r4, lr}
 800422c:	b2c9      	uxtb	r1, r1
 800422e:	4402      	add	r2, r0
 8004230:	4293      	cmp	r3, r2
 8004232:	4618      	mov	r0, r3
 8004234:	d101      	bne.n	800423a <memchr+0x12>
 8004236:	2000      	movs	r0, #0
 8004238:	e003      	b.n	8004242 <memchr+0x1a>
 800423a:	7804      	ldrb	r4, [r0, #0]
 800423c:	3301      	adds	r3, #1
 800423e:	428c      	cmp	r4, r1
 8004240:	d1f6      	bne.n	8004230 <memchr+0x8>
 8004242:	bd10      	pop	{r4, pc}

08004244 <__malloc_lock>:
 8004244:	4801      	ldr	r0, [pc, #4]	; (800424c <__malloc_lock+0x8>)
 8004246:	f7ff ba37 	b.w	80036b8 <__retarget_lock_acquire_recursive>
 800424a:	bf00      	nop
 800424c:	200001b4 	.word	0x200001b4

08004250 <__malloc_unlock>:
 8004250:	4801      	ldr	r0, [pc, #4]	; (8004258 <__malloc_unlock+0x8>)
 8004252:	f7ff ba32 	b.w	80036ba <__retarget_lock_release_recursive>
 8004256:	bf00      	nop
 8004258:	200001b4 	.word	0x200001b4

0800425c <_free_r>:
 800425c:	b538      	push	{r3, r4, r5, lr}
 800425e:	4605      	mov	r5, r0
 8004260:	2900      	cmp	r1, #0
 8004262:	d043      	beq.n	80042ec <_free_r+0x90>
 8004264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004268:	1f0c      	subs	r4, r1, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	bfb8      	it	lt
 800426e:	18e4      	addlt	r4, r4, r3
 8004270:	f7ff ffe8 	bl	8004244 <__malloc_lock>
 8004274:	4a1e      	ldr	r2, [pc, #120]	; (80042f0 <_free_r+0x94>)
 8004276:	6813      	ldr	r3, [r2, #0]
 8004278:	4610      	mov	r0, r2
 800427a:	b933      	cbnz	r3, 800428a <_free_r+0x2e>
 800427c:	6063      	str	r3, [r4, #4]
 800427e:	6014      	str	r4, [r2, #0]
 8004280:	4628      	mov	r0, r5
 8004282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004286:	f7ff bfe3 	b.w	8004250 <__malloc_unlock>
 800428a:	42a3      	cmp	r3, r4
 800428c:	d90a      	bls.n	80042a4 <_free_r+0x48>
 800428e:	6821      	ldr	r1, [r4, #0]
 8004290:	1862      	adds	r2, r4, r1
 8004292:	4293      	cmp	r3, r2
 8004294:	bf01      	itttt	eq
 8004296:	681a      	ldreq	r2, [r3, #0]
 8004298:	685b      	ldreq	r3, [r3, #4]
 800429a:	1852      	addeq	r2, r2, r1
 800429c:	6022      	streq	r2, [r4, #0]
 800429e:	6063      	str	r3, [r4, #4]
 80042a0:	6004      	str	r4, [r0, #0]
 80042a2:	e7ed      	b.n	8004280 <_free_r+0x24>
 80042a4:	461a      	mov	r2, r3
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	b10b      	cbz	r3, 80042ae <_free_r+0x52>
 80042aa:	42a3      	cmp	r3, r4
 80042ac:	d9fa      	bls.n	80042a4 <_free_r+0x48>
 80042ae:	6811      	ldr	r1, [r2, #0]
 80042b0:	1850      	adds	r0, r2, r1
 80042b2:	42a0      	cmp	r0, r4
 80042b4:	d10b      	bne.n	80042ce <_free_r+0x72>
 80042b6:	6820      	ldr	r0, [r4, #0]
 80042b8:	4401      	add	r1, r0
 80042ba:	1850      	adds	r0, r2, r1
 80042bc:	4283      	cmp	r3, r0
 80042be:	6011      	str	r1, [r2, #0]
 80042c0:	d1de      	bne.n	8004280 <_free_r+0x24>
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	4401      	add	r1, r0
 80042c8:	6011      	str	r1, [r2, #0]
 80042ca:	6053      	str	r3, [r2, #4]
 80042cc:	e7d8      	b.n	8004280 <_free_r+0x24>
 80042ce:	d902      	bls.n	80042d6 <_free_r+0x7a>
 80042d0:	230c      	movs	r3, #12
 80042d2:	602b      	str	r3, [r5, #0]
 80042d4:	e7d4      	b.n	8004280 <_free_r+0x24>
 80042d6:	6820      	ldr	r0, [r4, #0]
 80042d8:	1821      	adds	r1, r4, r0
 80042da:	428b      	cmp	r3, r1
 80042dc:	bf01      	itttt	eq
 80042de:	6819      	ldreq	r1, [r3, #0]
 80042e0:	685b      	ldreq	r3, [r3, #4]
 80042e2:	1809      	addeq	r1, r1, r0
 80042e4:	6021      	streq	r1, [r4, #0]
 80042e6:	6063      	str	r3, [r4, #4]
 80042e8:	6054      	str	r4, [r2, #4]
 80042ea:	e7c9      	b.n	8004280 <_free_r+0x24>
 80042ec:	bd38      	pop	{r3, r4, r5, pc}
 80042ee:	bf00      	nop
 80042f0:	20000094 	.word	0x20000094

080042f4 <_read_r>:
 80042f4:	b538      	push	{r3, r4, r5, lr}
 80042f6:	4604      	mov	r4, r0
 80042f8:	4608      	mov	r0, r1
 80042fa:	4611      	mov	r1, r2
 80042fc:	2200      	movs	r2, #0
 80042fe:	4d05      	ldr	r5, [pc, #20]	; (8004314 <_read_r+0x20>)
 8004300:	602a      	str	r2, [r5, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	f7fc fc66 	bl	8000bd4 <_read>
 8004308:	1c43      	adds	r3, r0, #1
 800430a:	d102      	bne.n	8004312 <_read_r+0x1e>
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	b103      	cbz	r3, 8004312 <_read_r+0x1e>
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	bd38      	pop	{r3, r4, r5, pc}
 8004314:	200001bc 	.word	0x200001bc

08004318 <_fstat_r>:
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	2300      	movs	r3, #0
 800431c:	4d06      	ldr	r5, [pc, #24]	; (8004338 <_fstat_r+0x20>)
 800431e:	4604      	mov	r4, r0
 8004320:	4608      	mov	r0, r1
 8004322:	4611      	mov	r1, r2
 8004324:	602b      	str	r3, [r5, #0]
 8004326:	f7fc fc99 	bl	8000c5c <_fstat>
 800432a:	1c43      	adds	r3, r0, #1
 800432c:	d102      	bne.n	8004334 <_fstat_r+0x1c>
 800432e:	682b      	ldr	r3, [r5, #0]
 8004330:	b103      	cbz	r3, 8004334 <_fstat_r+0x1c>
 8004332:	6023      	str	r3, [r4, #0]
 8004334:	bd38      	pop	{r3, r4, r5, pc}
 8004336:	bf00      	nop
 8004338:	200001bc 	.word	0x200001bc

0800433c <_isatty_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	2300      	movs	r3, #0
 8004340:	4d05      	ldr	r5, [pc, #20]	; (8004358 <_isatty_r+0x1c>)
 8004342:	4604      	mov	r4, r0
 8004344:	4608      	mov	r0, r1
 8004346:	602b      	str	r3, [r5, #0]
 8004348:	f7fc fc97 	bl	8000c7a <_isatty>
 800434c:	1c43      	adds	r3, r0, #1
 800434e:	d102      	bne.n	8004356 <_isatty_r+0x1a>
 8004350:	682b      	ldr	r3, [r5, #0]
 8004352:	b103      	cbz	r3, 8004356 <_isatty_r+0x1a>
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	bd38      	pop	{r3, r4, r5, pc}
 8004358:	200001bc 	.word	0x200001bc

0800435c <_init>:
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	bf00      	nop
 8004360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004362:	bc08      	pop	{r3}
 8004364:	469e      	mov	lr, r3
 8004366:	4770      	bx	lr

08004368 <_fini>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	bf00      	nop
 800436c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436e:	bc08      	pop	{r3}
 8004370:	469e      	mov	lr, r3
 8004372:	4770      	bx	lr
