
BlinkLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045cc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800470c  0800470c  0001470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004800  08004800  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004800  08004800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004808  08004808  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004808  08004808  00014808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800480c  0800480c  0001480c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  08004880  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004880  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a4c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c67  00000000  00000000  00029ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  0002b750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e14  00000000  00000000  0002c718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000091cd  00000000  00000000  0004352c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0ff  00000000  00000000  0004c6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d87f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d0  00000000  00000000  000d884c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	080046f4 	.word	0x080046f4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	080046f4 	.word	0x080046f4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_uldivmod>:
 80009cc:	b953      	cbnz	r3, 80009e4 <__aeabi_uldivmod+0x18>
 80009ce:	b94a      	cbnz	r2, 80009e4 <__aeabi_uldivmod+0x18>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bf08      	it	eq
 80009d4:	2800      	cmpeq	r0, #0
 80009d6:	bf1c      	itt	ne
 80009d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009e0:	f000 b96e 	b.w	8000cc0 <__aeabi_idiv0>
 80009e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ec:	f000 f806 	bl	80009fc <__udivmoddi4>
 80009f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	b004      	add	sp, #16
 80009fa:	4770      	bx	lr

080009fc <__udivmoddi4>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	9e08      	ldr	r6, [sp, #32]
 8000a02:	460d      	mov	r5, r1
 8000a04:	4604      	mov	r4, r0
 8000a06:	468e      	mov	lr, r1
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f040 8083 	bne.w	8000b14 <__udivmoddi4+0x118>
 8000a0e:	428a      	cmp	r2, r1
 8000a10:	4617      	mov	r7, r2
 8000a12:	d947      	bls.n	8000aa4 <__udivmoddi4+0xa8>
 8000a14:	fab2 f382 	clz	r3, r2
 8000a18:	b14b      	cbz	r3, 8000a2e <__udivmoddi4+0x32>
 8000a1a:	f1c3 0120 	rsb	r1, r3, #32
 8000a1e:	fa05 fe03 	lsl.w	lr, r5, r3
 8000a22:	fa20 f101 	lsr.w	r1, r0, r1
 8000a26:	409f      	lsls	r7, r3
 8000a28:	ea41 0e0e 	orr.w	lr, r1, lr
 8000a2c:	409c      	lsls	r4, r3
 8000a2e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a32:	fbbe fcf8 	udiv	ip, lr, r8
 8000a36:	fa1f f987 	uxth.w	r9, r7
 8000a3a:	fb08 e21c 	mls	r2, r8, ip, lr
 8000a3e:	fb0c f009 	mul.w	r0, ip, r9
 8000a42:	0c21      	lsrs	r1, r4, #16
 8000a44:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000a48:	4290      	cmp	r0, r2
 8000a4a:	d90a      	bls.n	8000a62 <__udivmoddi4+0x66>
 8000a4c:	18ba      	adds	r2, r7, r2
 8000a4e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000a52:	f080 8118 	bcs.w	8000c86 <__udivmoddi4+0x28a>
 8000a56:	4290      	cmp	r0, r2
 8000a58:	f240 8115 	bls.w	8000c86 <__udivmoddi4+0x28a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	443a      	add	r2, r7
 8000a62:	1a12      	subs	r2, r2, r0
 8000a64:	fbb2 f0f8 	udiv	r0, r2, r8
 8000a68:	fb08 2210 	mls	r2, r8, r0, r2
 8000a6c:	fb00 f109 	mul.w	r1, r0, r9
 8000a70:	b2a4      	uxth	r4, r4
 8000a72:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a76:	42a1      	cmp	r1, r4
 8000a78:	d909      	bls.n	8000a8e <__udivmoddi4+0x92>
 8000a7a:	193c      	adds	r4, r7, r4
 8000a7c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a80:	f080 8103 	bcs.w	8000c8a <__udivmoddi4+0x28e>
 8000a84:	42a1      	cmp	r1, r4
 8000a86:	f240 8100 	bls.w	8000c8a <__udivmoddi4+0x28e>
 8000a8a:	3802      	subs	r0, #2
 8000a8c:	443c      	add	r4, r7
 8000a8e:	1a64      	subs	r4, r4, r1
 8000a90:	2100      	movs	r1, #0
 8000a92:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a96:	b11e      	cbz	r6, 8000aa0 <__udivmoddi4+0xa4>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	40dc      	lsrs	r4, r3
 8000a9c:	e9c6 4200 	strd	r4, r2, [r6]
 8000aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa4:	b902      	cbnz	r2, 8000aa8 <__udivmoddi4+0xac>
 8000aa6:	deff      	udf	#255	; 0xff
 8000aa8:	fab2 f382 	clz	r3, r2
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d14f      	bne.n	8000b50 <__udivmoddi4+0x154>
 8000ab0:	1a8d      	subs	r5, r1, r2
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ab8:	fa1f f882 	uxth.w	r8, r2
 8000abc:	fbb5 fcfe 	udiv	ip, r5, lr
 8000ac0:	fb0e 551c 	mls	r5, lr, ip, r5
 8000ac4:	fb08 f00c 	mul.w	r0, r8, ip
 8000ac8:	0c22      	lsrs	r2, r4, #16
 8000aca:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000ace:	42a8      	cmp	r0, r5
 8000ad0:	d907      	bls.n	8000ae2 <__udivmoddi4+0xe6>
 8000ad2:	197d      	adds	r5, r7, r5
 8000ad4:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000ad8:	d202      	bcs.n	8000ae0 <__udivmoddi4+0xe4>
 8000ada:	42a8      	cmp	r0, r5
 8000adc:	f200 80e9 	bhi.w	8000cb2 <__udivmoddi4+0x2b6>
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	1a2d      	subs	r5, r5, r0
 8000ae4:	fbb5 f0fe 	udiv	r0, r5, lr
 8000ae8:	fb0e 5510 	mls	r5, lr, r0, r5
 8000aec:	fb08 f800 	mul.w	r8, r8, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000af6:	45a0      	cmp	r8, r4
 8000af8:	d907      	bls.n	8000b0a <__udivmoddi4+0x10e>
 8000afa:	193c      	adds	r4, r7, r4
 8000afc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b00:	d202      	bcs.n	8000b08 <__udivmoddi4+0x10c>
 8000b02:	45a0      	cmp	r8, r4
 8000b04:	f200 80d9 	bhi.w	8000cba <__udivmoddi4+0x2be>
 8000b08:	4610      	mov	r0, r2
 8000b0a:	eba4 0408 	sub.w	r4, r4, r8
 8000b0e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b12:	e7c0      	b.n	8000a96 <__udivmoddi4+0x9a>
 8000b14:	428b      	cmp	r3, r1
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x12e>
 8000b18:	2e00      	cmp	r6, #0
 8000b1a:	f000 80b1 	beq.w	8000c80 <__udivmoddi4+0x284>
 8000b1e:	2100      	movs	r1, #0
 8000b20:	e9c6 0500 	strd	r0, r5, [r6]
 8000b24:	4608      	mov	r0, r1
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	fab3 f183 	clz	r1, r3
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d14b      	bne.n	8000bca <__udivmoddi4+0x1ce>
 8000b32:	42ab      	cmp	r3, r5
 8000b34:	d302      	bcc.n	8000b3c <__udivmoddi4+0x140>
 8000b36:	4282      	cmp	r2, r0
 8000b38:	f200 80b9 	bhi.w	8000cae <__udivmoddi4+0x2b2>
 8000b3c:	1a84      	subs	r4, r0, r2
 8000b3e:	eb65 0303 	sbc.w	r3, r5, r3
 8000b42:	2001      	movs	r0, #1
 8000b44:	469e      	mov	lr, r3
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d0aa      	beq.n	8000aa0 <__udivmoddi4+0xa4>
 8000b4a:	e9c6 4e00 	strd	r4, lr, [r6]
 8000b4e:	e7a7      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000b50:	409f      	lsls	r7, r3
 8000b52:	f1c3 0220 	rsb	r2, r3, #32
 8000b56:	40d1      	lsrs	r1, r2
 8000b58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fa1f f887 	uxth.w	r8, r7
 8000b64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b68:	fa24 f202 	lsr.w	r2, r4, r2
 8000b6c:	409d      	lsls	r5, r3
 8000b6e:	fb00 fc08 	mul.w	ip, r0, r8
 8000b72:	432a      	orrs	r2, r5
 8000b74:	0c15      	lsrs	r5, r2, #16
 8000b76:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000b7a:	45ac      	cmp	ip, r5
 8000b7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b80:	d909      	bls.n	8000b96 <__udivmoddi4+0x19a>
 8000b82:	197d      	adds	r5, r7, r5
 8000b84:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b88:	f080 808f 	bcs.w	8000caa <__udivmoddi4+0x2ae>
 8000b8c:	45ac      	cmp	ip, r5
 8000b8e:	f240 808c 	bls.w	8000caa <__udivmoddi4+0x2ae>
 8000b92:	3802      	subs	r0, #2
 8000b94:	443d      	add	r5, r7
 8000b96:	eba5 050c 	sub.w	r5, r5, ip
 8000b9a:	fbb5 f1fe 	udiv	r1, r5, lr
 8000b9e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000ba2:	fb01 f908 	mul.w	r9, r1, r8
 8000ba6:	b295      	uxth	r5, r2
 8000ba8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000bac:	45a9      	cmp	r9, r5
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x1c4>
 8000bb0:	197d      	adds	r5, r7, r5
 8000bb2:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8000bb6:	d274      	bcs.n	8000ca2 <__udivmoddi4+0x2a6>
 8000bb8:	45a9      	cmp	r9, r5
 8000bba:	d972      	bls.n	8000ca2 <__udivmoddi4+0x2a6>
 8000bbc:	3902      	subs	r1, #2
 8000bbe:	443d      	add	r5, r7
 8000bc0:	eba5 0509 	sub.w	r5, r5, r9
 8000bc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bc8:	e778      	b.n	8000abc <__udivmoddi4+0xc0>
 8000bca:	f1c1 0720 	rsb	r7, r1, #32
 8000bce:	408b      	lsls	r3, r1
 8000bd0:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bd4:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bd8:	fa25 f407 	lsr.w	r4, r5, r7
 8000bdc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000be0:	fbb4 f9fe 	udiv	r9, r4, lr
 8000be4:	fa1f f88c 	uxth.w	r8, ip
 8000be8:	fb0e 4419 	mls	r4, lr, r9, r4
 8000bec:	fa20 f307 	lsr.w	r3, r0, r7
 8000bf0:	fb09 fa08 	mul.w	sl, r9, r8
 8000bf4:	408d      	lsls	r5, r1
 8000bf6:	431d      	orrs	r5, r3
 8000bf8:	0c2b      	lsrs	r3, r5, #16
 8000bfa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bfe:	45a2      	cmp	sl, r4
 8000c00:	fa02 f201 	lsl.w	r2, r2, r1
 8000c04:	fa00 f301 	lsl.w	r3, r0, r1
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0x222>
 8000c0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c12:	d248      	bcs.n	8000ca6 <__udivmoddi4+0x2aa>
 8000c14:	45a2      	cmp	sl, r4
 8000c16:	d946      	bls.n	8000ca6 <__udivmoddi4+0x2aa>
 8000c18:	f1a9 0902 	sub.w	r9, r9, #2
 8000c1c:	4464      	add	r4, ip
 8000c1e:	eba4 040a 	sub.w	r4, r4, sl
 8000c22:	fbb4 f0fe 	udiv	r0, r4, lr
 8000c26:	fb0e 4410 	mls	r4, lr, r0, r4
 8000c2a:	fb00 fa08 	mul.w	sl, r0, r8
 8000c2e:	b2ad      	uxth	r5, r5
 8000c30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c34:	45a2      	cmp	sl, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x24e>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000c40:	d22d      	bcs.n	8000c9e <__udivmoddi4+0x2a2>
 8000c42:	45a2      	cmp	sl, r4
 8000c44:	d92b      	bls.n	8000c9e <__udivmoddi4+0x2a2>
 8000c46:	3802      	subs	r0, #2
 8000c48:	4464      	add	r4, ip
 8000c4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c52:	eba4 040a 	sub.w	r4, r4, sl
 8000c56:	454c      	cmp	r4, r9
 8000c58:	46c6      	mov	lr, r8
 8000c5a:	464d      	mov	r5, r9
 8000c5c:	d319      	bcc.n	8000c92 <__udivmoddi4+0x296>
 8000c5e:	d016      	beq.n	8000c8e <__udivmoddi4+0x292>
 8000c60:	b15e      	cbz	r6, 8000c7a <__udivmoddi4+0x27e>
 8000c62:	ebb3 020e 	subs.w	r2, r3, lr
 8000c66:	eb64 0405 	sbc.w	r4, r4, r5
 8000c6a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c72:	431f      	orrs	r7, r3
 8000c74:	40cc      	lsrs	r4, r1
 8000c76:	e9c6 7400 	strd	r7, r4, [r6]
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c80:	4631      	mov	r1, r6
 8000c82:	4630      	mov	r0, r6
 8000c84:	e70c      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000c86:	468c      	mov	ip, r1
 8000c88:	e6eb      	b.n	8000a62 <__udivmoddi4+0x66>
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	e6ff      	b.n	8000a8e <__udivmoddi4+0x92>
 8000c8e:	4543      	cmp	r3, r8
 8000c90:	d2e6      	bcs.n	8000c60 <__udivmoddi4+0x264>
 8000c92:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c96:	eb69 050c 	sbc.w	r5, r9, ip
 8000c9a:	3801      	subs	r0, #1
 8000c9c:	e7e0      	b.n	8000c60 <__udivmoddi4+0x264>
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	e7d3      	b.n	8000c4a <__udivmoddi4+0x24e>
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	e78c      	b.n	8000bc0 <__udivmoddi4+0x1c4>
 8000ca6:	4681      	mov	r9, r0
 8000ca8:	e7b9      	b.n	8000c1e <__udivmoddi4+0x222>
 8000caa:	4608      	mov	r0, r1
 8000cac:	e773      	b.n	8000b96 <__udivmoddi4+0x19a>
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e749      	b.n	8000b46 <__udivmoddi4+0x14a>
 8000cb2:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cb6:	443d      	add	r5, r7
 8000cb8:	e713      	b.n	8000ae2 <__udivmoddi4+0xe6>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	e724      	b.n	8000b0a <__udivmoddi4+0x10e>

08000cc0 <__aeabi_idiv0>:
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	0000      	movs	r0, r0
	...

08000cc8 <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Receive_IT(huart, rx_buff, 8); // Init UART Interrupt
	HAL_UART_Transmit(huart,  (uint8_t *)rx_buff, 8, 1); // ECHO
	debugPrintln(huart, (char *)rx_buff); // ECHO ver si funciona
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	// For temp sensor, but can be use to other ADC Channels
	float adc_volt = 3.3/4095*adc_value[2];
 8000cd0:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fb9d 	bl	8000414 <__aeabi_ui2d>
 8000cda:	a321      	add	r3, pc, #132	; (adr r3, 8000d60 <HAL_ADC_ConvCpltCallback+0x98>)
 8000cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce0:	f7ff fc12 	bl	8000508 <__aeabi_dmul>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4610      	mov	r0, r2
 8000cea:	4619      	mov	r1, r3
 8000cec:	f7ff fe1e 	bl	800092c <__aeabi_d2f>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60fb      	str	r3, [r7, #12]
	temp = (( adc_volt - 0.76 ) / 0.0025) + 25; // Check the convertion in the datasheet
 8000cf4:	68f8      	ldr	r0, [r7, #12]
 8000cf6:	f7ff fbaf 	bl	8000458 <__aeabi_f2d>
 8000cfa:	a31b      	add	r3, pc, #108	; (adr r3, 8000d68 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d00:	f7ff fa4a 	bl	8000198 <__aeabi_dsub>
 8000d04:	4602      	mov	r2, r0
 8000d06:	460b      	mov	r3, r1
 8000d08:	4610      	mov	r0, r2
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	a318      	add	r3, pc, #96	; (adr r3, 8000d70 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d12:	f7ff fd23 	bl	800075c <__aeabi_ddiv>
 8000d16:	4602      	mov	r2, r0
 8000d18:	460b      	mov	r3, r1
 8000d1a:	4610      	mov	r0, r2
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f04f 0200 	mov.w	r2, #0
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <HAL_ADC_ConvCpltCallback+0xb4>)
 8000d24:	f7ff fa3a 	bl	800019c <__adddf3>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f7ff fdfc 	bl	800092c <__aeabi_d2f>
 8000d34:	4603      	mov	r3, r0
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000d38:	6013      	str	r3, [r2, #0]

	//float adc_volt0 = 3.3/4095*adc_value[0]; // IN0
	printf("Lecture of adc0: %ld\n\r", adc_value[0]); // verificar si funciona
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4810      	ldr	r0, [pc, #64]	; (8000d84 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000d42:	f002 fd77 	bl	8003834 <iprintf>

	//float adc_volt1 = 3.3/4095*adc_value[1]; // IN1
	printf("Lecture of adc1: %ld\n\r", adc_value[1]);
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480e      	ldr	r0, [pc, #56]	; (8000d88 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000d4e:	f002 fd71 	bl	8003834 <iprintf>
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	f3af 8000 	nop.w
 8000d60:	e734d9b4 	.word	0xe734d9b4
 8000d64:	3f4a680c 	.word	0x3f4a680c
 8000d68:	851eb852 	.word	0x851eb852
 8000d6c:	3fe851eb 	.word	0x3fe851eb
 8000d70:	47ae147b 	.word	0x47ae147b
 8000d74:	3f647ae1 	.word	0x3f647ae1
 8000d78:	200000a4 	.word	0x200000a4
 8000d7c:	40390000 	.word	0x40390000
 8000d80:	200000a0 	.word	0x200000a0
 8000d84:	0800470c 	.word	0x0800470c
 8000d88:	08004724 	.word	0x08004724

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f000 fbbb 	bl	800150a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 f82c 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d98:	f000 f934 	bl	8001004 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d9c:	f000 f914 	bl	8000fc8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000da0:	f000 f8e8 	bl	8000f74 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000da4:	f000 f872 	bl	8000e8c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_buff, 8); // Init UART Interrupt
 8000da8:	2208      	movs	r2, #8
 8000daa:	490b      	ldr	r1, [pc, #44]	; (8000dd8 <main+0x4c>)
 8000dac:	480b      	ldr	r0, [pc, #44]	; (8000ddc <main+0x50>)
 8000dae:	f002 fb8d 	bl	80034cc <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc, adc_value, 3);
 8000db2:	2203      	movs	r2, #3
 8000db4:	490a      	ldr	r1, [pc, #40]	; (8000de0 <main+0x54>)
 8000db6:	480b      	ldr	r0, [pc, #44]	; (8000de4 <main+0x58>)
 8000db8:	f000 fd7e 	bl	80018b8 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	480a      	ldr	r0, [pc, #40]	; (8000de8 <main+0x5c>)
 8000dc0:	f001 fcc0 	bl	8002744 <HAL_GPIO_TogglePin>
	debugPrintln(&huart2, "Hello");
 8000dc4:	4909      	ldr	r1, [pc, #36]	; (8000dec <main+0x60>)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <main+0x50>)
 8000dc8:	f000 f99a 	bl	8001100 <debugPrintln>
	HAL_Delay(500);
 8000dcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd0:	f000 fc0a 	bl	80015e8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000dd4:	e7f2      	b.n	8000dbc <main+0x30>
 8000dd6:	bf00      	nop
 8000dd8:	20000098 	.word	0x20000098
 8000ddc:	200000b0 	.word	0x200000b0
 8000de0:	200000a4 	.word	0x200000a4
 8000de4:	20000134 	.word	0x20000134
 8000de8:	40020400 	.word	0x40020400
 8000dec:	0800473c 	.word	0x0800473c

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b092      	sub	sp, #72	; 0x48
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	2234      	movs	r2, #52	; 0x34
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 fd10 	bl	8003824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	463b      	mov	r3, r7
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <SystemClock_Config+0x98>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000e1a:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <SystemClock_Config+0x98>)
 8000e1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e20:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e22:	2302      	movs	r3, #2
 8000e24:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e26:	2301      	movs	r3, #1
 8000e28:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e32:	2300      	movs	r3, #0
 8000e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000e3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000e40:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fc96 	bl	8002778 <HAL_RCC_OscConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e52:	f000 f972 	bl	800113a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e56:	230f      	movs	r3, #15
 8000e58:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 ffb2 	bl	8002dd8 <HAL_RCC_ClockConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e7a:	f000 f95e 	bl	800113a <Error_Handler>
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3748      	adds	r7, #72	; 0x48
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40007000 	.word	0x40007000

08000e8c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000e9c:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000e9e:	4a34      	ldr	r2, [pc, #208]	; (8000f70 <MX_ADC_Init+0xe4>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ea2:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea8:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000ec6:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 3;
 8000eda:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000edc:	2203      	movs	r2, #3
 8000ede:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ee0:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee8:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000eea:	2210      	movs	r2, #16
 8000eec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000efc:	481b      	ldr	r0, [pc, #108]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000efe:	f000 fb95 	bl	800162c <HAL_ADC_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000f08:	f000 f917 	bl	800113a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4813      	ldr	r0, [pc, #76]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000f1e:	f000 fd6b 	bl	80019f8 <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000f28:	f000 f907 	bl	800113a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	4619      	mov	r1, r3
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000f3a:	f000 fd5d 	bl	80019f8 <HAL_ADC_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 8000f44:	f000 f8f9 	bl	800113a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_ADC_Init+0xe0>)
 8000f56:	f000 fd4f 	bl	80019f8 <HAL_ADC_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000f60:	f000 f8eb 	bl	800113a <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000134 	.word	0x20000134
 8000f70:	40012400 	.word	0x40012400

08000f74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <MX_USART2_UART_Init+0x50>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000fac:	f002 f9a8 	bl	8003300 <HAL_UART_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fb6:	f000 f8c0 	bl	800113a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200000b0 	.word	0x200000b0
 8000fc4:	40004400 	.word	0x40004400

08000fc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_DMA_Init+0x38>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <MX_DMA_Init+0x38>)
 8000fd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fd8:	61d3      	str	r3, [r2, #28]
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_DMA_Init+0x38>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	200b      	movs	r0, #11
 8000fec:	f001 f819 	bl	8002022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ff0:	200b      	movs	r0, #11
 8000ff2:	f001 f832 	bl	800205a <HAL_NVIC_EnableIRQ>

}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800

08001004 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	4b34      	ldr	r3, [pc, #208]	; (80010ec <MX_GPIO_Init+0xe8>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a33      	ldr	r2, [pc, #204]	; (80010ec <MX_GPIO_Init+0xe8>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <MX_GPIO_Init+0xe8>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <MX_GPIO_Init+0xe8>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a2d      	ldr	r2, [pc, #180]	; (80010ec <MX_GPIO_Init+0xe8>)
 8001038:	f043 0320 	orr.w	r3, r3, #32
 800103c:	61d3      	str	r3, [r2, #28]
 800103e:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <MX_GPIO_Init+0xe8>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 0320 	and.w	r3, r3, #32
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b28      	ldr	r3, [pc, #160]	; (80010ec <MX_GPIO_Init+0xe8>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a27      	ldr	r2, [pc, #156]	; (80010ec <MX_GPIO_Init+0xe8>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b25      	ldr	r3, [pc, #148]	; (80010ec <MX_GPIO_Init+0xe8>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <MX_GPIO_Init+0xe8>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4a21      	ldr	r2, [pc, #132]	; (80010ec <MX_GPIO_Init+0xe8>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	61d3      	str	r3, [r2, #28]
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <MX_GPIO_Init+0xe8>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2120      	movs	r1, #32
 800107e:	481c      	ldr	r0, [pc, #112]	; (80010f0 <MX_GPIO_Init+0xec>)
 8001080:	f001 fb48 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108a:	481a      	ldr	r0, [pc, #104]	; (80010f4 <MX_GPIO_Init+0xf0>)
 800108c:	f001 fb42 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_GPIO_Init+0xf4>)
 8001098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	4815      	ldr	r0, [pc, #84]	; (80010fc <MX_GPIO_Init+0xf8>)
 80010a6:	f001 f9a5 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010aa:	2320      	movs	r3, #32
 80010ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <MX_GPIO_Init+0xec>)
 80010c2:	f001 f997 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_GPIO_Init+0xf0>)
 80010e0:	f001 f988 	bl	80023f4 <HAL_GPIO_Init>

}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40020400 	.word	0x40020400
 80010f8:	10110000 	.word	0x10110000
 80010fc:	40020800 	.word	0x40020800

08001100 <debugPrintln>:

void debugPrint(UART_HandleTypeDef *huart, char _out[]){
	HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
}

void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 800110a:	6838      	ldr	r0, [r7, #0]
 800110c:	f7ff f838 	bl	8000180 <strlen>
 8001110:	4603      	mov	r3, r0
 8001112:	b29a      	uxth	r2, r3
 8001114:	230a      	movs	r3, #10
 8001116:	6839      	ldr	r1, [r7, #0]
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f002 f93e 	bl	800339a <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800111e:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001122:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8001124:	f107 010c 	add.w	r1, r7, #12
 8001128:	230a      	movs	r3, #10
 800112a:	2202      	movs	r2, #2
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f002 f934 	bl	800339a <HAL_UART_Transmit>
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113e:	b672      	cpsid	i
}
 8001140:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001142:	e7fe      	b.n	8001142 <Error_Handler+0x8>

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_MspInit+0x5c>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <HAL_MspInit+0x5c>)
 8001150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001154:	6253      	str	r3, [r2, #36]	; 0x24
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_MspInit+0x5c>)
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_MspInit+0x5c>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_MspInit+0x5c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6213      	str	r3, [r2, #32]
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_MspInit+0x5c>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_MspInit+0x5c>)
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <HAL_MspInit+0x5c>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	6253      	str	r3, [r2, #36]	; 0x24
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_MspInit+0x5c>)
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001192:	2007      	movs	r0, #7
 8001194:	f000 ff3a 	bl	800200c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800

080011a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a29      	ldr	r2, [pc, #164]	; (8001268 <HAL_ADC_MspInit+0xc4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d14b      	bne.n	800125e <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <HAL_ADC_MspInit+0xc8>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4a28      	ldr	r2, [pc, #160]	; (800126c <HAL_ADC_MspInit+0xc8>)
 80011cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d0:	6213      	str	r3, [r2, #32]
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <HAL_ADC_MspInit+0xc8>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b23      	ldr	r3, [pc, #140]	; (800126c <HAL_ADC_MspInit+0xc8>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a22      	ldr	r2, [pc, #136]	; (800126c <HAL_ADC_MspInit+0xc8>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_ADC_MspInit+0xc8>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011f6:	2303      	movs	r3, #3
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011fa:	2303      	movs	r3, #3
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	4819      	ldr	r0, [pc, #100]	; (8001270 <HAL_ADC_MspInit+0xcc>)
 800120a:	f001 f8f3 	bl	80023f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_ADC_MspInit+0xd0>)
 8001210:	4a19      	ldr	r2, [pc, #100]	; (8001278 <HAL_ADC_MspInit+0xd4>)
 8001212:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_ADC_MspInit+0xd0>)
 8001216:	2200      	movs	r2, #0
 8001218:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_ADC_MspInit+0xd0>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_ADC_MspInit+0xd0>)
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_ADC_MspInit+0xd0>)
 8001228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800122c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_ADC_MspInit+0xd0>)
 8001230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001234:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <HAL_ADC_MspInit+0xd0>)
 8001238:	2220      	movs	r2, #32
 800123a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_ADC_MspInit+0xd0>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001242:	480c      	ldr	r0, [pc, #48]	; (8001274 <HAL_ADC_MspInit+0xd0>)
 8001244:	f000 ff24 	bl	8002090 <HAL_DMA_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 800124e:	f7ff ff74 	bl	800113a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a07      	ldr	r2, [pc, #28]	; (8001274 <HAL_ADC_MspInit+0xd0>)
 8001256:	645a      	str	r2, [r3, #68]	; 0x44
 8001258:	4a06      	ldr	r2, [pc, #24]	; (8001274 <HAL_ADC_MspInit+0xd0>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40012400 	.word	0x40012400
 800126c:	40023800 	.word	0x40023800
 8001270:	40020000 	.word	0x40020000
 8001274:	200000f0 	.word	0x200000f0
 8001278:	40026008 	.word	0x40026008

0800127c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <HAL_UART_MspInit+0x7c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d127      	bne.n	80012ee <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_UART_MspInit+0x80>)
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	4a16      	ldr	r2, [pc, #88]	; (80012fc <HAL_UART_MspInit+0x80>)
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	6253      	str	r3, [r2, #36]	; 0x24
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_UART_MspInit+0x80>)
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_UART_MspInit+0x80>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_UART_MspInit+0x80>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_UART_MspInit+0x80>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ce:	230c      	movs	r3, #12
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012de:	2307      	movs	r3, #7
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <HAL_UART_MspInit+0x84>)
 80012ea:	f001 f883 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	; 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40004400 	.word	0x40004400
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020000 	.word	0x40020000

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <NMI_Handler+0x4>

0800130a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <HardFault_Handler+0x4>

08001310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <MemManage_Handler+0x4>

08001316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <UsageFault_Handler+0x4>

08001322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr

0800133a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr

08001346 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134a:	f000 f931 	bl	80015b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <DMA1_Channel1_IRQHandler+0x10>)
 800135a:	f000 ff6d 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200000f0 	.word	0x200000f0

08001368 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e00a      	b.n	8001390 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800137a:	f3af 8000 	nop.w
 800137e:	4601      	mov	r1, r0
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	60ba      	str	r2, [r7, #8]
 8001386:	b2ca      	uxtb	r2, r1
 8001388:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbf0      	blt.n	800137a <_read+0x12>
	}

return len;
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	e009      	b.n	80013c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	60ba      	str	r2, [r7, #8]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbf1      	blt.n	80013b4 <_write+0x12>
	}
	return len;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_close>:

int _close(int file)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001400:	605a      	str	r2, [r3, #4]
	return 0;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <_isatty>:

int _isatty(int file)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
	return 1;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
	return 0;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
	...

0800143c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001444:	4a14      	ldr	r2, [pc, #80]	; (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800146c:	f002 f9b0 	bl	80037d0 <__errno>
 8001470:	4603      	mov	r3, r0
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800147a:	e009      	b.n	8001490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <_sbrk+0x64>)
 800148c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20014000 	.word	0x20014000
 800149c:	00000400 	.word	0x00000400
 80014a0:	2000008c 	.word	0x2000008c
 80014a4:	200001a0 	.word	0x200001a0

080014a8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <SystemInit+0x14>)
 80014ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014b2:	609a      	str	r2, [r3, #8]
#endif
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014c2:	e003      	b.n	80014cc <LoopCopyDataInit>

080014c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80014c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80014c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80014ca:	3104      	adds	r1, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80014cc:	480a      	ldr	r0, [pc, #40]	; (80014f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80014d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014d4:	d3f6      	bcc.n	80014c4 <CopyDataInit>
  ldr r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014d8:	e002      	b.n	80014e0 <LoopFillZerobss>

080014da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014dc:	f842 3b04 	str.w	r3, [r2], #4

080014e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014e4:	d3f9      	bcc.n	80014da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014e6:	f7ff ffdf 	bl	80014a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ea:	f002 f977 	bl	80037dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ee:	f7ff fc4d 	bl	8000d8c <main>
  bx lr
 80014f2:	4770      	bx	lr
  ldr r3, =_sidata
 80014f4:	08004810 	.word	0x08004810
  ldr r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014fc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001500:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001504:	2000019c 	.word	0x2000019c

08001508 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC1_IRQHandler>

0800150a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001514:	2003      	movs	r0, #3
 8001516:	f000 fd79 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800151a:	2000      	movs	r0, #0
 800151c:	f000 f80e 	bl	800153c <HAL_InitTick>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	71fb      	strb	r3, [r7, #7]
 800152a:	e001      	b.n	8001530 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800152c:	f7ff fe0a 	bl	8001144 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001530:	79fb      	ldrb	r3, [r7, #7]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_InitTick+0x68>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d022      	beq.n	8001596 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_InitTick+0x6c>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <HAL_InitTick+0x68>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800155c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001560:	fbb2 f3f3 	udiv	r3, r2, r3
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fd86 	bl	8002076 <HAL_SYSTICK_Config>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10f      	bne.n	8001590 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b0f      	cmp	r3, #15
 8001574:	d809      	bhi.n	800158a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001576:	2200      	movs	r2, #0
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800157e:	f000 fd50 	bl	8002022 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_InitTick+0x70>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	e007      	b.n	800159a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e004      	b.n	800159a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e001      	b.n	800159a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000004 	.word	0x20000004

080015b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_IncTick+0x1c>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_IncTick+0x20>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4413      	add	r3, r2
 80015be:	4a03      	ldr	r2, [pc, #12]	; (80015cc <HAL_IncTick+0x1c>)
 80015c0:	6013      	str	r3, [r2, #0]
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000188 	.word	0x20000188
 80015d0:	20000008 	.word	0x20000008

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b02      	ldr	r3, [pc, #8]	; (80015e4 <HAL_GetTick+0x10>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	20000188 	.word	0x20000188

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff fff0 	bl	80015d4 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001600:	d004      	beq.n	800160c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_Delay+0x40>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4413      	add	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800160c:	bf00      	nop
 800160e:	f7ff ffe1 	bl	80015d4 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	429a      	cmp	r2, r3
 800161c:	d8f7      	bhi.n	800160e <HAL_Delay+0x26>
  {
  }
}
 800161e:	bf00      	nop
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000008 	.word	0x20000008

0800162c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08e      	sub	sp, #56	; 0x38
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e127      	b.n	800189c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	2b00      	cmp	r3, #0
 8001658:	d115      	bne.n	8001686 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001668:	4b8e      	ldr	r3, [pc, #568]	; (80018a4 <HAL_ADC_Init+0x278>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4a8d      	ldr	r2, [pc, #564]	; (80018a4 <HAL_ADC_Init+0x278>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	4b8b      	ldr	r3, [pc, #556]	; (80018a4 <HAL_ADC_Init+0x278>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff fd8f 	bl	80011a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	f040 80ff 	bne.w	8001892 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001698:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800169c:	f023 0302 	bic.w	r3, r3, #2
 80016a0:	f043 0202 	orr.w	r2, r3, #2
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80016a8:	4b7f      	ldr	r3, [pc, #508]	; (80018a8 <HAL_ADC_Init+0x27c>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	497c      	ldr	r1, [pc, #496]	; (80018a8 <HAL_ADC_Init+0x27c>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80016c2:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016ca:	4619      	mov	r1, r3
 80016cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	fa93 f3a3 	rbit	r3, r3
 80016d8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	fab3 f383 	clz	r3, r3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80016e6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80016ec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016f4:	4619      	mov	r1, r3
 80016f6:	2302      	movs	r3, #2
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fc:	fa93 f3a3 	rbit	r3, r3
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	fab3 f383 	clz	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800170e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001712:	4313      	orrs	r3, r2
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171a:	2b10      	cmp	r3, #16
 800171c:	d007      	beq.n	800172e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001726:	4313      	orrs	r3, r2
 8001728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172a:	4313      	orrs	r3, r2
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001738:	2b40      	cmp	r3, #64	; 0x40
 800173a:	d04f      	beq.n	80017dc <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001742:	4313      	orrs	r3, r2
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800174e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6912      	ldr	r2, [r2, #16]
 8001754:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001758:	d003      	beq.n	8001762 <HAL_ADC_Init+0x136>
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6912      	ldr	r2, [r2, #16]
 800175e:	2a01      	cmp	r2, #1
 8001760:	d102      	bne.n	8001768 <HAL_ADC_Init+0x13c>
 8001762:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001766:	e000      	b.n	800176a <HAL_ADC_Init+0x13e>
 8001768:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800176a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800176c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800176e:	4313      	orrs	r3, r2
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001778:	2b01      	cmp	r3, #1
 800177a:	d125      	bne.n	80017c8 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001782:	2b00      	cmp	r3, #0
 8001784:	d114      	bne.n	80017b0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	3b01      	subs	r3, #1
 800178c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001790:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	fa92 f2a2 	rbit	r2, r2
 8001798:	617a      	str	r2, [r7, #20]
  return result;
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	fab2 f282 	clz	r2, r2
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	4093      	lsls	r3, r2
 80017a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017aa:	4313      	orrs	r3, r2
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
 80017ae:	e00b      	b.n	80017c8 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b4:	f043 0220 	orr.w	r2, r3, #32
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c0:	f043 0201 	orr.w	r2, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	4b37      	ldr	r3, [pc, #220]	; (80018ac <HAL_ADC_Init+0x280>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017d8:	430b      	orrs	r3, r1
 80017da:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <HAL_ADC_Init+0x284>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017ec:	430b      	orrs	r3, r1
 80017ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017f8:	d003      	beq.n	8001802 <HAL_ADC_Init+0x1d6>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d119      	bne.n	8001836 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	3b01      	subs	r3, #1
 8001812:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001816:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	fa92 f2a2 	rbit	r2, r2
 800181e:	60fa      	str	r2, [r7, #12]
  return result;
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	fab2 f282 	clz	r2, r2
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	fa03 f202 	lsl.w	r2, r3, r2
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
 8001834:	e007      	b.n	8001846 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001844:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_ADC_Init+0x288>)
 800184e:	4013      	ands	r3, r2
 8001850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001852:	429a      	cmp	r2, r3
 8001854:	d10b      	bne.n	800186e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001860:	f023 0303 	bic.w	r3, r3, #3
 8001864:	f043 0201 	orr.w	r2, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	64da      	str	r2, [r3, #76]	; 0x4c
 800186c:	e014      	b.n	8001898 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	f023 0312 	bic.w	r3, r3, #18
 8001876:	f043 0210 	orr.w	r2, r3, #16
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001882:	f043 0201 	orr.w	r2, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001890:	e002      	b.n	8001898 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001898:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800189c:	4618      	mov	r0, r3
 800189e:	3738      	adds	r7, #56	; 0x38
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40012700 	.word	0x40012700
 80018ac:	fcfc16ff 	.word	0xfcfc16ff
 80018b0:	c0fff189 	.word	0xc0fff189
 80018b4:	bf80fffe 	.word	0xbf80fffe

080018b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_Start_DMA+0x1e>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e074      	b.n	80019c0 <HAL_ADC_Start_DMA+0x108>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 f9f6 	bl	8001cd0 <ADC_Enable>
 80018e4:	4603      	mov	r3, r0
 80018e6:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d167      	bne.n	80019be <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190c:	2b00      	cmp	r3, #0
 800190e:	d007      	beq.n	8001920 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001914:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001918:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800192c:	d106      	bne.n	800193c <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001932:	f023 0206 	bic.w	r2, r3, #6
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	651a      	str	r2, [r3, #80]	; 0x50
 800193a:	e002      	b.n	8001942 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a1e      	ldr	r2, [pc, #120]	; (80019c8 <HAL_ADC_Start_DMA+0x110>)
 8001950:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a1d      	ldr	r2, [pc, #116]	; (80019cc <HAL_ADC_Start_DMA+0x114>)
 8001958:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	4a1c      	ldr	r2, [pc, #112]	; (80019d0 <HAL_ADC_Start_DMA+0x118>)
 8001960:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800196a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800197a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800198a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3358      	adds	r3, #88	; 0x58
 8001996:	4619      	mov	r1, r3
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f000 fbec 	bl	8002178 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d107      	bne.n	80019be <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019bc:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019be:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	08001d7d 	.word	0x08001d7d
 80019cc:	08001e25 	.word	0x08001e25
 80019d0:	08001e41 	.word	0x08001e41

080019d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x20>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e14f      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x2c0>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b06      	cmp	r3, #6
 8001a26:	d81c      	bhi.n	8001a62 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	3b05      	subs	r3, #5
 8001a3a:	221f      	movs	r2, #31
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4019      	ands	r1, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	3b05      	subs	r3, #5
 8001a54:	fa00 f203 	lsl.w	r2, r0, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
 8001a60:	e07e      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b0c      	cmp	r3, #12
 8001a68:	d81c      	bhi.n	8001aa4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	3b23      	subs	r3, #35	; 0x23
 8001a7c:	221f      	movs	r2, #31
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	4019      	ands	r1, r3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	3b23      	subs	r3, #35	; 0x23
 8001a96:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001aa2:	e05d      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b12      	cmp	r3, #18
 8001aaa:	d81c      	bhi.n	8001ae6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	3b41      	subs	r3, #65	; 0x41
 8001abe:	221f      	movs	r2, #31
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	4019      	ands	r1, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3b41      	subs	r3, #65	; 0x41
 8001ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	639a      	str	r2, [r3, #56]	; 0x38
 8001ae4:	e03c      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b18      	cmp	r3, #24
 8001aec:	d81c      	bhi.n	8001b28 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	3b5f      	subs	r3, #95	; 0x5f
 8001b00:	221f      	movs	r2, #31
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	4019      	ands	r1, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	3b5f      	subs	r3, #95	; 0x5f
 8001b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	635a      	str	r2, [r3, #52]	; 0x34
 8001b26:	e01b      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b7d      	subs	r3, #125	; 0x7d
 8001b3a:	221f      	movs	r2, #31
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	4019      	ands	r1, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	3b7d      	subs	r3, #125	; 0x7d
 8001b54:	fa00 f203 	lsl.w	r2, r0, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	d81a      	bhi.n	8001b9e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6959      	ldr	r1, [r3, #20]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	2207      	movs	r2, #7
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	4019      	ands	r1, r3
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	6898      	ldr	r0, [r3, #8]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	fa00 f203 	lsl.w	r2, r0, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	615a      	str	r2, [r3, #20]
 8001b9c:	e05d      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b13      	cmp	r3, #19
 8001ba4:	d81c      	bhi.n	8001be0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6919      	ldr	r1, [r3, #16]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3b1e      	subs	r3, #30
 8001bb8:	2207      	movs	r2, #7
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	4019      	ands	r1, r3
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	6898      	ldr	r0, [r3, #8]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	3b1e      	subs	r3, #30
 8001bd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	611a      	str	r2, [r3, #16]
 8001bde:	e03c      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b1d      	cmp	r3, #29
 8001be6:	d81c      	bhi.n	8001c22 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68d9      	ldr	r1, [r3, #12]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b3c      	subs	r3, #60	; 0x3c
 8001bfa:	2207      	movs	r2, #7
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4019      	ands	r1, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	6898      	ldr	r0, [r3, #8]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	3b3c      	subs	r3, #60	; 0x3c
 8001c14:	fa00 f203 	lsl.w	r2, r0, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	e01b      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	3b5a      	subs	r3, #90	; 0x5a
 8001c34:	2207      	movs	r2, #7
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	4019      	ands	r1, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6898      	ldr	r0, [r3, #8]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3b5a      	subs	r3, #90	; 0x5a
 8001c4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b10      	cmp	r3, #16
 8001c60:	d003      	beq.n	8001c6a <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c66:	2b11      	cmp	r3, #17
 8001c68:	d121      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_ADC_ConfigChannel+0x2cc>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d11b      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_ADC_ConfigChannel+0x2cc>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <HAL_ADC_ConfigChannel+0x2cc>)
 8001c7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c80:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b10      	cmp	r3, #16
 8001c88:	d111      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_ADC_ConfigChannel+0x2d0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ccc <HAL_ADC_ConfigChannel+0x2d4>)
 8001c90:	fba2 2303 	umull	r2, r3, r2, r3
 8001c94:	0c9a      	lsrs	r2, r3, #18
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001ca0:	e002      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f9      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40012700 	.word	0x40012700
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	431bde83 	.word	0x431bde83

08001cd0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cea:	2b40      	cmp	r3, #64	; 0x40
 8001cec:	d03c      	beq.n	8001d68 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <ADC_Enable+0xa4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1d      	ldr	r2, [pc, #116]	; (8001d78 <ADC_Enable+0xa8>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	0c9a      	lsrs	r2, r3, #18
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001d12:	e002      	b.n	8001d1a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f9      	bne.n	8001d14 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001d20:	f7ff fc58 	bl	80015d4 <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d26:	e018      	b.n	8001d5a <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001d28:	f7ff fc54 	bl	80015d4 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d911      	bls.n	8001d5a <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	f043 0210 	orr.w	r2, r3, #16
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e007      	b.n	8001d6a <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d64:	2b40      	cmp	r3, #64	; 0x40
 8001d66:	d1df      	bne.n	8001d28 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000
 8001d78:	431bde83 	.word	0x431bde83

08001d7c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d13d      	bne.n	8001e12 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d12c      	bne.n	8001e0a <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d127      	bne.n	8001e0a <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d006      	beq.n	8001dd6 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d119      	bne.n	8001e0a <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0220 	bic.w	r2, r2, #32
 8001de4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d105      	bne.n	8001e0a <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f7fe ff5c 	bl	8000cc8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e10:	e004      	b.n	8001e1c <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	4798      	blx	r3
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f7ff fdce 	bl	80019d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5e:	f043 0204 	orr.w	r2, r3, #4
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f7ff fdbd 	bl	80019e6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db0b      	blt.n	8001f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	4906      	ldr	r1, [pc, #24]	; (8001f0c <__NVIC_EnableIRQ+0x34>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	2001      	movs	r0, #1
 8001efa:	fa00 f202 	lsl.w	r2, r0, r2
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100

08001f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	db0a      	blt.n	8001f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	490c      	ldr	r1, [pc, #48]	; (8001f5c <__NVIC_SetPriority+0x4c>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	0112      	lsls	r2, r2, #4
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	440b      	add	r3, r1
 8001f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f38:	e00a      	b.n	8001f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4908      	ldr	r1, [pc, #32]	; (8001f60 <__NVIC_SetPriority+0x50>)
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	3b04      	subs	r3, #4
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	761a      	strb	r2, [r3, #24]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	; 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f1c3 0307 	rsb	r3, r3, #7
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	bf28      	it	cs
 8001f82:	2304      	movcs	r3, #4
 8001f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d902      	bls.n	8001f94 <NVIC_EncodePriority+0x30>
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3b03      	subs	r3, #3
 8001f92:	e000      	b.n	8001f96 <NVIC_EncodePriority+0x32>
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	43d9      	mvns	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	4313      	orrs	r3, r2
         );
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3724      	adds	r7, #36	; 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fec:	f7ff ff90 	bl	8001f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff2d 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff42 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff90 	bl	8001f64 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5f 	bl	8001f10 <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff35 	bl	8001ed8 <__NVIC_EnableIRQ>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffa2 	bl	8001fc8 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e059      	b.n	8002156 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_DMA_Init+0xd0>)
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d80f      	bhi.n	80020ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <HAL_DMA_Init+0xd4>)
 80020b6:	4413      	add	r3, r2
 80020b8:	4a2b      	ldr	r2, [pc, #172]	; (8002168 <HAL_DMA_Init+0xd8>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	009a      	lsls	r2, r3, #2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a28      	ldr	r2, [pc, #160]	; (800216c <HAL_DMA_Init+0xdc>)
 80020ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80020cc:	e00e      	b.n	80020ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b26      	ldr	r3, [pc, #152]	; (8002170 <HAL_DMA_Init+0xe0>)
 80020d6:	4413      	add	r3, r2
 80020d8:	4a23      	ldr	r2, [pc, #140]	; (8002168 <HAL_DMA_Init+0xd8>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	009a      	lsls	r2, r3, #2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a22      	ldr	r2, [pc, #136]	; (8002174 <HAL_DMA_Init+0xe4>)
 80020ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002106:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002110:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002128:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	40026407 	.word	0x40026407
 8002164:	bffd9ff8 	.word	0xbffd9ff8
 8002168:	cccccccd 	.word	0xcccccccd
 800216c:	40026000 	.word	0x40026000
 8002170:	bffd9bf8 	.word	0xbffd9bf8
 8002174:	40026400 	.word	0x40026400

08002178 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_DMA_Start_IT+0x20>
 8002194:	2302      	movs	r3, #2
 8002196:	e04b      	b.n	8002230 <HAL_DMA_Start_IT+0xb8>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d13a      	bne.n	8002222 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0201 	bic.w	r2, r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 f8e0 	bl	8002396 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d008      	beq.n	80021f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 020e 	orr.w	r2, r2, #14
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	e00f      	b.n	8002210 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0204 	bic.w	r2, r2, #4
 80021fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 020a 	orr.w	r2, r2, #10
 800220e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e005      	b.n	800222e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800222a:	2302      	movs	r3, #2
 800222c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800222e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f003 031c 	and.w	r3, r3, #28
 8002258:	2204      	movs	r2, #4
 800225a:	409a      	lsls	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d026      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x7a>
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d021      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d107      	bne.n	800228c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0204 	bic.w	r2, r2, #4
 800228a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f003 021c 	and.w	r2, r3, #28
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002298:	2104      	movs	r1, #4
 800229a:	fa01 f202 	lsl.w	r2, r1, r2
 800229e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d071      	beq.n	800238c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022b0:	e06c      	b.n	800238c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f003 031c 	and.w	r3, r3, #28
 80022ba:	2202      	movs	r2, #2
 80022bc:	409a      	lsls	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d02e      	beq.n	8002324 <HAL_DMA_IRQHandler+0xec>
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d029      	beq.n	8002324 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10b      	bne.n	80022f6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 020a 	bic.w	r2, r2, #10
 80022ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 021c 	and.w	r2, r3, #28
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002302:	2102      	movs	r1, #2
 8002304:	fa01 f202 	lsl.w	r2, r1, r2
 8002308:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	2b00      	cmp	r3, #0
 8002318:	d038      	beq.n	800238c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002322:	e033      	b.n	800238c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	f003 031c 	and.w	r3, r3, #28
 800232c:	2208      	movs	r2, #8
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d02a      	beq.n	800238e <HAL_DMA_IRQHandler+0x156>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d025      	beq.n	800238e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 020e 	bic.w	r2, r2, #14
 8002350:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 021c 	and.w	r2, r3, #28
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235e:	2101      	movs	r1, #1
 8002360:	fa01 f202 	lsl.w	r2, r1, r2
 8002364:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800238c:	bf00      	nop
 800238e:	bf00      	nop
}
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002396:	b480      	push	{r7}
 8002398:	b085      	sub	sp, #20
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f003 021c 	and.w	r2, r3, #28
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b0:	2101      	movs	r1, #1
 80023b2:	fa01 f202 	lsl.w	r2, r1, r2
 80023b6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	d108      	bne.n	80023da <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023d8:	e007      	b.n	80023ea <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	60da      	str	r2, [r3, #12]
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800240a:	e160      	b.n	80026ce <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	4013      	ands	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8152 	beq.w	80026c8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d00b      	beq.n	8002444 <HAL_GPIO_Init+0x50>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d007      	beq.n	8002444 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002438:	2b11      	cmp	r3, #17
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b12      	cmp	r3, #18
 8002442:	d130      	bne.n	80024a6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800247a:	2201      	movs	r2, #1
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	f003 0201 	and.w	r2, r3, #1
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0xf2>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b12      	cmp	r3, #18
 80024e4:	d123      	bne.n	800252e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	08da      	lsrs	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3208      	adds	r2, #8
 80024ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	220f      	movs	r2, #15
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	08da      	lsrs	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3208      	adds	r2, #8
 8002528:	6939      	ldr	r1, [r7, #16]
 800252a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2203      	movs	r2, #3
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0203 	and.w	r2, r3, #3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 80ac 	beq.w	80026c8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002570:	4b5e      	ldr	r3, [pc, #376]	; (80026ec <HAL_GPIO_Init+0x2f8>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a5d      	ldr	r2, [pc, #372]	; (80026ec <HAL_GPIO_Init+0x2f8>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <HAL_GPIO_Init+0x2f8>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002588:	4a59      	ldr	r2, [pc, #356]	; (80026f0 <HAL_GPIO_Init+0x2fc>)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	3302      	adds	r3, #2
 8002590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002594:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	220f      	movs	r2, #15
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a51      	ldr	r2, [pc, #324]	; (80026f4 <HAL_GPIO_Init+0x300>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d025      	beq.n	8002600 <HAL_GPIO_Init+0x20c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a50      	ldr	r2, [pc, #320]	; (80026f8 <HAL_GPIO_Init+0x304>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d01f      	beq.n	80025fc <HAL_GPIO_Init+0x208>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a4f      	ldr	r2, [pc, #316]	; (80026fc <HAL_GPIO_Init+0x308>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d019      	beq.n	80025f8 <HAL_GPIO_Init+0x204>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a4e      	ldr	r2, [pc, #312]	; (8002700 <HAL_GPIO_Init+0x30c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d013      	beq.n	80025f4 <HAL_GPIO_Init+0x200>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a4d      	ldr	r2, [pc, #308]	; (8002704 <HAL_GPIO_Init+0x310>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00d      	beq.n	80025f0 <HAL_GPIO_Init+0x1fc>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a4c      	ldr	r2, [pc, #304]	; (8002708 <HAL_GPIO_Init+0x314>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d007      	beq.n	80025ec <HAL_GPIO_Init+0x1f8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a4b      	ldr	r2, [pc, #300]	; (800270c <HAL_GPIO_Init+0x318>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d101      	bne.n	80025e8 <HAL_GPIO_Init+0x1f4>
 80025e4:	2306      	movs	r3, #6
 80025e6:	e00c      	b.n	8002602 <HAL_GPIO_Init+0x20e>
 80025e8:	2307      	movs	r3, #7
 80025ea:	e00a      	b.n	8002602 <HAL_GPIO_Init+0x20e>
 80025ec:	2305      	movs	r3, #5
 80025ee:	e008      	b.n	8002602 <HAL_GPIO_Init+0x20e>
 80025f0:	2304      	movs	r3, #4
 80025f2:	e006      	b.n	8002602 <HAL_GPIO_Init+0x20e>
 80025f4:	2303      	movs	r3, #3
 80025f6:	e004      	b.n	8002602 <HAL_GPIO_Init+0x20e>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e002      	b.n	8002602 <HAL_GPIO_Init+0x20e>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_GPIO_Init+0x20e>
 8002600:	2300      	movs	r3, #0
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	f002 0203 	and.w	r2, r2, #3
 8002608:	0092      	lsls	r2, r2, #2
 800260a:	4093      	lsls	r3, r2
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002612:	4937      	ldr	r1, [pc, #220]	; (80026f0 <HAL_GPIO_Init+0x2fc>)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	3302      	adds	r3, #2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002620:	4b3b      	ldr	r3, [pc, #236]	; (8002710 <HAL_GPIO_Init+0x31c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	43db      	mvns	r3, r3
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002644:	4a32      	ldr	r2, [pc, #200]	; (8002710 <HAL_GPIO_Init+0x31c>)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800264a:	4b31      	ldr	r3, [pc, #196]	; (8002710 <HAL_GPIO_Init+0x31c>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	43db      	mvns	r3, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4013      	ands	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800266e:	4a28      	ldr	r2, [pc, #160]	; (8002710 <HAL_GPIO_Init+0x31c>)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002674:	4b26      	ldr	r3, [pc, #152]	; (8002710 <HAL_GPIO_Init+0x31c>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002698:	4a1d      	ldr	r2, [pc, #116]	; (8002710 <HAL_GPIO_Init+0x31c>)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_GPIO_Init+0x31c>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026c2:	4a13      	ldr	r2, [pc, #76]	; (8002710 <HAL_GPIO_Init+0x31c>)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	3301      	adds	r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	fa22 f303 	lsr.w	r3, r2, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f47f ae97 	bne.w	800240c <HAL_GPIO_Init+0x18>
  }
}
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	371c      	adds	r7, #28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40010000 	.word	0x40010000
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40020400 	.word	0x40020400
 80026fc:	40020800 	.word	0x40020800
 8002700:	40020c00 	.word	0x40020c00
 8002704:	40021000 	.word	0x40021000
 8002708:	40021400 	.word	0x40021400
 800270c:	40021800 	.word	0x40021800
 8002710:	40010400 	.word	0x40010400

08002714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
 8002720:	4613      	mov	r3, r2
 8002722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002724:	787b      	ldrb	r3, [r7, #1]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800272a:	887a      	ldrh	r2, [r7, #2]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002730:	e003      	b.n	800273a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002732:	887b      	ldrh	r3, [r7, #2]
 8002734:	041a      	lsls	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	619a      	str	r2, [r3, #24]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002756:	887a      	ldrh	r2, [r7, #2]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4013      	ands	r3, r2
 800275c:	041a      	lsls	r2, r3, #16
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	43d9      	mvns	r1, r3
 8002762:	887b      	ldrh	r3, [r7, #2]
 8002764:	400b      	ands	r3, r1
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	619a      	str	r2, [r3, #24]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
	...

08002778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e31d      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800278a:	4b94      	ldr	r3, [pc, #592]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002794:	4b91      	ldr	r3, [pc, #580]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d07b      	beq.n	80028a2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d006      	beq.n	80027be <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b0c      	cmp	r3, #12
 80027b4:	d10f      	bne.n	80027d6 <HAL_RCC_OscConfig+0x5e>
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027bc:	d10b      	bne.n	80027d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027be:	4b87      	ldr	r3, [pc, #540]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d06a      	beq.n	80028a0 <HAL_RCC_OscConfig+0x128>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d166      	bne.n	80028a0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e2f7      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d106      	bne.n	80027ec <HAL_RCC_OscConfig+0x74>
 80027de:	4b7f      	ldr	r3, [pc, #508]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a7e      	ldr	r2, [pc, #504]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 80027e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	e02d      	b.n	8002848 <HAL_RCC_OscConfig+0xd0>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10c      	bne.n	800280e <HAL_RCC_OscConfig+0x96>
 80027f4:	4b79      	ldr	r3, [pc, #484]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a78      	ldr	r2, [pc, #480]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 80027fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b76      	ldr	r3, [pc, #472]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a75      	ldr	r2, [pc, #468]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 8002806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	e01c      	b.n	8002848 <HAL_RCC_OscConfig+0xd0>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b05      	cmp	r3, #5
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0xb8>
 8002816:	4b71      	ldr	r3, [pc, #452]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a70      	ldr	r2, [pc, #448]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 800281c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	4b6e      	ldr	r3, [pc, #440]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6d      	ldr	r2, [pc, #436]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 8002828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e00b      	b.n	8002848 <HAL_RCC_OscConfig+0xd0>
 8002830:	4b6a      	ldr	r3, [pc, #424]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a69      	ldr	r2, [pc, #420]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 8002836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	4b67      	ldr	r3, [pc, #412]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a66      	ldr	r2, [pc, #408]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 8002842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d013      	beq.n	8002878 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe fec0 	bl	80015d4 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002858:	f7fe febc 	bl	80015d4 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	; 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e2ad      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800286a:	4b5c      	ldr	r3, [pc, #368]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0xe0>
 8002876:	e014      	b.n	80028a2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7fe feac 	bl	80015d4 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002880:	f7fe fea8 	bl	80015d4 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	; 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e299      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002892:	4b52      	ldr	r3, [pc, #328]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x108>
 800289e:	e000      	b.n	80028a2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d05a      	beq.n	8002964 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	d119      	bne.n	80028ee <HAL_RCC_OscConfig+0x176>
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d116      	bne.n	80028ee <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c0:	4b46      	ldr	r3, [pc, #280]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_OscConfig+0x160>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e276      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d8:	4b40      	ldr	r3, [pc, #256]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	493d      	ldr	r1, [pc, #244]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ec:	e03a      	b.n	8002964 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d020      	beq.n	8002938 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f6:	4b3a      	ldr	r3, [pc, #232]	; (80029e0 <HAL_RCC_OscConfig+0x268>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7fe fe6a 	bl	80015d4 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002904:	f7fe fe66 	bl	80015d4 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e257      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002916:	4b31      	ldr	r3, [pc, #196]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002922:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	492a      	ldr	r1, [pc, #168]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 8002932:	4313      	orrs	r3, r2
 8002934:	604b      	str	r3, [r1, #4]
 8002936:	e015      	b.n	8002964 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002938:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <HAL_RCC_OscConfig+0x268>)
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7fe fe49 	bl	80015d4 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002946:	f7fe fe45 	bl	80015d4 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e236      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002958:	4b20      	ldr	r3, [pc, #128]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f0      	bne.n	8002946 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80b8 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d170      	bne.n	8002a5a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002978:	4b18      	ldr	r3, [pc, #96]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_OscConfig+0x218>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e21a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1a      	ldr	r2, [r3, #32]
 8002994:	4b11      	ldr	r3, [pc, #68]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800299c:	429a      	cmp	r2, r3
 800299e:	d921      	bls.n	80029e4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fc4b 	bl	8003240 <RCC_SetFlashLatencyFromMSIRange>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e208      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	061b      	lsls	r3, r3, #24
 80029d4:	4901      	ldr	r1, [pc, #4]	; (80029dc <HAL_RCC_OscConfig+0x264>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
 80029da:	e020      	b.n	8002a1e <HAL_RCC_OscConfig+0x2a6>
 80029dc:	40023800 	.word	0x40023800
 80029e0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e4:	4ba4      	ldr	r3, [pc, #656]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	49a1      	ldr	r1, [pc, #644]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f6:	4ba0      	ldr	r3, [pc, #640]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	061b      	lsls	r3, r3, #24
 8002a04:	499c      	ldr	r1, [pc, #624]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fc16 	bl	8003240 <RCC_SetFlashLatencyFromMSIRange>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e1d3      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	0b5b      	lsrs	r3, r3, #13
 8002a24:	3301      	adds	r3, #1
 8002a26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002a2e:	4a92      	ldr	r2, [pc, #584]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002a30:	6892      	ldr	r2, [r2, #8]
 8002a32:	0912      	lsrs	r2, r2, #4
 8002a34:	f002 020f 	and.w	r2, r2, #15
 8002a38:	4990      	ldr	r1, [pc, #576]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002a3a:	5c8a      	ldrb	r2, [r1, r2]
 8002a3c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a3e:	4a90      	ldr	r2, [pc, #576]	; (8002c80 <HAL_RCC_OscConfig+0x508>)
 8002a40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a42:	4b90      	ldr	r3, [pc, #576]	; (8002c84 <HAL_RCC_OscConfig+0x50c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fd78 	bl	800153c <HAL_InitTick>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d045      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	e1b5      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d029      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a62:	4b89      	ldr	r3, [pc, #548]	; (8002c88 <HAL_RCC_OscConfig+0x510>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7fe fdb4 	bl	80015d4 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a70:	f7fe fdb0 	bl	80015d4 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e1a1      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a82:	4b7d      	ldr	r3, [pc, #500]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a8e:	4b7a      	ldr	r3, [pc, #488]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4977      	ldr	r1, [pc, #476]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa0:	4b75      	ldr	r3, [pc, #468]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	4972      	ldr	r1, [pc, #456]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
 8002ab4:	e015      	b.n	8002ae2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ab6:	4b74      	ldr	r3, [pc, #464]	; (8002c88 <HAL_RCC_OscConfig+0x510>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe fd8a 	bl	80015d4 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ac4:	f7fe fd86 	bl	80015d4 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e177      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ad6:	4b68      	ldr	r3, [pc, #416]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d030      	beq.n	8002b50 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d016      	beq.n	8002b24 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af6:	4b65      	ldr	r3, [pc, #404]	; (8002c8c <HAL_RCC_OscConfig+0x514>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afc:	f7fe fd6a 	bl	80015d4 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b04:	f7fe fd66 	bl	80015d4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e157      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b16:	4b58      	ldr	r3, [pc, #352]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x38c>
 8002b22:	e015      	b.n	8002b50 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_OscConfig+0x514>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2a:	f7fe fd53 	bl	80015d4 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b32:	f7fe fd4f 	bl	80015d4 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e140      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b44:	4b4c      	ldr	r3, [pc, #304]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f0      	bne.n	8002b32 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80b5 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b62:	4b45      	ldr	r3, [pc, #276]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10d      	bne.n	8002b8a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6e:	4b42      	ldr	r3, [pc, #264]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	4a41      	ldr	r2, [pc, #260]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b78:	6253      	str	r3, [r2, #36]	; 0x24
 8002b7a:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b86:	2301      	movs	r3, #1
 8002b88:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <HAL_RCC_OscConfig+0x518>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d118      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b96:	4b3e      	ldr	r3, [pc, #248]	; (8002c90 <HAL_RCC_OscConfig+0x518>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a3d      	ldr	r2, [pc, #244]	; (8002c90 <HAL_RCC_OscConfig+0x518>)
 8002b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fd17 	bl	80015d4 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002baa:	f7fe fd13 	bl	80015d4 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b64      	cmp	r3, #100	; 0x64
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e104      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <HAL_RCC_OscConfig+0x518>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d106      	bne.n	8002bde <HAL_RCC_OscConfig+0x466>
 8002bd0:	4b29      	ldr	r3, [pc, #164]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd4:	4a28      	ldr	r2, [pc, #160]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bda:	6353      	str	r3, [r2, #52]	; 0x34
 8002bdc:	e02d      	b.n	8002c3a <HAL_RCC_OscConfig+0x4c2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x488>
 8002be6:	4b24      	ldr	r3, [pc, #144]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bea:	4a23      	ldr	r2, [pc, #140]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bf0:	6353      	str	r3, [r2, #52]	; 0x34
 8002bf2:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf6:	4a20      	ldr	r2, [pc, #128]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002bf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bfc:	6353      	str	r3, [r2, #52]	; 0x34
 8002bfe:	e01c      	b.n	8002c3a <HAL_RCC_OscConfig+0x4c2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d10c      	bne.n	8002c22 <HAL_RCC_OscConfig+0x4aa>
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0c:	4a1a      	ldr	r2, [pc, #104]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c12:	6353      	str	r3, [r2, #52]	; 0x34
 8002c14:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c18:	4a17      	ldr	r2, [pc, #92]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1e:	6353      	str	r3, [r2, #52]	; 0x34
 8002c20:	e00b      	b.n	8002c3a <HAL_RCC_OscConfig+0x4c2>
 8002c22:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c26:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c2c:	6353      	str	r3, [r2, #52]	; 0x34
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c32:	4a11      	ldr	r2, [pc, #68]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002c34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c38:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d015      	beq.n	8002c6e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c42:	f7fe fcc7 	bl	80015d4 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c4a:	f7fe fcc3 	bl	80015d4 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e0b2      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0ee      	beq.n	8002c4a <HAL_RCC_OscConfig+0x4d2>
 8002c6c:	e023      	b.n	8002cb6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6e:	f7fe fcb1 	bl	80015d4 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c74:	e019      	b.n	8002caa <HAL_RCC_OscConfig+0x532>
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	08004750 	.word	0x08004750
 8002c80:	20000000 	.word	0x20000000
 8002c84:	20000004 	.word	0x20000004
 8002c88:	42470020 	.word	0x42470020
 8002c8c:	42470680 	.word	0x42470680
 8002c90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fe fc9e 	bl	80015d4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e08d      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002caa:	4b49      	ldr	r3, [pc, #292]	; (8002dd0 <HAL_RCC_OscConfig+0x658>)
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1ee      	bne.n	8002c94 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cb6:	7ffb      	ldrb	r3, [r7, #31]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d105      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cbc:	4b44      	ldr	r3, [pc, #272]	; (8002dd0 <HAL_RCC_OscConfig+0x658>)
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	4a43      	ldr	r2, [pc, #268]	; (8002dd0 <HAL_RCC_OscConfig+0x658>)
 8002cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d079      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	d056      	beq.n	8002d84 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d13b      	bne.n	8002d56 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cde:	4b3d      	ldr	r3, [pc, #244]	; (8002dd4 <HAL_RCC_OscConfig+0x65c>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fc76 	bl	80015d4 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fe fc72 	bl	80015d4 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e063      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cfe:	4b34      	ldr	r3, [pc, #208]	; (8002dd0 <HAL_RCC_OscConfig+0x658>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d0a:	4b31      	ldr	r3, [pc, #196]	; (8002dd0 <HAL_RCC_OscConfig+0x658>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	4319      	orrs	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	430b      	orrs	r3, r1
 8002d22:	492b      	ldr	r1, [pc, #172]	; (8002dd0 <HAL_RCC_OscConfig+0x658>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d28:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <HAL_RCC_OscConfig+0x65c>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fe fc51 	bl	80015d4 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d36:	f7fe fc4d 	bl	80015d4 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e03e      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d48:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <HAL_RCC_OscConfig+0x658>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x5be>
 8002d54:	e036      	b.n	8002dc4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d56:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <HAL_RCC_OscConfig+0x65c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fc3a 	bl	80015d4 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe fc36 	bl	80015d4 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e027      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d76:	4b16      	ldr	r3, [pc, #88]	; (8002dd0 <HAL_RCC_OscConfig+0x658>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5ec>
 8002d82:	e01f      	b.n	8002dc4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e01a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <HAL_RCC_OscConfig+0x658>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d10d      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d106      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3720      	adds	r7, #32
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	42470060 	.word	0x42470060

08002dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e11a      	b.n	8003022 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dec:	4b8f      	ldr	r3, [pc, #572]	; (800302c <HAL_RCC_ClockConfig+0x254>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d919      	bls.n	8002e2e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d105      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x34>
 8002e00:	4b8a      	ldr	r3, [pc, #552]	; (800302c <HAL_RCC_ClockConfig+0x254>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a89      	ldr	r2, [pc, #548]	; (800302c <HAL_RCC_ClockConfig+0x254>)
 8002e06:	f043 0304 	orr.w	r3, r3, #4
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b87      	ldr	r3, [pc, #540]	; (800302c <HAL_RCC_ClockConfig+0x254>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 0201 	bic.w	r2, r3, #1
 8002e14:	4985      	ldr	r1, [pc, #532]	; (800302c <HAL_RCC_ClockConfig+0x254>)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1c:	4b83      	ldr	r3, [pc, #524]	; (800302c <HAL_RCC_ClockConfig+0x254>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d001      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0f9      	b.n	8003022 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e3a:	4b7d      	ldr	r3, [pc, #500]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	497a      	ldr	r1, [pc, #488]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 808e 	beq.w	8002f76 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e62:	4b73      	ldr	r3, [pc, #460]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d121      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e0d7      	b.n	8003022 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d107      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e7a:	4b6d      	ldr	r3, [pc, #436]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d115      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0cb      	b.n	8003022 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d107      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e92:	4b67      	ldr	r3, [pc, #412]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e0bf      	b.n	8003022 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ea2:	4b63      	ldr	r3, [pc, #396]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e0b7      	b.n	8003022 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb2:	4b5f      	ldr	r3, [pc, #380]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f023 0203 	bic.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	495c      	ldr	r1, [pc, #368]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec4:	f7fe fb86 	bl	80015d4 <HAL_GetTick>
 8002ec8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d112      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed4:	f7fe fb7e 	bl	80015d4 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e09b      	b.n	8003022 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eea:	4b51      	ldr	r3, [pc, #324]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d1ee      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0xfc>
 8002ef6:	e03e      	b.n	8002f76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d112      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f02:	f7fe fb67 	bl	80015d4 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e084      	b.n	8003022 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f18:	4b45      	ldr	r3, [pc, #276]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b0c      	cmp	r3, #12
 8002f22:	d1ee      	bne.n	8002f02 <HAL_RCC_ClockConfig+0x12a>
 8002f24:	e027      	b.n	8002f76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d11d      	bne.n	8002f6a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f30:	f7fe fb50 	bl	80015d4 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e06d      	b.n	8003022 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f46:	4b3a      	ldr	r3, [pc, #232]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d1ee      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x158>
 8002f52:	e010      	b.n	8002f76 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f54:	f7fe fb3e 	bl	80015d4 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e05b      	b.n	8003022 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f6a:	4b31      	ldr	r3, [pc, #196]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1ee      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f76:	4b2d      	ldr	r3, [pc, #180]	; (800302c <HAL_RCC_ClockConfig+0x254>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d219      	bcs.n	8002fb8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d105      	bne.n	8002f96 <HAL_RCC_ClockConfig+0x1be>
 8002f8a:	4b28      	ldr	r3, [pc, #160]	; (800302c <HAL_RCC_ClockConfig+0x254>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a27      	ldr	r2, [pc, #156]	; (800302c <HAL_RCC_ClockConfig+0x254>)
 8002f90:	f043 0304 	orr.w	r3, r3, #4
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	4b25      	ldr	r3, [pc, #148]	; (800302c <HAL_RCC_ClockConfig+0x254>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 0201 	bic.w	r2, r3, #1
 8002f9e:	4923      	ldr	r1, [pc, #140]	; (800302c <HAL_RCC_ClockConfig+0x254>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b21      	ldr	r3, [pc, #132]	; (800302c <HAL_RCC_ClockConfig+0x254>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e034      	b.n	8003022 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4917      	ldr	r1, [pc, #92]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fe2:	4b13      	ldr	r3, [pc, #76]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	490f      	ldr	r1, [pc, #60]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ff6:	f000 f823 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <HAL_RCC_ClockConfig+0x258>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	490b      	ldr	r1, [pc, #44]	; (8003034 <HAL_RCC_ClockConfig+0x25c>)
 8003008:	5ccb      	ldrb	r3, [r1, r3]
 800300a:	fa22 f303 	lsr.w	r3, r2, r3
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <HAL_RCC_ClockConfig+0x260>)
 8003010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCC_ClockConfig+0x264>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe fa90 	bl	800153c <HAL_InitTick>
 800301c:	4603      	mov	r3, r0
 800301e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003020:	7afb      	ldrb	r3, [r7, #11]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023c00 	.word	0x40023c00
 8003030:	40023800 	.word	0x40023800
 8003034:	08004750 	.word	0x08004750
 8003038:	20000000 	.word	0x20000000
 800303c:	20000004 	.word	0x20000004

08003040 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003040:	b5b0      	push	{r4, r5, r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003046:	4b61      	ldr	r3, [pc, #388]	; (80031cc <HAL_RCC_GetSysClockFreq+0x18c>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b0c      	cmp	r3, #12
 8003054:	d00d      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0x32>
 8003056:	2b0c      	cmp	r3, #12
 8003058:	f200 80a4 	bhi.w	80031a4 <HAL_RCC_GetSysClockFreq+0x164>
 800305c:	2b04      	cmp	r3, #4
 800305e:	d002      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0x26>
 8003060:	2b08      	cmp	r3, #8
 8003062:	d003      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0x2c>
 8003064:	e09e      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003066:	4b5a      	ldr	r3, [pc, #360]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x190>)
 8003068:	613b      	str	r3, [r7, #16]
      break;
 800306a:	e0a9      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800306c:	4b59      	ldr	r3, [pc, #356]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x194>)
 800306e:	613b      	str	r3, [r7, #16]
      break;
 8003070:	e0a6      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	0c9b      	lsrs	r3, r3, #18
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	4a57      	ldr	r2, [pc, #348]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x198>)
 800307c:	5cd3      	ldrb	r3, [r2, r3]
 800307e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	0d9b      	lsrs	r3, r3, #22
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	3301      	adds	r3, #1
 800308a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800308c:	4b4f      	ldr	r3, [pc, #316]	; (80031cc <HAL_RCC_GetSysClockFreq+0x18c>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d041      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	461c      	mov	r4, r3
 800309c:	f04f 0500 	mov.w	r5, #0
 80030a0:	4620      	mov	r0, r4
 80030a2:	4629      	mov	r1, r5
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	014b      	lsls	r3, r1, #5
 80030ae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030b2:	0142      	lsls	r2, r0, #5
 80030b4:	4610      	mov	r0, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	1b00      	subs	r0, r0, r4
 80030ba:	eb61 0105 	sbc.w	r1, r1, r5
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	018b      	lsls	r3, r1, #6
 80030c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030cc:	0182      	lsls	r2, r0, #6
 80030ce:	1a12      	subs	r2, r2, r0
 80030d0:	eb63 0301 	sbc.w	r3, r3, r1
 80030d4:	f04f 0000 	mov.w	r0, #0
 80030d8:	f04f 0100 	mov.w	r1, #0
 80030dc:	00d9      	lsls	r1, r3, #3
 80030de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030e2:	00d0      	lsls	r0, r2, #3
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	1912      	adds	r2, r2, r4
 80030ea:	eb45 0303 	adc.w	r3, r5, r3
 80030ee:	f04f 0000 	mov.w	r0, #0
 80030f2:	f04f 0100 	mov.w	r1, #0
 80030f6:	0259      	lsls	r1, r3, #9
 80030f8:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80030fc:	0250      	lsls	r0, r2, #9
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4610      	mov	r0, r2
 8003104:	4619      	mov	r1, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	461a      	mov	r2, r3
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	f7fd fc5d 	bl	80009cc <__aeabi_uldivmod>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4613      	mov	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e040      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	461c      	mov	r4, r3
 8003120:	f04f 0500 	mov.w	r5, #0
 8003124:	4620      	mov	r0, r4
 8003126:	4629      	mov	r1, r5
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	014b      	lsls	r3, r1, #5
 8003132:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003136:	0142      	lsls	r2, r0, #5
 8003138:	4610      	mov	r0, r2
 800313a:	4619      	mov	r1, r3
 800313c:	1b00      	subs	r0, r0, r4
 800313e:	eb61 0105 	sbc.w	r1, r1, r5
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	018b      	lsls	r3, r1, #6
 800314c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003150:	0182      	lsls	r2, r0, #6
 8003152:	1a12      	subs	r2, r2, r0
 8003154:	eb63 0301 	sbc.w	r3, r3, r1
 8003158:	f04f 0000 	mov.w	r0, #0
 800315c:	f04f 0100 	mov.w	r1, #0
 8003160:	00d9      	lsls	r1, r3, #3
 8003162:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003166:	00d0      	lsls	r0, r2, #3
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	1912      	adds	r2, r2, r4
 800316e:	eb45 0303 	adc.w	r3, r5, r3
 8003172:	f04f 0000 	mov.w	r0, #0
 8003176:	f04f 0100 	mov.w	r1, #0
 800317a:	0299      	lsls	r1, r3, #10
 800317c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003180:	0290      	lsls	r0, r2, #10
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	461a      	mov	r2, r3
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	f7fd fc1b 	bl	80009cc <__aeabi_uldivmod>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4613      	mov	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	613b      	str	r3, [r7, #16]
      break;
 80031a2:	e00d      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_RCC_GetSysClockFreq+0x18c>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	0b5b      	lsrs	r3, r3, #13
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	3301      	adds	r3, #1
 80031b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	613b      	str	r3, [r7, #16]
      break;
 80031be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031c0:	693b      	ldr	r3, [r7, #16]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bdb0      	pop	{r4, r5, r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800
 80031d0:	00f42400 	.word	0x00f42400
 80031d4:	007a1200 	.word	0x007a1200
 80031d8:	08004744 	.word	0x08004744

080031dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e0:	4b02      	ldr	r3, [pc, #8]	; (80031ec <HAL_RCC_GetHCLKFreq+0x10>)
 80031e2:	681b      	ldr	r3, [r3, #0]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr
 80031ec:	20000000 	.word	0x20000000

080031f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031f4:	f7ff fff2 	bl	80031dc <HAL_RCC_GetHCLKFreq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	4903      	ldr	r1, [pc, #12]	; (8003214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003206:	5ccb      	ldrb	r3, [r1, r3]
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40023800 	.word	0x40023800
 8003214:	08004760 	.word	0x08004760

08003218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800321c:	f7ff ffde 	bl	80031dc <HAL_RCC_GetHCLKFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	0adb      	lsrs	r3, r3, #11
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4903      	ldr	r1, [pc, #12]	; (800323c <HAL_RCC_GetPCLK2Freq+0x24>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40023800 	.word	0x40023800
 800323c:	08004760 	.word	0x08004760

08003240 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800324c:	4b29      	ldr	r3, [pc, #164]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d12c      	bne.n	80032b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003258:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003264:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	e016      	b.n	800329e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003270:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	4a1f      	ldr	r2, [pc, #124]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327a:	6253      	str	r3, [r2, #36]	; 0x24
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003288:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003290:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003292:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	4a17      	ldr	r2, [pc, #92]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80032a4:	d105      	bne.n	80032b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80032ac:	d101      	bne.n	80032b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80032ae:	2301      	movs	r3, #1
 80032b0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d105      	bne.n	80032c4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80032b8:	4b10      	ldr	r3, [pc, #64]	; (80032fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0f      	ldr	r2, [pc, #60]	; (80032fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032be:	f043 0304 	orr.w	r3, r3, #4
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f023 0201 	bic.w	r2, r3, #1
 80032cc:	490b      	ldr	r1, [pc, #44]	; (80032fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d001      	beq.n	80032e6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
 80032f8:	40007000 	.word	0x40007000
 80032fc:	40023c00 	.word	0x40023c00

08003300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e03f      	b.n	8003392 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fd ffa8 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2224      	movs	r2, #36	; 0x24
 8003330:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f95f 	bl	8003608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b088      	sub	sp, #32
 800339e:	af02      	add	r7, sp, #8
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	f040 8083 	bne.w	80034c2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_UART_Transmit+0x2e>
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e07b      	b.n	80034c4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_UART_Transmit+0x40>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e074      	b.n	80034c4 <HAL_UART_Transmit+0x12a>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2221      	movs	r2, #33	; 0x21
 80033ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033f0:	f7fe f8f0 	bl	80015d4 <HAL_GetTick>
 80033f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	88fa      	ldrh	r2, [r7, #6]
 80033fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800340a:	e042      	b.n	8003492 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003422:	d122      	bne.n	800346a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2200      	movs	r2, #0
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f8a0 	bl	8003574 <UART_WaitOnFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e042      	b.n	80034c4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003450:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	3302      	adds	r3, #2
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	e017      	b.n	8003492 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3301      	adds	r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	e013      	b.n	8003492 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2200      	movs	r2, #0
 8003472:	2180      	movs	r1, #128	; 0x80
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f87d 	bl	8003574 <UART_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e01f      	b.n	80034c4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	60ba      	str	r2, [r7, #8]
 800348a:	781a      	ldrb	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1b7      	bne.n	800340c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2200      	movs	r2, #0
 80034a4:	2140      	movs	r1, #64	; 0x40
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f864 	bl	8003574 <UART_WaitOnFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e006      	b.n	80034c4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	e000      	b.n	80034c4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
  }
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	4613      	mov	r3, r2
 80034d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d140      	bne.n	8003568 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <HAL_UART_Receive_IT+0x26>
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e039      	b.n	800356a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_UART_Receive_IT+0x38>
 8003500:	2302      	movs	r3, #2
 8003502:	e032      	b.n	800356a <HAL_UART_Receive_IT+0x9e>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	88fa      	ldrh	r2, [r7, #6]
 8003516:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	88fa      	ldrh	r2, [r7, #6]
 800351c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2222      	movs	r2, #34	; 0x22
 8003528:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003542:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0220 	orr.w	r2, r2, #32
 8003562:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	e000      	b.n	800356a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003568:	2302      	movs	r3, #2
  }
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003584:	e02c      	b.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800358c:	d028      	beq.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d007      	beq.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003594:	f7fe f81e 	bl	80015d4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d21d      	bcs.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e00f      	b.n	8003600 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d0c3      	beq.n	8003586 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	4313      	orrs	r3, r2
 800363c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003648:	f023 030c 	bic.w	r3, r3, #12
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	430b      	orrs	r3, r1
 8003654:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699a      	ldr	r2, [r3, #24]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a55      	ldr	r2, [pc, #340]	; (80037c8 <UART_SetConfig+0x1c0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d103      	bne.n	800367e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003676:	f7ff fdcf 	bl	8003218 <HAL_RCC_GetPCLK2Freq>
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	e002      	b.n	8003684 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800367e:	f7ff fdb7 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8003682:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800368c:	d14c      	bne.n	8003728 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009a      	lsls	r2, r3, #2
 8003698:	441a      	add	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a4:	4a49      	ldr	r2, [pc, #292]	; (80037cc <UART_SetConfig+0x1c4>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	0119      	lsls	r1, r3, #4
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009a      	lsls	r2, r3, #2
 80036b8:	441a      	add	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c4:	4b41      	ldr	r3, [pc, #260]	; (80037cc <UART_SetConfig+0x1c4>)
 80036c6:	fba3 0302 	umull	r0, r3, r3, r2
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2064      	movs	r0, #100	; 0x64
 80036ce:	fb00 f303 	mul.w	r3, r0, r3
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	3332      	adds	r3, #50	; 0x32
 80036d8:	4a3c      	ldr	r2, [pc, #240]	; (80037cc <UART_SetConfig+0x1c4>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036e6:	4419      	add	r1, r3
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	009a      	lsls	r2, r3, #2
 80036f2:	441a      	add	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80036fe:	4b33      	ldr	r3, [pc, #204]	; (80037cc <UART_SetConfig+0x1c4>)
 8003700:	fba3 0302 	umull	r0, r3, r3, r2
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	2064      	movs	r0, #100	; 0x64
 8003708:	fb00 f303 	mul.w	r3, r0, r3
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	3332      	adds	r3, #50	; 0x32
 8003712:	4a2e      	ldr	r2, [pc, #184]	; (80037cc <UART_SetConfig+0x1c4>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	f003 0207 	and.w	r2, r3, #7
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	440a      	add	r2, r1
 8003724:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003726:	e04a      	b.n	80037be <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	009a      	lsls	r2, r3, #2
 8003732:	441a      	add	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	fbb2 f3f3 	udiv	r3, r2, r3
 800373e:	4a23      	ldr	r2, [pc, #140]	; (80037cc <UART_SetConfig+0x1c4>)
 8003740:	fba2 2303 	umull	r2, r3, r2, r3
 8003744:	095b      	lsrs	r3, r3, #5
 8003746:	0119      	lsls	r1, r3, #4
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	009a      	lsls	r2, r3, #2
 8003752:	441a      	add	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	fbb2 f2f3 	udiv	r2, r2, r3
 800375e:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <UART_SetConfig+0x1c4>)
 8003760:	fba3 0302 	umull	r0, r3, r3, r2
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	2064      	movs	r0, #100	; 0x64
 8003768:	fb00 f303 	mul.w	r3, r0, r3
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	3332      	adds	r3, #50	; 0x32
 8003772:	4a16      	ldr	r2, [pc, #88]	; (80037cc <UART_SetConfig+0x1c4>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800377e:	4419      	add	r1, r3
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	009a      	lsls	r2, r3, #2
 800378a:	441a      	add	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	fbb2 f2f3 	udiv	r2, r2, r3
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <UART_SetConfig+0x1c4>)
 8003798:	fba3 0302 	umull	r0, r3, r3, r2
 800379c:	095b      	lsrs	r3, r3, #5
 800379e:	2064      	movs	r0, #100	; 0x64
 80037a0:	fb00 f303 	mul.w	r3, r0, r3
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	3332      	adds	r3, #50	; 0x32
 80037aa:	4a08      	ldr	r2, [pc, #32]	; (80037cc <UART_SetConfig+0x1c4>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	f003 020f 	and.w	r2, r3, #15
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	440a      	add	r2, r1
 80037bc:	609a      	str	r2, [r3, #8]
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40013800 	.word	0x40013800
 80037cc:	51eb851f 	.word	0x51eb851f

080037d0 <__errno>:
 80037d0:	4b01      	ldr	r3, [pc, #4]	; (80037d8 <__errno+0x8>)
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	2000000c 	.word	0x2000000c

080037dc <__libc_init_array>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	2600      	movs	r6, #0
 80037e0:	4d0c      	ldr	r5, [pc, #48]	; (8003814 <__libc_init_array+0x38>)
 80037e2:	4c0d      	ldr	r4, [pc, #52]	; (8003818 <__libc_init_array+0x3c>)
 80037e4:	1b64      	subs	r4, r4, r5
 80037e6:	10a4      	asrs	r4, r4, #2
 80037e8:	42a6      	cmp	r6, r4
 80037ea:	d109      	bne.n	8003800 <__libc_init_array+0x24>
 80037ec:	f000 ff82 	bl	80046f4 <_init>
 80037f0:	2600      	movs	r6, #0
 80037f2:	4d0a      	ldr	r5, [pc, #40]	; (800381c <__libc_init_array+0x40>)
 80037f4:	4c0a      	ldr	r4, [pc, #40]	; (8003820 <__libc_init_array+0x44>)
 80037f6:	1b64      	subs	r4, r4, r5
 80037f8:	10a4      	asrs	r4, r4, #2
 80037fa:	42a6      	cmp	r6, r4
 80037fc:	d105      	bne.n	800380a <__libc_init_array+0x2e>
 80037fe:	bd70      	pop	{r4, r5, r6, pc}
 8003800:	f855 3b04 	ldr.w	r3, [r5], #4
 8003804:	4798      	blx	r3
 8003806:	3601      	adds	r6, #1
 8003808:	e7ee      	b.n	80037e8 <__libc_init_array+0xc>
 800380a:	f855 3b04 	ldr.w	r3, [r5], #4
 800380e:	4798      	blx	r3
 8003810:	3601      	adds	r6, #1
 8003812:	e7f2      	b.n	80037fa <__libc_init_array+0x1e>
 8003814:	08004808 	.word	0x08004808
 8003818:	08004808 	.word	0x08004808
 800381c:	08004808 	.word	0x08004808
 8003820:	0800480c 	.word	0x0800480c

08003824 <memset>:
 8003824:	4603      	mov	r3, r0
 8003826:	4402      	add	r2, r0
 8003828:	4293      	cmp	r3, r2
 800382a:	d100      	bne.n	800382e <memset+0xa>
 800382c:	4770      	bx	lr
 800382e:	f803 1b01 	strb.w	r1, [r3], #1
 8003832:	e7f9      	b.n	8003828 <memset+0x4>

08003834 <iprintf>:
 8003834:	b40f      	push	{r0, r1, r2, r3}
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <iprintf+0x2c>)
 8003838:	b513      	push	{r0, r1, r4, lr}
 800383a:	681c      	ldr	r4, [r3, #0]
 800383c:	b124      	cbz	r4, 8003848 <iprintf+0x14>
 800383e:	69a3      	ldr	r3, [r4, #24]
 8003840:	b913      	cbnz	r3, 8003848 <iprintf+0x14>
 8003842:	4620      	mov	r0, r4
 8003844:	f000 f866 	bl	8003914 <__sinit>
 8003848:	ab05      	add	r3, sp, #20
 800384a:	4620      	mov	r0, r4
 800384c:	9a04      	ldr	r2, [sp, #16]
 800384e:	68a1      	ldr	r1, [r4, #8]
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	f000 f981 	bl	8003b58 <_vfiprintf_r>
 8003856:	b002      	add	sp, #8
 8003858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800385c:	b004      	add	sp, #16
 800385e:	4770      	bx	lr
 8003860:	2000000c 	.word	0x2000000c

08003864 <std>:
 8003864:	2300      	movs	r3, #0
 8003866:	b510      	push	{r4, lr}
 8003868:	4604      	mov	r4, r0
 800386a:	e9c0 3300 	strd	r3, r3, [r0]
 800386e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003872:	6083      	str	r3, [r0, #8]
 8003874:	8181      	strh	r1, [r0, #12]
 8003876:	6643      	str	r3, [r0, #100]	; 0x64
 8003878:	81c2      	strh	r2, [r0, #14]
 800387a:	6183      	str	r3, [r0, #24]
 800387c:	4619      	mov	r1, r3
 800387e:	2208      	movs	r2, #8
 8003880:	305c      	adds	r0, #92	; 0x5c
 8003882:	f7ff ffcf 	bl	8003824 <memset>
 8003886:	4b05      	ldr	r3, [pc, #20]	; (800389c <std+0x38>)
 8003888:	6224      	str	r4, [r4, #32]
 800388a:	6263      	str	r3, [r4, #36]	; 0x24
 800388c:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <std+0x3c>)
 800388e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <std+0x40>)
 8003892:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003894:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <std+0x44>)
 8003896:	6323      	str	r3, [r4, #48]	; 0x30
 8003898:	bd10      	pop	{r4, pc}
 800389a:	bf00      	nop
 800389c:	08004105 	.word	0x08004105
 80038a0:	08004127 	.word	0x08004127
 80038a4:	0800415f 	.word	0x0800415f
 80038a8:	08004183 	.word	0x08004183

080038ac <_cleanup_r>:
 80038ac:	4901      	ldr	r1, [pc, #4]	; (80038b4 <_cleanup_r+0x8>)
 80038ae:	f000 b8af 	b.w	8003a10 <_fwalk_reent>
 80038b2:	bf00      	nop
 80038b4:	0800445d 	.word	0x0800445d

080038b8 <__sfmoreglue>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	2568      	movs	r5, #104	; 0x68
 80038bc:	1e4a      	subs	r2, r1, #1
 80038be:	4355      	muls	r5, r2
 80038c0:	460e      	mov	r6, r1
 80038c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80038c6:	f000 f8c5 	bl	8003a54 <_malloc_r>
 80038ca:	4604      	mov	r4, r0
 80038cc:	b140      	cbz	r0, 80038e0 <__sfmoreglue+0x28>
 80038ce:	2100      	movs	r1, #0
 80038d0:	e9c0 1600 	strd	r1, r6, [r0]
 80038d4:	300c      	adds	r0, #12
 80038d6:	60a0      	str	r0, [r4, #8]
 80038d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80038dc:	f7ff ffa2 	bl	8003824 <memset>
 80038e0:	4620      	mov	r0, r4
 80038e2:	bd70      	pop	{r4, r5, r6, pc}

080038e4 <__sfp_lock_acquire>:
 80038e4:	4801      	ldr	r0, [pc, #4]	; (80038ec <__sfp_lock_acquire+0x8>)
 80038e6:	f000 b8b3 	b.w	8003a50 <__retarget_lock_acquire_recursive>
 80038ea:	bf00      	nop
 80038ec:	20000194 	.word	0x20000194

080038f0 <__sfp_lock_release>:
 80038f0:	4801      	ldr	r0, [pc, #4]	; (80038f8 <__sfp_lock_release+0x8>)
 80038f2:	f000 b8ae 	b.w	8003a52 <__retarget_lock_release_recursive>
 80038f6:	bf00      	nop
 80038f8:	20000194 	.word	0x20000194

080038fc <__sinit_lock_acquire>:
 80038fc:	4801      	ldr	r0, [pc, #4]	; (8003904 <__sinit_lock_acquire+0x8>)
 80038fe:	f000 b8a7 	b.w	8003a50 <__retarget_lock_acquire_recursive>
 8003902:	bf00      	nop
 8003904:	2000018f 	.word	0x2000018f

08003908 <__sinit_lock_release>:
 8003908:	4801      	ldr	r0, [pc, #4]	; (8003910 <__sinit_lock_release+0x8>)
 800390a:	f000 b8a2 	b.w	8003a52 <__retarget_lock_release_recursive>
 800390e:	bf00      	nop
 8003910:	2000018f 	.word	0x2000018f

08003914 <__sinit>:
 8003914:	b510      	push	{r4, lr}
 8003916:	4604      	mov	r4, r0
 8003918:	f7ff fff0 	bl	80038fc <__sinit_lock_acquire>
 800391c:	69a3      	ldr	r3, [r4, #24]
 800391e:	b11b      	cbz	r3, 8003928 <__sinit+0x14>
 8003920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003924:	f7ff bff0 	b.w	8003908 <__sinit_lock_release>
 8003928:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800392c:	6523      	str	r3, [r4, #80]	; 0x50
 800392e:	4b13      	ldr	r3, [pc, #76]	; (800397c <__sinit+0x68>)
 8003930:	4a13      	ldr	r2, [pc, #76]	; (8003980 <__sinit+0x6c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	62a2      	str	r2, [r4, #40]	; 0x28
 8003936:	42a3      	cmp	r3, r4
 8003938:	bf08      	it	eq
 800393a:	2301      	moveq	r3, #1
 800393c:	4620      	mov	r0, r4
 800393e:	bf08      	it	eq
 8003940:	61a3      	streq	r3, [r4, #24]
 8003942:	f000 f81f 	bl	8003984 <__sfp>
 8003946:	6060      	str	r0, [r4, #4]
 8003948:	4620      	mov	r0, r4
 800394a:	f000 f81b 	bl	8003984 <__sfp>
 800394e:	60a0      	str	r0, [r4, #8]
 8003950:	4620      	mov	r0, r4
 8003952:	f000 f817 	bl	8003984 <__sfp>
 8003956:	2200      	movs	r2, #0
 8003958:	2104      	movs	r1, #4
 800395a:	60e0      	str	r0, [r4, #12]
 800395c:	6860      	ldr	r0, [r4, #4]
 800395e:	f7ff ff81 	bl	8003864 <std>
 8003962:	2201      	movs	r2, #1
 8003964:	2109      	movs	r1, #9
 8003966:	68a0      	ldr	r0, [r4, #8]
 8003968:	f7ff ff7c 	bl	8003864 <std>
 800396c:	2202      	movs	r2, #2
 800396e:	2112      	movs	r1, #18
 8003970:	68e0      	ldr	r0, [r4, #12]
 8003972:	f7ff ff77 	bl	8003864 <std>
 8003976:	2301      	movs	r3, #1
 8003978:	61a3      	str	r3, [r4, #24]
 800397a:	e7d1      	b.n	8003920 <__sinit+0xc>
 800397c:	08004768 	.word	0x08004768
 8003980:	080038ad 	.word	0x080038ad

08003984 <__sfp>:
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	4607      	mov	r7, r0
 8003988:	f7ff ffac 	bl	80038e4 <__sfp_lock_acquire>
 800398c:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <__sfp+0x84>)
 800398e:	681e      	ldr	r6, [r3, #0]
 8003990:	69b3      	ldr	r3, [r6, #24]
 8003992:	b913      	cbnz	r3, 800399a <__sfp+0x16>
 8003994:	4630      	mov	r0, r6
 8003996:	f7ff ffbd 	bl	8003914 <__sinit>
 800399a:	3648      	adds	r6, #72	; 0x48
 800399c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	d503      	bpl.n	80039ac <__sfp+0x28>
 80039a4:	6833      	ldr	r3, [r6, #0]
 80039a6:	b30b      	cbz	r3, 80039ec <__sfp+0x68>
 80039a8:	6836      	ldr	r6, [r6, #0]
 80039aa:	e7f7      	b.n	800399c <__sfp+0x18>
 80039ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80039b0:	b9d5      	cbnz	r5, 80039e8 <__sfp+0x64>
 80039b2:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <__sfp+0x88>)
 80039b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80039b8:	60e3      	str	r3, [r4, #12]
 80039ba:	6665      	str	r5, [r4, #100]	; 0x64
 80039bc:	f000 f847 	bl	8003a4e <__retarget_lock_init_recursive>
 80039c0:	f7ff ff96 	bl	80038f0 <__sfp_lock_release>
 80039c4:	2208      	movs	r2, #8
 80039c6:	4629      	mov	r1, r5
 80039c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80039cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80039d0:	6025      	str	r5, [r4, #0]
 80039d2:	61a5      	str	r5, [r4, #24]
 80039d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039d8:	f7ff ff24 	bl	8003824 <memset>
 80039dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80039e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80039e4:	4620      	mov	r0, r4
 80039e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039e8:	3468      	adds	r4, #104	; 0x68
 80039ea:	e7d9      	b.n	80039a0 <__sfp+0x1c>
 80039ec:	2104      	movs	r1, #4
 80039ee:	4638      	mov	r0, r7
 80039f0:	f7ff ff62 	bl	80038b8 <__sfmoreglue>
 80039f4:	4604      	mov	r4, r0
 80039f6:	6030      	str	r0, [r6, #0]
 80039f8:	2800      	cmp	r0, #0
 80039fa:	d1d5      	bne.n	80039a8 <__sfp+0x24>
 80039fc:	f7ff ff78 	bl	80038f0 <__sfp_lock_release>
 8003a00:	230c      	movs	r3, #12
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	e7ee      	b.n	80039e4 <__sfp+0x60>
 8003a06:	bf00      	nop
 8003a08:	08004768 	.word	0x08004768
 8003a0c:	ffff0001 	.word	0xffff0001

08003a10 <_fwalk_reent>:
 8003a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a14:	4606      	mov	r6, r0
 8003a16:	4688      	mov	r8, r1
 8003a18:	2700      	movs	r7, #0
 8003a1a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a22:	f1b9 0901 	subs.w	r9, r9, #1
 8003a26:	d505      	bpl.n	8003a34 <_fwalk_reent+0x24>
 8003a28:	6824      	ldr	r4, [r4, #0]
 8003a2a:	2c00      	cmp	r4, #0
 8003a2c:	d1f7      	bne.n	8003a1e <_fwalk_reent+0xe>
 8003a2e:	4638      	mov	r0, r7
 8003a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a34:	89ab      	ldrh	r3, [r5, #12]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d907      	bls.n	8003a4a <_fwalk_reent+0x3a>
 8003a3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	d003      	beq.n	8003a4a <_fwalk_reent+0x3a>
 8003a42:	4629      	mov	r1, r5
 8003a44:	4630      	mov	r0, r6
 8003a46:	47c0      	blx	r8
 8003a48:	4307      	orrs	r7, r0
 8003a4a:	3568      	adds	r5, #104	; 0x68
 8003a4c:	e7e9      	b.n	8003a22 <_fwalk_reent+0x12>

08003a4e <__retarget_lock_init_recursive>:
 8003a4e:	4770      	bx	lr

08003a50 <__retarget_lock_acquire_recursive>:
 8003a50:	4770      	bx	lr

08003a52 <__retarget_lock_release_recursive>:
 8003a52:	4770      	bx	lr

08003a54 <_malloc_r>:
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	1ccd      	adds	r5, r1, #3
 8003a58:	f025 0503 	bic.w	r5, r5, #3
 8003a5c:	3508      	adds	r5, #8
 8003a5e:	2d0c      	cmp	r5, #12
 8003a60:	bf38      	it	cc
 8003a62:	250c      	movcc	r5, #12
 8003a64:	2d00      	cmp	r5, #0
 8003a66:	4606      	mov	r6, r0
 8003a68:	db01      	blt.n	8003a6e <_malloc_r+0x1a>
 8003a6a:	42a9      	cmp	r1, r5
 8003a6c:	d903      	bls.n	8003a76 <_malloc_r+0x22>
 8003a6e:	230c      	movs	r3, #12
 8003a70:	6033      	str	r3, [r6, #0]
 8003a72:	2000      	movs	r0, #0
 8003a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a76:	f000 fdb1 	bl	80045dc <__malloc_lock>
 8003a7a:	4921      	ldr	r1, [pc, #132]	; (8003b00 <_malloc_r+0xac>)
 8003a7c:	680a      	ldr	r2, [r1, #0]
 8003a7e:	4614      	mov	r4, r2
 8003a80:	b99c      	cbnz	r4, 8003aaa <_malloc_r+0x56>
 8003a82:	4f20      	ldr	r7, [pc, #128]	; (8003b04 <_malloc_r+0xb0>)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	b923      	cbnz	r3, 8003a92 <_malloc_r+0x3e>
 8003a88:	4621      	mov	r1, r4
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	f000 fb2a 	bl	80040e4 <_sbrk_r>
 8003a90:	6038      	str	r0, [r7, #0]
 8003a92:	4629      	mov	r1, r5
 8003a94:	4630      	mov	r0, r6
 8003a96:	f000 fb25 	bl	80040e4 <_sbrk_r>
 8003a9a:	1c43      	adds	r3, r0, #1
 8003a9c:	d123      	bne.n	8003ae6 <_malloc_r+0x92>
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	6033      	str	r3, [r6, #0]
 8003aa4:	f000 fda0 	bl	80045e8 <__malloc_unlock>
 8003aa8:	e7e3      	b.n	8003a72 <_malloc_r+0x1e>
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	1b5b      	subs	r3, r3, r5
 8003aae:	d417      	bmi.n	8003ae0 <_malloc_r+0x8c>
 8003ab0:	2b0b      	cmp	r3, #11
 8003ab2:	d903      	bls.n	8003abc <_malloc_r+0x68>
 8003ab4:	6023      	str	r3, [r4, #0]
 8003ab6:	441c      	add	r4, r3
 8003ab8:	6025      	str	r5, [r4, #0]
 8003aba:	e004      	b.n	8003ac6 <_malloc_r+0x72>
 8003abc:	6863      	ldr	r3, [r4, #4]
 8003abe:	42a2      	cmp	r2, r4
 8003ac0:	bf0c      	ite	eq
 8003ac2:	600b      	streq	r3, [r1, #0]
 8003ac4:	6053      	strne	r3, [r2, #4]
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	f000 fd8e 	bl	80045e8 <__malloc_unlock>
 8003acc:	f104 000b 	add.w	r0, r4, #11
 8003ad0:	1d23      	adds	r3, r4, #4
 8003ad2:	f020 0007 	bic.w	r0, r0, #7
 8003ad6:	1ac2      	subs	r2, r0, r3
 8003ad8:	d0cc      	beq.n	8003a74 <_malloc_r+0x20>
 8003ada:	1a1b      	subs	r3, r3, r0
 8003adc:	50a3      	str	r3, [r4, r2]
 8003ade:	e7c9      	b.n	8003a74 <_malloc_r+0x20>
 8003ae0:	4622      	mov	r2, r4
 8003ae2:	6864      	ldr	r4, [r4, #4]
 8003ae4:	e7cc      	b.n	8003a80 <_malloc_r+0x2c>
 8003ae6:	1cc4      	adds	r4, r0, #3
 8003ae8:	f024 0403 	bic.w	r4, r4, #3
 8003aec:	42a0      	cmp	r0, r4
 8003aee:	d0e3      	beq.n	8003ab8 <_malloc_r+0x64>
 8003af0:	1a21      	subs	r1, r4, r0
 8003af2:	4630      	mov	r0, r6
 8003af4:	f000 faf6 	bl	80040e4 <_sbrk_r>
 8003af8:	3001      	adds	r0, #1
 8003afa:	d1dd      	bne.n	8003ab8 <_malloc_r+0x64>
 8003afc:	e7cf      	b.n	8003a9e <_malloc_r+0x4a>
 8003afe:	bf00      	nop
 8003b00:	20000090 	.word	0x20000090
 8003b04:	20000094 	.word	0x20000094

08003b08 <__sfputc_r>:
 8003b08:	6893      	ldr	r3, [r2, #8]
 8003b0a:	b410      	push	{r4}
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	6093      	str	r3, [r2, #8]
 8003b12:	da07      	bge.n	8003b24 <__sfputc_r+0x1c>
 8003b14:	6994      	ldr	r4, [r2, #24]
 8003b16:	42a3      	cmp	r3, r4
 8003b18:	db01      	blt.n	8003b1e <__sfputc_r+0x16>
 8003b1a:	290a      	cmp	r1, #10
 8003b1c:	d102      	bne.n	8003b24 <__sfputc_r+0x1c>
 8003b1e:	bc10      	pop	{r4}
 8003b20:	f000 bb34 	b.w	800418c <__swbuf_r>
 8003b24:	6813      	ldr	r3, [r2, #0]
 8003b26:	1c58      	adds	r0, r3, #1
 8003b28:	6010      	str	r0, [r2, #0]
 8003b2a:	7019      	strb	r1, [r3, #0]
 8003b2c:	4608      	mov	r0, r1
 8003b2e:	bc10      	pop	{r4}
 8003b30:	4770      	bx	lr

08003b32 <__sfputs_r>:
 8003b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b34:	4606      	mov	r6, r0
 8003b36:	460f      	mov	r7, r1
 8003b38:	4614      	mov	r4, r2
 8003b3a:	18d5      	adds	r5, r2, r3
 8003b3c:	42ac      	cmp	r4, r5
 8003b3e:	d101      	bne.n	8003b44 <__sfputs_r+0x12>
 8003b40:	2000      	movs	r0, #0
 8003b42:	e007      	b.n	8003b54 <__sfputs_r+0x22>
 8003b44:	463a      	mov	r2, r7
 8003b46:	4630      	mov	r0, r6
 8003b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b4c:	f7ff ffdc 	bl	8003b08 <__sfputc_r>
 8003b50:	1c43      	adds	r3, r0, #1
 8003b52:	d1f3      	bne.n	8003b3c <__sfputs_r+0xa>
 8003b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b58 <_vfiprintf_r>:
 8003b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b5c:	460d      	mov	r5, r1
 8003b5e:	4614      	mov	r4, r2
 8003b60:	4698      	mov	r8, r3
 8003b62:	4606      	mov	r6, r0
 8003b64:	b09d      	sub	sp, #116	; 0x74
 8003b66:	b118      	cbz	r0, 8003b70 <_vfiprintf_r+0x18>
 8003b68:	6983      	ldr	r3, [r0, #24]
 8003b6a:	b90b      	cbnz	r3, 8003b70 <_vfiprintf_r+0x18>
 8003b6c:	f7ff fed2 	bl	8003914 <__sinit>
 8003b70:	4b89      	ldr	r3, [pc, #548]	; (8003d98 <_vfiprintf_r+0x240>)
 8003b72:	429d      	cmp	r5, r3
 8003b74:	d11b      	bne.n	8003bae <_vfiprintf_r+0x56>
 8003b76:	6875      	ldr	r5, [r6, #4]
 8003b78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b7a:	07d9      	lsls	r1, r3, #31
 8003b7c:	d405      	bmi.n	8003b8a <_vfiprintf_r+0x32>
 8003b7e:	89ab      	ldrh	r3, [r5, #12]
 8003b80:	059a      	lsls	r2, r3, #22
 8003b82:	d402      	bmi.n	8003b8a <_vfiprintf_r+0x32>
 8003b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b86:	f7ff ff63 	bl	8003a50 <__retarget_lock_acquire_recursive>
 8003b8a:	89ab      	ldrh	r3, [r5, #12]
 8003b8c:	071b      	lsls	r3, r3, #28
 8003b8e:	d501      	bpl.n	8003b94 <_vfiprintf_r+0x3c>
 8003b90:	692b      	ldr	r3, [r5, #16]
 8003b92:	b9eb      	cbnz	r3, 8003bd0 <_vfiprintf_r+0x78>
 8003b94:	4629      	mov	r1, r5
 8003b96:	4630      	mov	r0, r6
 8003b98:	f000 fb5c 	bl	8004254 <__swsetup_r>
 8003b9c:	b1c0      	cbz	r0, 8003bd0 <_vfiprintf_r+0x78>
 8003b9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ba0:	07dc      	lsls	r4, r3, #31
 8003ba2:	d50e      	bpl.n	8003bc2 <_vfiprintf_r+0x6a>
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ba8:	b01d      	add	sp, #116	; 0x74
 8003baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bae:	4b7b      	ldr	r3, [pc, #492]	; (8003d9c <_vfiprintf_r+0x244>)
 8003bb0:	429d      	cmp	r5, r3
 8003bb2:	d101      	bne.n	8003bb8 <_vfiprintf_r+0x60>
 8003bb4:	68b5      	ldr	r5, [r6, #8]
 8003bb6:	e7df      	b.n	8003b78 <_vfiprintf_r+0x20>
 8003bb8:	4b79      	ldr	r3, [pc, #484]	; (8003da0 <_vfiprintf_r+0x248>)
 8003bba:	429d      	cmp	r5, r3
 8003bbc:	bf08      	it	eq
 8003bbe:	68f5      	ldreq	r5, [r6, #12]
 8003bc0:	e7da      	b.n	8003b78 <_vfiprintf_r+0x20>
 8003bc2:	89ab      	ldrh	r3, [r5, #12]
 8003bc4:	0598      	lsls	r0, r3, #22
 8003bc6:	d4ed      	bmi.n	8003ba4 <_vfiprintf_r+0x4c>
 8003bc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bca:	f7ff ff42 	bl	8003a52 <__retarget_lock_release_recursive>
 8003bce:	e7e9      	b.n	8003ba4 <_vfiprintf_r+0x4c>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd4:	2320      	movs	r3, #32
 8003bd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bda:	2330      	movs	r3, #48	; 0x30
 8003bdc:	f04f 0901 	mov.w	r9, #1
 8003be0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003be4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003da4 <_vfiprintf_r+0x24c>
 8003be8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bec:	4623      	mov	r3, r4
 8003bee:	469a      	mov	sl, r3
 8003bf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bf4:	b10a      	cbz	r2, 8003bfa <_vfiprintf_r+0xa2>
 8003bf6:	2a25      	cmp	r2, #37	; 0x25
 8003bf8:	d1f9      	bne.n	8003bee <_vfiprintf_r+0x96>
 8003bfa:	ebba 0b04 	subs.w	fp, sl, r4
 8003bfe:	d00b      	beq.n	8003c18 <_vfiprintf_r+0xc0>
 8003c00:	465b      	mov	r3, fp
 8003c02:	4622      	mov	r2, r4
 8003c04:	4629      	mov	r1, r5
 8003c06:	4630      	mov	r0, r6
 8003c08:	f7ff ff93 	bl	8003b32 <__sfputs_r>
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	f000 80aa 	beq.w	8003d66 <_vfiprintf_r+0x20e>
 8003c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c14:	445a      	add	r2, fp
 8003c16:	9209      	str	r2, [sp, #36]	; 0x24
 8003c18:	f89a 3000 	ldrb.w	r3, [sl]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 80a2 	beq.w	8003d66 <_vfiprintf_r+0x20e>
 8003c22:	2300      	movs	r3, #0
 8003c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c2c:	f10a 0a01 	add.w	sl, sl, #1
 8003c30:	9304      	str	r3, [sp, #16]
 8003c32:	9307      	str	r3, [sp, #28]
 8003c34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c38:	931a      	str	r3, [sp, #104]	; 0x68
 8003c3a:	4654      	mov	r4, sl
 8003c3c:	2205      	movs	r2, #5
 8003c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c42:	4858      	ldr	r0, [pc, #352]	; (8003da4 <_vfiprintf_r+0x24c>)
 8003c44:	f000 fcbc 	bl	80045c0 <memchr>
 8003c48:	9a04      	ldr	r2, [sp, #16]
 8003c4a:	b9d8      	cbnz	r0, 8003c84 <_vfiprintf_r+0x12c>
 8003c4c:	06d1      	lsls	r1, r2, #27
 8003c4e:	bf44      	itt	mi
 8003c50:	2320      	movmi	r3, #32
 8003c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c56:	0713      	lsls	r3, r2, #28
 8003c58:	bf44      	itt	mi
 8003c5a:	232b      	movmi	r3, #43	; 0x2b
 8003c5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c60:	f89a 3000 	ldrb.w	r3, [sl]
 8003c64:	2b2a      	cmp	r3, #42	; 0x2a
 8003c66:	d015      	beq.n	8003c94 <_vfiprintf_r+0x13c>
 8003c68:	4654      	mov	r4, sl
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f04f 0c0a 	mov.w	ip, #10
 8003c70:	9a07      	ldr	r2, [sp, #28]
 8003c72:	4621      	mov	r1, r4
 8003c74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c78:	3b30      	subs	r3, #48	; 0x30
 8003c7a:	2b09      	cmp	r3, #9
 8003c7c:	d94e      	bls.n	8003d1c <_vfiprintf_r+0x1c4>
 8003c7e:	b1b0      	cbz	r0, 8003cae <_vfiprintf_r+0x156>
 8003c80:	9207      	str	r2, [sp, #28]
 8003c82:	e014      	b.n	8003cae <_vfiprintf_r+0x156>
 8003c84:	eba0 0308 	sub.w	r3, r0, r8
 8003c88:	fa09 f303 	lsl.w	r3, r9, r3
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	46a2      	mov	sl, r4
 8003c90:	9304      	str	r3, [sp, #16]
 8003c92:	e7d2      	b.n	8003c3a <_vfiprintf_r+0xe2>
 8003c94:	9b03      	ldr	r3, [sp, #12]
 8003c96:	1d19      	adds	r1, r3, #4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	9103      	str	r1, [sp, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bfbb      	ittet	lt
 8003ca0:	425b      	neglt	r3, r3
 8003ca2:	f042 0202 	orrlt.w	r2, r2, #2
 8003ca6:	9307      	strge	r3, [sp, #28]
 8003ca8:	9307      	strlt	r3, [sp, #28]
 8003caa:	bfb8      	it	lt
 8003cac:	9204      	strlt	r2, [sp, #16]
 8003cae:	7823      	ldrb	r3, [r4, #0]
 8003cb0:	2b2e      	cmp	r3, #46	; 0x2e
 8003cb2:	d10c      	bne.n	8003cce <_vfiprintf_r+0x176>
 8003cb4:	7863      	ldrb	r3, [r4, #1]
 8003cb6:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb8:	d135      	bne.n	8003d26 <_vfiprintf_r+0x1ce>
 8003cba:	9b03      	ldr	r3, [sp, #12]
 8003cbc:	3402      	adds	r4, #2
 8003cbe:	1d1a      	adds	r2, r3, #4
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	9203      	str	r2, [sp, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bfb8      	it	lt
 8003cc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003ccc:	9305      	str	r3, [sp, #20]
 8003cce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003db4 <_vfiprintf_r+0x25c>
 8003cd2:	2203      	movs	r2, #3
 8003cd4:	4650      	mov	r0, sl
 8003cd6:	7821      	ldrb	r1, [r4, #0]
 8003cd8:	f000 fc72 	bl	80045c0 <memchr>
 8003cdc:	b140      	cbz	r0, 8003cf0 <_vfiprintf_r+0x198>
 8003cde:	2340      	movs	r3, #64	; 0x40
 8003ce0:	eba0 000a 	sub.w	r0, r0, sl
 8003ce4:	fa03 f000 	lsl.w	r0, r3, r0
 8003ce8:	9b04      	ldr	r3, [sp, #16]
 8003cea:	3401      	adds	r4, #1
 8003cec:	4303      	orrs	r3, r0
 8003cee:	9304      	str	r3, [sp, #16]
 8003cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf4:	2206      	movs	r2, #6
 8003cf6:	482c      	ldr	r0, [pc, #176]	; (8003da8 <_vfiprintf_r+0x250>)
 8003cf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cfc:	f000 fc60 	bl	80045c0 <memchr>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d03f      	beq.n	8003d84 <_vfiprintf_r+0x22c>
 8003d04:	4b29      	ldr	r3, [pc, #164]	; (8003dac <_vfiprintf_r+0x254>)
 8003d06:	bb1b      	cbnz	r3, 8003d50 <_vfiprintf_r+0x1f8>
 8003d08:	9b03      	ldr	r3, [sp, #12]
 8003d0a:	3307      	adds	r3, #7
 8003d0c:	f023 0307 	bic.w	r3, r3, #7
 8003d10:	3308      	adds	r3, #8
 8003d12:	9303      	str	r3, [sp, #12]
 8003d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d16:	443b      	add	r3, r7
 8003d18:	9309      	str	r3, [sp, #36]	; 0x24
 8003d1a:	e767      	b.n	8003bec <_vfiprintf_r+0x94>
 8003d1c:	460c      	mov	r4, r1
 8003d1e:	2001      	movs	r0, #1
 8003d20:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d24:	e7a5      	b.n	8003c72 <_vfiprintf_r+0x11a>
 8003d26:	2300      	movs	r3, #0
 8003d28:	f04f 0c0a 	mov.w	ip, #10
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	3401      	adds	r4, #1
 8003d30:	9305      	str	r3, [sp, #20]
 8003d32:	4620      	mov	r0, r4
 8003d34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d38:	3a30      	subs	r2, #48	; 0x30
 8003d3a:	2a09      	cmp	r2, #9
 8003d3c:	d903      	bls.n	8003d46 <_vfiprintf_r+0x1ee>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0c5      	beq.n	8003cce <_vfiprintf_r+0x176>
 8003d42:	9105      	str	r1, [sp, #20]
 8003d44:	e7c3      	b.n	8003cce <_vfiprintf_r+0x176>
 8003d46:	4604      	mov	r4, r0
 8003d48:	2301      	movs	r3, #1
 8003d4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d4e:	e7f0      	b.n	8003d32 <_vfiprintf_r+0x1da>
 8003d50:	ab03      	add	r3, sp, #12
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	462a      	mov	r2, r5
 8003d56:	4630      	mov	r0, r6
 8003d58:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <_vfiprintf_r+0x258>)
 8003d5a:	a904      	add	r1, sp, #16
 8003d5c:	f3af 8000 	nop.w
 8003d60:	4607      	mov	r7, r0
 8003d62:	1c78      	adds	r0, r7, #1
 8003d64:	d1d6      	bne.n	8003d14 <_vfiprintf_r+0x1bc>
 8003d66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d68:	07d9      	lsls	r1, r3, #31
 8003d6a:	d405      	bmi.n	8003d78 <_vfiprintf_r+0x220>
 8003d6c:	89ab      	ldrh	r3, [r5, #12]
 8003d6e:	059a      	lsls	r2, r3, #22
 8003d70:	d402      	bmi.n	8003d78 <_vfiprintf_r+0x220>
 8003d72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d74:	f7ff fe6d 	bl	8003a52 <__retarget_lock_release_recursive>
 8003d78:	89ab      	ldrh	r3, [r5, #12]
 8003d7a:	065b      	lsls	r3, r3, #25
 8003d7c:	f53f af12 	bmi.w	8003ba4 <_vfiprintf_r+0x4c>
 8003d80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d82:	e711      	b.n	8003ba8 <_vfiprintf_r+0x50>
 8003d84:	ab03      	add	r3, sp, #12
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	462a      	mov	r2, r5
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <_vfiprintf_r+0x258>)
 8003d8e:	a904      	add	r1, sp, #16
 8003d90:	f000 f882 	bl	8003e98 <_printf_i>
 8003d94:	e7e4      	b.n	8003d60 <_vfiprintf_r+0x208>
 8003d96:	bf00      	nop
 8003d98:	0800478c 	.word	0x0800478c
 8003d9c:	080047ac 	.word	0x080047ac
 8003da0:	0800476c 	.word	0x0800476c
 8003da4:	080047cc 	.word	0x080047cc
 8003da8:	080047d6 	.word	0x080047d6
 8003dac:	00000000 	.word	0x00000000
 8003db0:	08003b33 	.word	0x08003b33
 8003db4:	080047d2 	.word	0x080047d2

08003db8 <_printf_common>:
 8003db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dbc:	4616      	mov	r6, r2
 8003dbe:	4699      	mov	r9, r3
 8003dc0:	688a      	ldr	r2, [r1, #8]
 8003dc2:	690b      	ldr	r3, [r1, #16]
 8003dc4:	4607      	mov	r7, r0
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	bfb8      	it	lt
 8003dca:	4613      	movlt	r3, r2
 8003dcc:	6033      	str	r3, [r6, #0]
 8003dce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dd8:	b10a      	cbz	r2, 8003dde <_printf_common+0x26>
 8003dda:	3301      	adds	r3, #1
 8003ddc:	6033      	str	r3, [r6, #0]
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	0699      	lsls	r1, r3, #26
 8003de2:	bf42      	ittt	mi
 8003de4:	6833      	ldrmi	r3, [r6, #0]
 8003de6:	3302      	addmi	r3, #2
 8003de8:	6033      	strmi	r3, [r6, #0]
 8003dea:	6825      	ldr	r5, [r4, #0]
 8003dec:	f015 0506 	ands.w	r5, r5, #6
 8003df0:	d106      	bne.n	8003e00 <_printf_common+0x48>
 8003df2:	f104 0a19 	add.w	sl, r4, #25
 8003df6:	68e3      	ldr	r3, [r4, #12]
 8003df8:	6832      	ldr	r2, [r6, #0]
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	42ab      	cmp	r3, r5
 8003dfe:	dc28      	bgt.n	8003e52 <_printf_common+0x9a>
 8003e00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e04:	1e13      	subs	r3, r2, #0
 8003e06:	6822      	ldr	r2, [r4, #0]
 8003e08:	bf18      	it	ne
 8003e0a:	2301      	movne	r3, #1
 8003e0c:	0692      	lsls	r2, r2, #26
 8003e0e:	d42d      	bmi.n	8003e6c <_printf_common+0xb4>
 8003e10:	4649      	mov	r1, r9
 8003e12:	4638      	mov	r0, r7
 8003e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e18:	47c0      	blx	r8
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d020      	beq.n	8003e60 <_printf_common+0xa8>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	68e5      	ldr	r5, [r4, #12]
 8003e22:	f003 0306 	and.w	r3, r3, #6
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	bf18      	it	ne
 8003e2a:	2500      	movne	r5, #0
 8003e2c:	6832      	ldr	r2, [r6, #0]
 8003e2e:	f04f 0600 	mov.w	r6, #0
 8003e32:	68a3      	ldr	r3, [r4, #8]
 8003e34:	bf08      	it	eq
 8003e36:	1aad      	subeq	r5, r5, r2
 8003e38:	6922      	ldr	r2, [r4, #16]
 8003e3a:	bf08      	it	eq
 8003e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e40:	4293      	cmp	r3, r2
 8003e42:	bfc4      	itt	gt
 8003e44:	1a9b      	subgt	r3, r3, r2
 8003e46:	18ed      	addgt	r5, r5, r3
 8003e48:	341a      	adds	r4, #26
 8003e4a:	42b5      	cmp	r5, r6
 8003e4c:	d11a      	bne.n	8003e84 <_printf_common+0xcc>
 8003e4e:	2000      	movs	r0, #0
 8003e50:	e008      	b.n	8003e64 <_printf_common+0xac>
 8003e52:	2301      	movs	r3, #1
 8003e54:	4652      	mov	r2, sl
 8003e56:	4649      	mov	r1, r9
 8003e58:	4638      	mov	r0, r7
 8003e5a:	47c0      	blx	r8
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	d103      	bne.n	8003e68 <_printf_common+0xb0>
 8003e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e68:	3501      	adds	r5, #1
 8003e6a:	e7c4      	b.n	8003df6 <_printf_common+0x3e>
 8003e6c:	2030      	movs	r0, #48	; 0x30
 8003e6e:	18e1      	adds	r1, r4, r3
 8003e70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e7a:	4422      	add	r2, r4
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e82:	e7c5      	b.n	8003e10 <_printf_common+0x58>
 8003e84:	2301      	movs	r3, #1
 8003e86:	4622      	mov	r2, r4
 8003e88:	4649      	mov	r1, r9
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	47c0      	blx	r8
 8003e8e:	3001      	adds	r0, #1
 8003e90:	d0e6      	beq.n	8003e60 <_printf_common+0xa8>
 8003e92:	3601      	adds	r6, #1
 8003e94:	e7d9      	b.n	8003e4a <_printf_common+0x92>
	...

08003e98 <_printf_i>:
 8003e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	7e27      	ldrb	r7, [r4, #24]
 8003ea0:	4691      	mov	r9, r2
 8003ea2:	2f78      	cmp	r7, #120	; 0x78
 8003ea4:	4680      	mov	r8, r0
 8003ea6:	469a      	mov	sl, r3
 8003ea8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003eaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eae:	d807      	bhi.n	8003ec0 <_printf_i+0x28>
 8003eb0:	2f62      	cmp	r7, #98	; 0x62
 8003eb2:	d80a      	bhi.n	8003eca <_printf_i+0x32>
 8003eb4:	2f00      	cmp	r7, #0
 8003eb6:	f000 80d9 	beq.w	800406c <_printf_i+0x1d4>
 8003eba:	2f58      	cmp	r7, #88	; 0x58
 8003ebc:	f000 80a4 	beq.w	8004008 <_printf_i+0x170>
 8003ec0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ec8:	e03a      	b.n	8003f40 <_printf_i+0xa8>
 8003eca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ece:	2b15      	cmp	r3, #21
 8003ed0:	d8f6      	bhi.n	8003ec0 <_printf_i+0x28>
 8003ed2:	a001      	add	r0, pc, #4	; (adr r0, 8003ed8 <_printf_i+0x40>)
 8003ed4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ed8:	08003f31 	.word	0x08003f31
 8003edc:	08003f45 	.word	0x08003f45
 8003ee0:	08003ec1 	.word	0x08003ec1
 8003ee4:	08003ec1 	.word	0x08003ec1
 8003ee8:	08003ec1 	.word	0x08003ec1
 8003eec:	08003ec1 	.word	0x08003ec1
 8003ef0:	08003f45 	.word	0x08003f45
 8003ef4:	08003ec1 	.word	0x08003ec1
 8003ef8:	08003ec1 	.word	0x08003ec1
 8003efc:	08003ec1 	.word	0x08003ec1
 8003f00:	08003ec1 	.word	0x08003ec1
 8003f04:	08004053 	.word	0x08004053
 8003f08:	08003f75 	.word	0x08003f75
 8003f0c:	08004035 	.word	0x08004035
 8003f10:	08003ec1 	.word	0x08003ec1
 8003f14:	08003ec1 	.word	0x08003ec1
 8003f18:	08004075 	.word	0x08004075
 8003f1c:	08003ec1 	.word	0x08003ec1
 8003f20:	08003f75 	.word	0x08003f75
 8003f24:	08003ec1 	.word	0x08003ec1
 8003f28:	08003ec1 	.word	0x08003ec1
 8003f2c:	0800403d 	.word	0x0800403d
 8003f30:	680b      	ldr	r3, [r1, #0]
 8003f32:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f36:	1d1a      	adds	r2, r3, #4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	600a      	str	r2, [r1, #0]
 8003f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0a4      	b.n	800408e <_printf_i+0x1f6>
 8003f44:	6825      	ldr	r5, [r4, #0]
 8003f46:	6808      	ldr	r0, [r1, #0]
 8003f48:	062e      	lsls	r6, r5, #24
 8003f4a:	f100 0304 	add.w	r3, r0, #4
 8003f4e:	d50a      	bpl.n	8003f66 <_printf_i+0xce>
 8003f50:	6805      	ldr	r5, [r0, #0]
 8003f52:	600b      	str	r3, [r1, #0]
 8003f54:	2d00      	cmp	r5, #0
 8003f56:	da03      	bge.n	8003f60 <_printf_i+0xc8>
 8003f58:	232d      	movs	r3, #45	; 0x2d
 8003f5a:	426d      	negs	r5, r5
 8003f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f60:	230a      	movs	r3, #10
 8003f62:	485e      	ldr	r0, [pc, #376]	; (80040dc <_printf_i+0x244>)
 8003f64:	e019      	b.n	8003f9a <_printf_i+0x102>
 8003f66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f6a:	6805      	ldr	r5, [r0, #0]
 8003f6c:	600b      	str	r3, [r1, #0]
 8003f6e:	bf18      	it	ne
 8003f70:	b22d      	sxthne	r5, r5
 8003f72:	e7ef      	b.n	8003f54 <_printf_i+0xbc>
 8003f74:	680b      	ldr	r3, [r1, #0]
 8003f76:	6825      	ldr	r5, [r4, #0]
 8003f78:	1d18      	adds	r0, r3, #4
 8003f7a:	6008      	str	r0, [r1, #0]
 8003f7c:	0628      	lsls	r0, r5, #24
 8003f7e:	d501      	bpl.n	8003f84 <_printf_i+0xec>
 8003f80:	681d      	ldr	r5, [r3, #0]
 8003f82:	e002      	b.n	8003f8a <_printf_i+0xf2>
 8003f84:	0669      	lsls	r1, r5, #25
 8003f86:	d5fb      	bpl.n	8003f80 <_printf_i+0xe8>
 8003f88:	881d      	ldrh	r5, [r3, #0]
 8003f8a:	2f6f      	cmp	r7, #111	; 0x6f
 8003f8c:	bf0c      	ite	eq
 8003f8e:	2308      	moveq	r3, #8
 8003f90:	230a      	movne	r3, #10
 8003f92:	4852      	ldr	r0, [pc, #328]	; (80040dc <_printf_i+0x244>)
 8003f94:	2100      	movs	r1, #0
 8003f96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f9a:	6866      	ldr	r6, [r4, #4]
 8003f9c:	2e00      	cmp	r6, #0
 8003f9e:	bfa8      	it	ge
 8003fa0:	6821      	ldrge	r1, [r4, #0]
 8003fa2:	60a6      	str	r6, [r4, #8]
 8003fa4:	bfa4      	itt	ge
 8003fa6:	f021 0104 	bicge.w	r1, r1, #4
 8003faa:	6021      	strge	r1, [r4, #0]
 8003fac:	b90d      	cbnz	r5, 8003fb2 <_printf_i+0x11a>
 8003fae:	2e00      	cmp	r6, #0
 8003fb0:	d04d      	beq.n	800404e <_printf_i+0x1b6>
 8003fb2:	4616      	mov	r6, r2
 8003fb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fb8:	fb03 5711 	mls	r7, r3, r1, r5
 8003fbc:	5dc7      	ldrb	r7, [r0, r7]
 8003fbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fc2:	462f      	mov	r7, r5
 8003fc4:	42bb      	cmp	r3, r7
 8003fc6:	460d      	mov	r5, r1
 8003fc8:	d9f4      	bls.n	8003fb4 <_printf_i+0x11c>
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d10b      	bne.n	8003fe6 <_printf_i+0x14e>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	07df      	lsls	r7, r3, #31
 8003fd2:	d508      	bpl.n	8003fe6 <_printf_i+0x14e>
 8003fd4:	6923      	ldr	r3, [r4, #16]
 8003fd6:	6861      	ldr	r1, [r4, #4]
 8003fd8:	4299      	cmp	r1, r3
 8003fda:	bfde      	ittt	le
 8003fdc:	2330      	movle	r3, #48	; 0x30
 8003fde:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fe2:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003fe6:	1b92      	subs	r2, r2, r6
 8003fe8:	6122      	str	r2, [r4, #16]
 8003fea:	464b      	mov	r3, r9
 8003fec:	4621      	mov	r1, r4
 8003fee:	4640      	mov	r0, r8
 8003ff0:	f8cd a000 	str.w	sl, [sp]
 8003ff4:	aa03      	add	r2, sp, #12
 8003ff6:	f7ff fedf 	bl	8003db8 <_printf_common>
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d14c      	bne.n	8004098 <_printf_i+0x200>
 8003ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004002:	b004      	add	sp, #16
 8004004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004008:	4834      	ldr	r0, [pc, #208]	; (80040dc <_printf_i+0x244>)
 800400a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800400e:	680e      	ldr	r6, [r1, #0]
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	f856 5b04 	ldr.w	r5, [r6], #4
 8004016:	061f      	lsls	r7, r3, #24
 8004018:	600e      	str	r6, [r1, #0]
 800401a:	d514      	bpl.n	8004046 <_printf_i+0x1ae>
 800401c:	07d9      	lsls	r1, r3, #31
 800401e:	bf44      	itt	mi
 8004020:	f043 0320 	orrmi.w	r3, r3, #32
 8004024:	6023      	strmi	r3, [r4, #0]
 8004026:	b91d      	cbnz	r5, 8004030 <_printf_i+0x198>
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	f023 0320 	bic.w	r3, r3, #32
 800402e:	6023      	str	r3, [r4, #0]
 8004030:	2310      	movs	r3, #16
 8004032:	e7af      	b.n	8003f94 <_printf_i+0xfc>
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	f043 0320 	orr.w	r3, r3, #32
 800403a:	6023      	str	r3, [r4, #0]
 800403c:	2378      	movs	r3, #120	; 0x78
 800403e:	4828      	ldr	r0, [pc, #160]	; (80040e0 <_printf_i+0x248>)
 8004040:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004044:	e7e3      	b.n	800400e <_printf_i+0x176>
 8004046:	065e      	lsls	r6, r3, #25
 8004048:	bf48      	it	mi
 800404a:	b2ad      	uxthmi	r5, r5
 800404c:	e7e6      	b.n	800401c <_printf_i+0x184>
 800404e:	4616      	mov	r6, r2
 8004050:	e7bb      	b.n	8003fca <_printf_i+0x132>
 8004052:	680b      	ldr	r3, [r1, #0]
 8004054:	6826      	ldr	r6, [r4, #0]
 8004056:	1d1d      	adds	r5, r3, #4
 8004058:	6960      	ldr	r0, [r4, #20]
 800405a:	600d      	str	r5, [r1, #0]
 800405c:	0635      	lsls	r5, r6, #24
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	d501      	bpl.n	8004066 <_printf_i+0x1ce>
 8004062:	6018      	str	r0, [r3, #0]
 8004064:	e002      	b.n	800406c <_printf_i+0x1d4>
 8004066:	0671      	lsls	r1, r6, #25
 8004068:	d5fb      	bpl.n	8004062 <_printf_i+0x1ca>
 800406a:	8018      	strh	r0, [r3, #0]
 800406c:	2300      	movs	r3, #0
 800406e:	4616      	mov	r6, r2
 8004070:	6123      	str	r3, [r4, #16]
 8004072:	e7ba      	b.n	8003fea <_printf_i+0x152>
 8004074:	680b      	ldr	r3, [r1, #0]
 8004076:	1d1a      	adds	r2, r3, #4
 8004078:	600a      	str	r2, [r1, #0]
 800407a:	681e      	ldr	r6, [r3, #0]
 800407c:	2100      	movs	r1, #0
 800407e:	4630      	mov	r0, r6
 8004080:	6862      	ldr	r2, [r4, #4]
 8004082:	f000 fa9d 	bl	80045c0 <memchr>
 8004086:	b108      	cbz	r0, 800408c <_printf_i+0x1f4>
 8004088:	1b80      	subs	r0, r0, r6
 800408a:	6060      	str	r0, [r4, #4]
 800408c:	6863      	ldr	r3, [r4, #4]
 800408e:	6123      	str	r3, [r4, #16]
 8004090:	2300      	movs	r3, #0
 8004092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004096:	e7a8      	b.n	8003fea <_printf_i+0x152>
 8004098:	4632      	mov	r2, r6
 800409a:	4649      	mov	r1, r9
 800409c:	4640      	mov	r0, r8
 800409e:	6923      	ldr	r3, [r4, #16]
 80040a0:	47d0      	blx	sl
 80040a2:	3001      	adds	r0, #1
 80040a4:	d0ab      	beq.n	8003ffe <_printf_i+0x166>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	079b      	lsls	r3, r3, #30
 80040aa:	d413      	bmi.n	80040d4 <_printf_i+0x23c>
 80040ac:	68e0      	ldr	r0, [r4, #12]
 80040ae:	9b03      	ldr	r3, [sp, #12]
 80040b0:	4298      	cmp	r0, r3
 80040b2:	bfb8      	it	lt
 80040b4:	4618      	movlt	r0, r3
 80040b6:	e7a4      	b.n	8004002 <_printf_i+0x16a>
 80040b8:	2301      	movs	r3, #1
 80040ba:	4632      	mov	r2, r6
 80040bc:	4649      	mov	r1, r9
 80040be:	4640      	mov	r0, r8
 80040c0:	47d0      	blx	sl
 80040c2:	3001      	adds	r0, #1
 80040c4:	d09b      	beq.n	8003ffe <_printf_i+0x166>
 80040c6:	3501      	adds	r5, #1
 80040c8:	68e3      	ldr	r3, [r4, #12]
 80040ca:	9903      	ldr	r1, [sp, #12]
 80040cc:	1a5b      	subs	r3, r3, r1
 80040ce:	42ab      	cmp	r3, r5
 80040d0:	dcf2      	bgt.n	80040b8 <_printf_i+0x220>
 80040d2:	e7eb      	b.n	80040ac <_printf_i+0x214>
 80040d4:	2500      	movs	r5, #0
 80040d6:	f104 0619 	add.w	r6, r4, #25
 80040da:	e7f5      	b.n	80040c8 <_printf_i+0x230>
 80040dc:	080047dd 	.word	0x080047dd
 80040e0:	080047ee 	.word	0x080047ee

080040e4 <_sbrk_r>:
 80040e4:	b538      	push	{r3, r4, r5, lr}
 80040e6:	2300      	movs	r3, #0
 80040e8:	4d05      	ldr	r5, [pc, #20]	; (8004100 <_sbrk_r+0x1c>)
 80040ea:	4604      	mov	r4, r0
 80040ec:	4608      	mov	r0, r1
 80040ee:	602b      	str	r3, [r5, #0]
 80040f0:	f7fd f9a4 	bl	800143c <_sbrk>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	d102      	bne.n	80040fe <_sbrk_r+0x1a>
 80040f8:	682b      	ldr	r3, [r5, #0]
 80040fa:	b103      	cbz	r3, 80040fe <_sbrk_r+0x1a>
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	bd38      	pop	{r3, r4, r5, pc}
 8004100:	20000198 	.word	0x20000198

08004104 <__sread>:
 8004104:	b510      	push	{r4, lr}
 8004106:	460c      	mov	r4, r1
 8004108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800410c:	f000 fabe 	bl	800468c <_read_r>
 8004110:	2800      	cmp	r0, #0
 8004112:	bfab      	itete	ge
 8004114:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004116:	89a3      	ldrhlt	r3, [r4, #12]
 8004118:	181b      	addge	r3, r3, r0
 800411a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800411e:	bfac      	ite	ge
 8004120:	6563      	strge	r3, [r4, #84]	; 0x54
 8004122:	81a3      	strhlt	r3, [r4, #12]
 8004124:	bd10      	pop	{r4, pc}

08004126 <__swrite>:
 8004126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800412a:	461f      	mov	r7, r3
 800412c:	898b      	ldrh	r3, [r1, #12]
 800412e:	4605      	mov	r5, r0
 8004130:	05db      	lsls	r3, r3, #23
 8004132:	460c      	mov	r4, r1
 8004134:	4616      	mov	r6, r2
 8004136:	d505      	bpl.n	8004144 <__swrite+0x1e>
 8004138:	2302      	movs	r3, #2
 800413a:	2200      	movs	r2, #0
 800413c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004140:	f000 f9c8 	bl	80044d4 <_lseek_r>
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	4632      	mov	r2, r6
 8004148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800414c:	81a3      	strh	r3, [r4, #12]
 800414e:	4628      	mov	r0, r5
 8004150:	463b      	mov	r3, r7
 8004152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800415a:	f000 b869 	b.w	8004230 <_write_r>

0800415e <__sseek>:
 800415e:	b510      	push	{r4, lr}
 8004160:	460c      	mov	r4, r1
 8004162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004166:	f000 f9b5 	bl	80044d4 <_lseek_r>
 800416a:	1c43      	adds	r3, r0, #1
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	bf15      	itete	ne
 8004170:	6560      	strne	r0, [r4, #84]	; 0x54
 8004172:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004176:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800417a:	81a3      	strheq	r3, [r4, #12]
 800417c:	bf18      	it	ne
 800417e:	81a3      	strhne	r3, [r4, #12]
 8004180:	bd10      	pop	{r4, pc}

08004182 <__sclose>:
 8004182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004186:	f000 b8d3 	b.w	8004330 <_close_r>
	...

0800418c <__swbuf_r>:
 800418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418e:	460e      	mov	r6, r1
 8004190:	4614      	mov	r4, r2
 8004192:	4605      	mov	r5, r0
 8004194:	b118      	cbz	r0, 800419e <__swbuf_r+0x12>
 8004196:	6983      	ldr	r3, [r0, #24]
 8004198:	b90b      	cbnz	r3, 800419e <__swbuf_r+0x12>
 800419a:	f7ff fbbb 	bl	8003914 <__sinit>
 800419e:	4b21      	ldr	r3, [pc, #132]	; (8004224 <__swbuf_r+0x98>)
 80041a0:	429c      	cmp	r4, r3
 80041a2:	d12b      	bne.n	80041fc <__swbuf_r+0x70>
 80041a4:	686c      	ldr	r4, [r5, #4]
 80041a6:	69a3      	ldr	r3, [r4, #24]
 80041a8:	60a3      	str	r3, [r4, #8]
 80041aa:	89a3      	ldrh	r3, [r4, #12]
 80041ac:	071a      	lsls	r2, r3, #28
 80041ae:	d52f      	bpl.n	8004210 <__swbuf_r+0x84>
 80041b0:	6923      	ldr	r3, [r4, #16]
 80041b2:	b36b      	cbz	r3, 8004210 <__swbuf_r+0x84>
 80041b4:	6923      	ldr	r3, [r4, #16]
 80041b6:	6820      	ldr	r0, [r4, #0]
 80041b8:	b2f6      	uxtb	r6, r6
 80041ba:	1ac0      	subs	r0, r0, r3
 80041bc:	6963      	ldr	r3, [r4, #20]
 80041be:	4637      	mov	r7, r6
 80041c0:	4283      	cmp	r3, r0
 80041c2:	dc04      	bgt.n	80041ce <__swbuf_r+0x42>
 80041c4:	4621      	mov	r1, r4
 80041c6:	4628      	mov	r0, r5
 80041c8:	f000 f948 	bl	800445c <_fflush_r>
 80041cc:	bb30      	cbnz	r0, 800421c <__swbuf_r+0x90>
 80041ce:	68a3      	ldr	r3, [r4, #8]
 80041d0:	3001      	adds	r0, #1
 80041d2:	3b01      	subs	r3, #1
 80041d4:	60a3      	str	r3, [r4, #8]
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	6022      	str	r2, [r4, #0]
 80041dc:	701e      	strb	r6, [r3, #0]
 80041de:	6963      	ldr	r3, [r4, #20]
 80041e0:	4283      	cmp	r3, r0
 80041e2:	d004      	beq.n	80041ee <__swbuf_r+0x62>
 80041e4:	89a3      	ldrh	r3, [r4, #12]
 80041e6:	07db      	lsls	r3, r3, #31
 80041e8:	d506      	bpl.n	80041f8 <__swbuf_r+0x6c>
 80041ea:	2e0a      	cmp	r6, #10
 80041ec:	d104      	bne.n	80041f8 <__swbuf_r+0x6c>
 80041ee:	4621      	mov	r1, r4
 80041f0:	4628      	mov	r0, r5
 80041f2:	f000 f933 	bl	800445c <_fflush_r>
 80041f6:	b988      	cbnz	r0, 800421c <__swbuf_r+0x90>
 80041f8:	4638      	mov	r0, r7
 80041fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041fc:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <__swbuf_r+0x9c>)
 80041fe:	429c      	cmp	r4, r3
 8004200:	d101      	bne.n	8004206 <__swbuf_r+0x7a>
 8004202:	68ac      	ldr	r4, [r5, #8]
 8004204:	e7cf      	b.n	80041a6 <__swbuf_r+0x1a>
 8004206:	4b09      	ldr	r3, [pc, #36]	; (800422c <__swbuf_r+0xa0>)
 8004208:	429c      	cmp	r4, r3
 800420a:	bf08      	it	eq
 800420c:	68ec      	ldreq	r4, [r5, #12]
 800420e:	e7ca      	b.n	80041a6 <__swbuf_r+0x1a>
 8004210:	4621      	mov	r1, r4
 8004212:	4628      	mov	r0, r5
 8004214:	f000 f81e 	bl	8004254 <__swsetup_r>
 8004218:	2800      	cmp	r0, #0
 800421a:	d0cb      	beq.n	80041b4 <__swbuf_r+0x28>
 800421c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004220:	e7ea      	b.n	80041f8 <__swbuf_r+0x6c>
 8004222:	bf00      	nop
 8004224:	0800478c 	.word	0x0800478c
 8004228:	080047ac 	.word	0x080047ac
 800422c:	0800476c 	.word	0x0800476c

08004230 <_write_r>:
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	4604      	mov	r4, r0
 8004234:	4608      	mov	r0, r1
 8004236:	4611      	mov	r1, r2
 8004238:	2200      	movs	r2, #0
 800423a:	4d05      	ldr	r5, [pc, #20]	; (8004250 <_write_r+0x20>)
 800423c:	602a      	str	r2, [r5, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	f7fd f8af 	bl	80013a2 <_write>
 8004244:	1c43      	adds	r3, r0, #1
 8004246:	d102      	bne.n	800424e <_write_r+0x1e>
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	b103      	cbz	r3, 800424e <_write_r+0x1e>
 800424c:	6023      	str	r3, [r4, #0]
 800424e:	bd38      	pop	{r3, r4, r5, pc}
 8004250:	20000198 	.word	0x20000198

08004254 <__swsetup_r>:
 8004254:	4b32      	ldr	r3, [pc, #200]	; (8004320 <__swsetup_r+0xcc>)
 8004256:	b570      	push	{r4, r5, r6, lr}
 8004258:	681d      	ldr	r5, [r3, #0]
 800425a:	4606      	mov	r6, r0
 800425c:	460c      	mov	r4, r1
 800425e:	b125      	cbz	r5, 800426a <__swsetup_r+0x16>
 8004260:	69ab      	ldr	r3, [r5, #24]
 8004262:	b913      	cbnz	r3, 800426a <__swsetup_r+0x16>
 8004264:	4628      	mov	r0, r5
 8004266:	f7ff fb55 	bl	8003914 <__sinit>
 800426a:	4b2e      	ldr	r3, [pc, #184]	; (8004324 <__swsetup_r+0xd0>)
 800426c:	429c      	cmp	r4, r3
 800426e:	d10f      	bne.n	8004290 <__swsetup_r+0x3c>
 8004270:	686c      	ldr	r4, [r5, #4]
 8004272:	89a3      	ldrh	r3, [r4, #12]
 8004274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004278:	0719      	lsls	r1, r3, #28
 800427a:	d42c      	bmi.n	80042d6 <__swsetup_r+0x82>
 800427c:	06dd      	lsls	r5, r3, #27
 800427e:	d411      	bmi.n	80042a4 <__swsetup_r+0x50>
 8004280:	2309      	movs	r3, #9
 8004282:	6033      	str	r3, [r6, #0]
 8004284:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800428c:	81a3      	strh	r3, [r4, #12]
 800428e:	e03e      	b.n	800430e <__swsetup_r+0xba>
 8004290:	4b25      	ldr	r3, [pc, #148]	; (8004328 <__swsetup_r+0xd4>)
 8004292:	429c      	cmp	r4, r3
 8004294:	d101      	bne.n	800429a <__swsetup_r+0x46>
 8004296:	68ac      	ldr	r4, [r5, #8]
 8004298:	e7eb      	b.n	8004272 <__swsetup_r+0x1e>
 800429a:	4b24      	ldr	r3, [pc, #144]	; (800432c <__swsetup_r+0xd8>)
 800429c:	429c      	cmp	r4, r3
 800429e:	bf08      	it	eq
 80042a0:	68ec      	ldreq	r4, [r5, #12]
 80042a2:	e7e6      	b.n	8004272 <__swsetup_r+0x1e>
 80042a4:	0758      	lsls	r0, r3, #29
 80042a6:	d512      	bpl.n	80042ce <__swsetup_r+0x7a>
 80042a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042aa:	b141      	cbz	r1, 80042be <__swsetup_r+0x6a>
 80042ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042b0:	4299      	cmp	r1, r3
 80042b2:	d002      	beq.n	80042ba <__swsetup_r+0x66>
 80042b4:	4630      	mov	r0, r6
 80042b6:	f000 f99d 	bl	80045f4 <_free_r>
 80042ba:	2300      	movs	r3, #0
 80042bc:	6363      	str	r3, [r4, #52]	; 0x34
 80042be:	89a3      	ldrh	r3, [r4, #12]
 80042c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042c4:	81a3      	strh	r3, [r4, #12]
 80042c6:	2300      	movs	r3, #0
 80042c8:	6063      	str	r3, [r4, #4]
 80042ca:	6923      	ldr	r3, [r4, #16]
 80042cc:	6023      	str	r3, [r4, #0]
 80042ce:	89a3      	ldrh	r3, [r4, #12]
 80042d0:	f043 0308 	orr.w	r3, r3, #8
 80042d4:	81a3      	strh	r3, [r4, #12]
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	b94b      	cbnz	r3, 80042ee <__swsetup_r+0x9a>
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e4:	d003      	beq.n	80042ee <__swsetup_r+0x9a>
 80042e6:	4621      	mov	r1, r4
 80042e8:	4630      	mov	r0, r6
 80042ea:	f000 f929 	bl	8004540 <__smakebuf_r>
 80042ee:	89a0      	ldrh	r0, [r4, #12]
 80042f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042f4:	f010 0301 	ands.w	r3, r0, #1
 80042f8:	d00a      	beq.n	8004310 <__swsetup_r+0xbc>
 80042fa:	2300      	movs	r3, #0
 80042fc:	60a3      	str	r3, [r4, #8]
 80042fe:	6963      	ldr	r3, [r4, #20]
 8004300:	425b      	negs	r3, r3
 8004302:	61a3      	str	r3, [r4, #24]
 8004304:	6923      	ldr	r3, [r4, #16]
 8004306:	b943      	cbnz	r3, 800431a <__swsetup_r+0xc6>
 8004308:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800430c:	d1ba      	bne.n	8004284 <__swsetup_r+0x30>
 800430e:	bd70      	pop	{r4, r5, r6, pc}
 8004310:	0781      	lsls	r1, r0, #30
 8004312:	bf58      	it	pl
 8004314:	6963      	ldrpl	r3, [r4, #20]
 8004316:	60a3      	str	r3, [r4, #8]
 8004318:	e7f4      	b.n	8004304 <__swsetup_r+0xb0>
 800431a:	2000      	movs	r0, #0
 800431c:	e7f7      	b.n	800430e <__swsetup_r+0xba>
 800431e:	bf00      	nop
 8004320:	2000000c 	.word	0x2000000c
 8004324:	0800478c 	.word	0x0800478c
 8004328:	080047ac 	.word	0x080047ac
 800432c:	0800476c 	.word	0x0800476c

08004330 <_close_r>:
 8004330:	b538      	push	{r3, r4, r5, lr}
 8004332:	2300      	movs	r3, #0
 8004334:	4d05      	ldr	r5, [pc, #20]	; (800434c <_close_r+0x1c>)
 8004336:	4604      	mov	r4, r0
 8004338:	4608      	mov	r0, r1
 800433a:	602b      	str	r3, [r5, #0]
 800433c:	f7fd f84d 	bl	80013da <_close>
 8004340:	1c43      	adds	r3, r0, #1
 8004342:	d102      	bne.n	800434a <_close_r+0x1a>
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	b103      	cbz	r3, 800434a <_close_r+0x1a>
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	bd38      	pop	{r3, r4, r5, pc}
 800434c:	20000198 	.word	0x20000198

08004350 <__sflush_r>:
 8004350:	898a      	ldrh	r2, [r1, #12]
 8004352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004356:	4605      	mov	r5, r0
 8004358:	0710      	lsls	r0, r2, #28
 800435a:	460c      	mov	r4, r1
 800435c:	d458      	bmi.n	8004410 <__sflush_r+0xc0>
 800435e:	684b      	ldr	r3, [r1, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	dc05      	bgt.n	8004370 <__sflush_r+0x20>
 8004364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	dc02      	bgt.n	8004370 <__sflush_r+0x20>
 800436a:	2000      	movs	r0, #0
 800436c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004372:	2e00      	cmp	r6, #0
 8004374:	d0f9      	beq.n	800436a <__sflush_r+0x1a>
 8004376:	2300      	movs	r3, #0
 8004378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800437c:	682f      	ldr	r7, [r5, #0]
 800437e:	602b      	str	r3, [r5, #0]
 8004380:	d032      	beq.n	80043e8 <__sflush_r+0x98>
 8004382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	075a      	lsls	r2, r3, #29
 8004388:	d505      	bpl.n	8004396 <__sflush_r+0x46>
 800438a:	6863      	ldr	r3, [r4, #4]
 800438c:	1ac0      	subs	r0, r0, r3
 800438e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004390:	b10b      	cbz	r3, 8004396 <__sflush_r+0x46>
 8004392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004394:	1ac0      	subs	r0, r0, r3
 8004396:	2300      	movs	r3, #0
 8004398:	4602      	mov	r2, r0
 800439a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800439c:	4628      	mov	r0, r5
 800439e:	6a21      	ldr	r1, [r4, #32]
 80043a0:	47b0      	blx	r6
 80043a2:	1c43      	adds	r3, r0, #1
 80043a4:	89a3      	ldrh	r3, [r4, #12]
 80043a6:	d106      	bne.n	80043b6 <__sflush_r+0x66>
 80043a8:	6829      	ldr	r1, [r5, #0]
 80043aa:	291d      	cmp	r1, #29
 80043ac:	d82c      	bhi.n	8004408 <__sflush_r+0xb8>
 80043ae:	4a2a      	ldr	r2, [pc, #168]	; (8004458 <__sflush_r+0x108>)
 80043b0:	40ca      	lsrs	r2, r1
 80043b2:	07d6      	lsls	r6, r2, #31
 80043b4:	d528      	bpl.n	8004408 <__sflush_r+0xb8>
 80043b6:	2200      	movs	r2, #0
 80043b8:	6062      	str	r2, [r4, #4]
 80043ba:	6922      	ldr	r2, [r4, #16]
 80043bc:	04d9      	lsls	r1, r3, #19
 80043be:	6022      	str	r2, [r4, #0]
 80043c0:	d504      	bpl.n	80043cc <__sflush_r+0x7c>
 80043c2:	1c42      	adds	r2, r0, #1
 80043c4:	d101      	bne.n	80043ca <__sflush_r+0x7a>
 80043c6:	682b      	ldr	r3, [r5, #0]
 80043c8:	b903      	cbnz	r3, 80043cc <__sflush_r+0x7c>
 80043ca:	6560      	str	r0, [r4, #84]	; 0x54
 80043cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ce:	602f      	str	r7, [r5, #0]
 80043d0:	2900      	cmp	r1, #0
 80043d2:	d0ca      	beq.n	800436a <__sflush_r+0x1a>
 80043d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043d8:	4299      	cmp	r1, r3
 80043da:	d002      	beq.n	80043e2 <__sflush_r+0x92>
 80043dc:	4628      	mov	r0, r5
 80043de:	f000 f909 	bl	80045f4 <_free_r>
 80043e2:	2000      	movs	r0, #0
 80043e4:	6360      	str	r0, [r4, #52]	; 0x34
 80043e6:	e7c1      	b.n	800436c <__sflush_r+0x1c>
 80043e8:	6a21      	ldr	r1, [r4, #32]
 80043ea:	2301      	movs	r3, #1
 80043ec:	4628      	mov	r0, r5
 80043ee:	47b0      	blx	r6
 80043f0:	1c41      	adds	r1, r0, #1
 80043f2:	d1c7      	bne.n	8004384 <__sflush_r+0x34>
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0c4      	beq.n	8004384 <__sflush_r+0x34>
 80043fa:	2b1d      	cmp	r3, #29
 80043fc:	d001      	beq.n	8004402 <__sflush_r+0xb2>
 80043fe:	2b16      	cmp	r3, #22
 8004400:	d101      	bne.n	8004406 <__sflush_r+0xb6>
 8004402:	602f      	str	r7, [r5, #0]
 8004404:	e7b1      	b.n	800436a <__sflush_r+0x1a>
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800440c:	81a3      	strh	r3, [r4, #12]
 800440e:	e7ad      	b.n	800436c <__sflush_r+0x1c>
 8004410:	690f      	ldr	r7, [r1, #16]
 8004412:	2f00      	cmp	r7, #0
 8004414:	d0a9      	beq.n	800436a <__sflush_r+0x1a>
 8004416:	0793      	lsls	r3, r2, #30
 8004418:	bf18      	it	ne
 800441a:	2300      	movne	r3, #0
 800441c:	680e      	ldr	r6, [r1, #0]
 800441e:	bf08      	it	eq
 8004420:	694b      	ldreq	r3, [r1, #20]
 8004422:	eba6 0807 	sub.w	r8, r6, r7
 8004426:	600f      	str	r7, [r1, #0]
 8004428:	608b      	str	r3, [r1, #8]
 800442a:	f1b8 0f00 	cmp.w	r8, #0
 800442e:	dd9c      	ble.n	800436a <__sflush_r+0x1a>
 8004430:	4643      	mov	r3, r8
 8004432:	463a      	mov	r2, r7
 8004434:	4628      	mov	r0, r5
 8004436:	6a21      	ldr	r1, [r4, #32]
 8004438:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800443a:	47b0      	blx	r6
 800443c:	2800      	cmp	r0, #0
 800443e:	dc06      	bgt.n	800444e <__sflush_r+0xfe>
 8004440:	89a3      	ldrh	r3, [r4, #12]
 8004442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800444a:	81a3      	strh	r3, [r4, #12]
 800444c:	e78e      	b.n	800436c <__sflush_r+0x1c>
 800444e:	4407      	add	r7, r0
 8004450:	eba8 0800 	sub.w	r8, r8, r0
 8004454:	e7e9      	b.n	800442a <__sflush_r+0xda>
 8004456:	bf00      	nop
 8004458:	20400001 	.word	0x20400001

0800445c <_fflush_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	690b      	ldr	r3, [r1, #16]
 8004460:	4605      	mov	r5, r0
 8004462:	460c      	mov	r4, r1
 8004464:	b913      	cbnz	r3, 800446c <_fflush_r+0x10>
 8004466:	2500      	movs	r5, #0
 8004468:	4628      	mov	r0, r5
 800446a:	bd38      	pop	{r3, r4, r5, pc}
 800446c:	b118      	cbz	r0, 8004476 <_fflush_r+0x1a>
 800446e:	6983      	ldr	r3, [r0, #24]
 8004470:	b90b      	cbnz	r3, 8004476 <_fflush_r+0x1a>
 8004472:	f7ff fa4f 	bl	8003914 <__sinit>
 8004476:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <_fflush_r+0x6c>)
 8004478:	429c      	cmp	r4, r3
 800447a:	d11b      	bne.n	80044b4 <_fflush_r+0x58>
 800447c:	686c      	ldr	r4, [r5, #4]
 800447e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0ef      	beq.n	8004466 <_fflush_r+0xa>
 8004486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004488:	07d0      	lsls	r0, r2, #31
 800448a:	d404      	bmi.n	8004496 <_fflush_r+0x3a>
 800448c:	0599      	lsls	r1, r3, #22
 800448e:	d402      	bmi.n	8004496 <_fflush_r+0x3a>
 8004490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004492:	f7ff fadd 	bl	8003a50 <__retarget_lock_acquire_recursive>
 8004496:	4628      	mov	r0, r5
 8004498:	4621      	mov	r1, r4
 800449a:	f7ff ff59 	bl	8004350 <__sflush_r>
 800449e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044a0:	4605      	mov	r5, r0
 80044a2:	07da      	lsls	r2, r3, #31
 80044a4:	d4e0      	bmi.n	8004468 <_fflush_r+0xc>
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	059b      	lsls	r3, r3, #22
 80044aa:	d4dd      	bmi.n	8004468 <_fflush_r+0xc>
 80044ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ae:	f7ff fad0 	bl	8003a52 <__retarget_lock_release_recursive>
 80044b2:	e7d9      	b.n	8004468 <_fflush_r+0xc>
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <_fflush_r+0x70>)
 80044b6:	429c      	cmp	r4, r3
 80044b8:	d101      	bne.n	80044be <_fflush_r+0x62>
 80044ba:	68ac      	ldr	r4, [r5, #8]
 80044bc:	e7df      	b.n	800447e <_fflush_r+0x22>
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <_fflush_r+0x74>)
 80044c0:	429c      	cmp	r4, r3
 80044c2:	bf08      	it	eq
 80044c4:	68ec      	ldreq	r4, [r5, #12]
 80044c6:	e7da      	b.n	800447e <_fflush_r+0x22>
 80044c8:	0800478c 	.word	0x0800478c
 80044cc:	080047ac 	.word	0x080047ac
 80044d0:	0800476c 	.word	0x0800476c

080044d4 <_lseek_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4604      	mov	r4, r0
 80044d8:	4608      	mov	r0, r1
 80044da:	4611      	mov	r1, r2
 80044dc:	2200      	movs	r2, #0
 80044de:	4d05      	ldr	r5, [pc, #20]	; (80044f4 <_lseek_r+0x20>)
 80044e0:	602a      	str	r2, [r5, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	f7fc ff9d 	bl	8001422 <_lseek>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	d102      	bne.n	80044f2 <_lseek_r+0x1e>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	b103      	cbz	r3, 80044f2 <_lseek_r+0x1e>
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
 80044f4:	20000198 	.word	0x20000198

080044f8 <__swhatbuf_r>:
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	460e      	mov	r6, r1
 80044fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004500:	4614      	mov	r4, r2
 8004502:	2900      	cmp	r1, #0
 8004504:	461d      	mov	r5, r3
 8004506:	b096      	sub	sp, #88	; 0x58
 8004508:	da07      	bge.n	800451a <__swhatbuf_r+0x22>
 800450a:	2300      	movs	r3, #0
 800450c:	602b      	str	r3, [r5, #0]
 800450e:	89b3      	ldrh	r3, [r6, #12]
 8004510:	061a      	lsls	r2, r3, #24
 8004512:	d410      	bmi.n	8004536 <__swhatbuf_r+0x3e>
 8004514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004518:	e00e      	b.n	8004538 <__swhatbuf_r+0x40>
 800451a:	466a      	mov	r2, sp
 800451c:	f000 f8c8 	bl	80046b0 <_fstat_r>
 8004520:	2800      	cmp	r0, #0
 8004522:	dbf2      	blt.n	800450a <__swhatbuf_r+0x12>
 8004524:	9a01      	ldr	r2, [sp, #4]
 8004526:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800452a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800452e:	425a      	negs	r2, r3
 8004530:	415a      	adcs	r2, r3
 8004532:	602a      	str	r2, [r5, #0]
 8004534:	e7ee      	b.n	8004514 <__swhatbuf_r+0x1c>
 8004536:	2340      	movs	r3, #64	; 0x40
 8004538:	2000      	movs	r0, #0
 800453a:	6023      	str	r3, [r4, #0]
 800453c:	b016      	add	sp, #88	; 0x58
 800453e:	bd70      	pop	{r4, r5, r6, pc}

08004540 <__smakebuf_r>:
 8004540:	898b      	ldrh	r3, [r1, #12]
 8004542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004544:	079d      	lsls	r5, r3, #30
 8004546:	4606      	mov	r6, r0
 8004548:	460c      	mov	r4, r1
 800454a:	d507      	bpl.n	800455c <__smakebuf_r+0x1c>
 800454c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	6123      	str	r3, [r4, #16]
 8004554:	2301      	movs	r3, #1
 8004556:	6163      	str	r3, [r4, #20]
 8004558:	b002      	add	sp, #8
 800455a:	bd70      	pop	{r4, r5, r6, pc}
 800455c:	466a      	mov	r2, sp
 800455e:	ab01      	add	r3, sp, #4
 8004560:	f7ff ffca 	bl	80044f8 <__swhatbuf_r>
 8004564:	9900      	ldr	r1, [sp, #0]
 8004566:	4605      	mov	r5, r0
 8004568:	4630      	mov	r0, r6
 800456a:	f7ff fa73 	bl	8003a54 <_malloc_r>
 800456e:	b948      	cbnz	r0, 8004584 <__smakebuf_r+0x44>
 8004570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004574:	059a      	lsls	r2, r3, #22
 8004576:	d4ef      	bmi.n	8004558 <__smakebuf_r+0x18>
 8004578:	f023 0303 	bic.w	r3, r3, #3
 800457c:	f043 0302 	orr.w	r3, r3, #2
 8004580:	81a3      	strh	r3, [r4, #12]
 8004582:	e7e3      	b.n	800454c <__smakebuf_r+0xc>
 8004584:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <__smakebuf_r+0x7c>)
 8004586:	62b3      	str	r3, [r6, #40]	; 0x28
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	6020      	str	r0, [r4, #0]
 800458c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004590:	81a3      	strh	r3, [r4, #12]
 8004592:	9b00      	ldr	r3, [sp, #0]
 8004594:	6120      	str	r0, [r4, #16]
 8004596:	6163      	str	r3, [r4, #20]
 8004598:	9b01      	ldr	r3, [sp, #4]
 800459a:	b15b      	cbz	r3, 80045b4 <__smakebuf_r+0x74>
 800459c:	4630      	mov	r0, r6
 800459e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045a2:	f000 f897 	bl	80046d4 <_isatty_r>
 80045a6:	b128      	cbz	r0, 80045b4 <__smakebuf_r+0x74>
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	f023 0303 	bic.w	r3, r3, #3
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	81a3      	strh	r3, [r4, #12]
 80045b4:	89a0      	ldrh	r0, [r4, #12]
 80045b6:	4305      	orrs	r5, r0
 80045b8:	81a5      	strh	r5, [r4, #12]
 80045ba:	e7cd      	b.n	8004558 <__smakebuf_r+0x18>
 80045bc:	080038ad 	.word	0x080038ad

080045c0 <memchr>:
 80045c0:	4603      	mov	r3, r0
 80045c2:	b510      	push	{r4, lr}
 80045c4:	b2c9      	uxtb	r1, r1
 80045c6:	4402      	add	r2, r0
 80045c8:	4293      	cmp	r3, r2
 80045ca:	4618      	mov	r0, r3
 80045cc:	d101      	bne.n	80045d2 <memchr+0x12>
 80045ce:	2000      	movs	r0, #0
 80045d0:	e003      	b.n	80045da <memchr+0x1a>
 80045d2:	7804      	ldrb	r4, [r0, #0]
 80045d4:	3301      	adds	r3, #1
 80045d6:	428c      	cmp	r4, r1
 80045d8:	d1f6      	bne.n	80045c8 <memchr+0x8>
 80045da:	bd10      	pop	{r4, pc}

080045dc <__malloc_lock>:
 80045dc:	4801      	ldr	r0, [pc, #4]	; (80045e4 <__malloc_lock+0x8>)
 80045de:	f7ff ba37 	b.w	8003a50 <__retarget_lock_acquire_recursive>
 80045e2:	bf00      	nop
 80045e4:	20000190 	.word	0x20000190

080045e8 <__malloc_unlock>:
 80045e8:	4801      	ldr	r0, [pc, #4]	; (80045f0 <__malloc_unlock+0x8>)
 80045ea:	f7ff ba32 	b.w	8003a52 <__retarget_lock_release_recursive>
 80045ee:	bf00      	nop
 80045f0:	20000190 	.word	0x20000190

080045f4 <_free_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4605      	mov	r5, r0
 80045f8:	2900      	cmp	r1, #0
 80045fa:	d043      	beq.n	8004684 <_free_r+0x90>
 80045fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004600:	1f0c      	subs	r4, r1, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	bfb8      	it	lt
 8004606:	18e4      	addlt	r4, r4, r3
 8004608:	f7ff ffe8 	bl	80045dc <__malloc_lock>
 800460c:	4a1e      	ldr	r2, [pc, #120]	; (8004688 <_free_r+0x94>)
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	4610      	mov	r0, r2
 8004612:	b933      	cbnz	r3, 8004622 <_free_r+0x2e>
 8004614:	6063      	str	r3, [r4, #4]
 8004616:	6014      	str	r4, [r2, #0]
 8004618:	4628      	mov	r0, r5
 800461a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800461e:	f7ff bfe3 	b.w	80045e8 <__malloc_unlock>
 8004622:	42a3      	cmp	r3, r4
 8004624:	d90a      	bls.n	800463c <_free_r+0x48>
 8004626:	6821      	ldr	r1, [r4, #0]
 8004628:	1862      	adds	r2, r4, r1
 800462a:	4293      	cmp	r3, r2
 800462c:	bf01      	itttt	eq
 800462e:	681a      	ldreq	r2, [r3, #0]
 8004630:	685b      	ldreq	r3, [r3, #4]
 8004632:	1852      	addeq	r2, r2, r1
 8004634:	6022      	streq	r2, [r4, #0]
 8004636:	6063      	str	r3, [r4, #4]
 8004638:	6004      	str	r4, [r0, #0]
 800463a:	e7ed      	b.n	8004618 <_free_r+0x24>
 800463c:	461a      	mov	r2, r3
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	b10b      	cbz	r3, 8004646 <_free_r+0x52>
 8004642:	42a3      	cmp	r3, r4
 8004644:	d9fa      	bls.n	800463c <_free_r+0x48>
 8004646:	6811      	ldr	r1, [r2, #0]
 8004648:	1850      	adds	r0, r2, r1
 800464a:	42a0      	cmp	r0, r4
 800464c:	d10b      	bne.n	8004666 <_free_r+0x72>
 800464e:	6820      	ldr	r0, [r4, #0]
 8004650:	4401      	add	r1, r0
 8004652:	1850      	adds	r0, r2, r1
 8004654:	4283      	cmp	r3, r0
 8004656:	6011      	str	r1, [r2, #0]
 8004658:	d1de      	bne.n	8004618 <_free_r+0x24>
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4401      	add	r1, r0
 8004660:	6011      	str	r1, [r2, #0]
 8004662:	6053      	str	r3, [r2, #4]
 8004664:	e7d8      	b.n	8004618 <_free_r+0x24>
 8004666:	d902      	bls.n	800466e <_free_r+0x7a>
 8004668:	230c      	movs	r3, #12
 800466a:	602b      	str	r3, [r5, #0]
 800466c:	e7d4      	b.n	8004618 <_free_r+0x24>
 800466e:	6820      	ldr	r0, [r4, #0]
 8004670:	1821      	adds	r1, r4, r0
 8004672:	428b      	cmp	r3, r1
 8004674:	bf01      	itttt	eq
 8004676:	6819      	ldreq	r1, [r3, #0]
 8004678:	685b      	ldreq	r3, [r3, #4]
 800467a:	1809      	addeq	r1, r1, r0
 800467c:	6021      	streq	r1, [r4, #0]
 800467e:	6063      	str	r3, [r4, #4]
 8004680:	6054      	str	r4, [r2, #4]
 8004682:	e7c9      	b.n	8004618 <_free_r+0x24>
 8004684:	bd38      	pop	{r3, r4, r5, pc}
 8004686:	bf00      	nop
 8004688:	20000090 	.word	0x20000090

0800468c <_read_r>:
 800468c:	b538      	push	{r3, r4, r5, lr}
 800468e:	4604      	mov	r4, r0
 8004690:	4608      	mov	r0, r1
 8004692:	4611      	mov	r1, r2
 8004694:	2200      	movs	r2, #0
 8004696:	4d05      	ldr	r5, [pc, #20]	; (80046ac <_read_r+0x20>)
 8004698:	602a      	str	r2, [r5, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	f7fc fe64 	bl	8001368 <_read>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d102      	bne.n	80046aa <_read_r+0x1e>
 80046a4:	682b      	ldr	r3, [r5, #0]
 80046a6:	b103      	cbz	r3, 80046aa <_read_r+0x1e>
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	20000198 	.word	0x20000198

080046b0 <_fstat_r>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	2300      	movs	r3, #0
 80046b4:	4d06      	ldr	r5, [pc, #24]	; (80046d0 <_fstat_r+0x20>)
 80046b6:	4604      	mov	r4, r0
 80046b8:	4608      	mov	r0, r1
 80046ba:	4611      	mov	r1, r2
 80046bc:	602b      	str	r3, [r5, #0]
 80046be:	f7fc fe97 	bl	80013f0 <_fstat>
 80046c2:	1c43      	adds	r3, r0, #1
 80046c4:	d102      	bne.n	80046cc <_fstat_r+0x1c>
 80046c6:	682b      	ldr	r3, [r5, #0]
 80046c8:	b103      	cbz	r3, 80046cc <_fstat_r+0x1c>
 80046ca:	6023      	str	r3, [r4, #0]
 80046cc:	bd38      	pop	{r3, r4, r5, pc}
 80046ce:	bf00      	nop
 80046d0:	20000198 	.word	0x20000198

080046d4 <_isatty_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	2300      	movs	r3, #0
 80046d8:	4d05      	ldr	r5, [pc, #20]	; (80046f0 <_isatty_r+0x1c>)
 80046da:	4604      	mov	r4, r0
 80046dc:	4608      	mov	r0, r1
 80046de:	602b      	str	r3, [r5, #0]
 80046e0:	f7fc fe95 	bl	800140e <_isatty>
 80046e4:	1c43      	adds	r3, r0, #1
 80046e6:	d102      	bne.n	80046ee <_isatty_r+0x1a>
 80046e8:	682b      	ldr	r3, [r5, #0]
 80046ea:	b103      	cbz	r3, 80046ee <_isatty_r+0x1a>
 80046ec:	6023      	str	r3, [r4, #0]
 80046ee:	bd38      	pop	{r3, r4, r5, pc}
 80046f0:	20000198 	.word	0x20000198

080046f4 <_init>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr

08004700 <_fini>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	bf00      	nop
 8004704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004706:	bc08      	pop	{r3}
 8004708:	469e      	mov	lr, r3
 800470a:	4770      	bx	lr
